/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 9:0-14 */
/***/ ((module) => {


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names

module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js":
/*!************************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/cssWithMappingToString.js ***!
  \************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module */
/*! CommonJS bailout: module.exports is used directly at 61:0-14 */
/***/ ((module) => {



function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = function cssWithMappingToString(item) {
  var _item = _slicedToArray(item, 4),
      content = _item[1],
      cssMapping = _item[3];

  if (typeof btoa === 'function') {
    // eslint-disable-next-line no-undef
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
};

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js& ***!
  \**************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _components_TrafficLight_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/TrafficLight.vue */ "./src/components/TrafficLight.vue");
//
//
//
//
//
//

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  components: {
    TrafficLight: _components_TrafficLight_vue__WEBPACK_IMPORTED_MODULE_0__.default
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=script&lang=js&":
/*!**********************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=script&lang=js& ***!
  \**********************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _traffic_light_components_Signal_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./traffic-light-components/Signal.vue */ "./src/components/traffic-light-components/Signal.vue");
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'TrafficLight',
  components: {
    Signal: _traffic_light_components_Signal_vue__WEBPACK_IMPORTED_MODULE_0__.default
  },
  props: {
    activeColor: String,
    timer: Number
  },
  data: function data() {
    return {
      signals: [{
        color: 'red',
        isActive: false
      }, {
        color: 'yellow',
        isActive: false
      }, {
        color: 'green',
        isActive: false
      }],
      signalsOrder: this.setSignalsOrderByDefault()
    };
  },
  created: function created() {
    console.log('created ' + this.activeColor);
    this.startTimer();
  },
  updated: function updated() {
    console.log('updated ' + this.activeColor);
    console.log(this.signalsOrder);
    this.startTimer();
  },
  watch: {// 'signalsOrder': () => {
    //   localStorage.setItem('signalsOrder', JSON.stringify(this.signalsOrder))
    // }
  },
  methods: {
    // getItFromLocalStorage(key) {
    //   const item = localStorage.getItem(key)
    //   if (item) {
    //     return JSON.parse(item)
    //   } else {
    //     return null
    //   }
    // },
    startTimer: function startTimer() {
      var _this = this;

      setTimeout(function () {
        _this.$router.push("/".concat(_this.signalsOrder[1]));

        _this.signalsOrder.push(_this.signalsOrder.shift());
      }, this.timer);
    },
    setSignalsOrderByDefault: function setSignalsOrderByDefault() {
      switch (this.activeColor) {
        case 'red':
          return ['red', 'yellow', 'green'];

        case 'yellow':
          return ['yellow', 'green', 'red'];

        case 'green':
          return ['green', 'red', 'yellow'];
      }
    }
  }
});

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=script&lang=js&":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=script&lang=js& ***!
  \*****************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
//
//
//
//
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  name: 'Signal',
  props: {
    color: String,
    isActive: Boolean,
    isDim: Boolean
  }
});

/***/ }),

/***/ "./node_modules/vue-router/dist/vue-router.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/vue-router/dist/vue-router.esm.js ***!
  \********************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/*!
  * vue-router v3.4.9
  * (c) 2020 Evan You
  * @license MIT
  */

/*  */
function assert(condition, message) {
  if (!condition) {
    throw new Error("[vue-router] " + message);
  }
}

function warn(condition, message) {
  if ( true && !condition) {
    typeof console !== 'undefined' && console.warn("[vue-router] " + message);
  }
}

function extend(a, b) {
  for (var key in b) {
    a[key] = b[key];
  }

  return a;
}
/*  */


var encodeReserveRE = /[!'()*]/g;

var encodeReserveReplacer = function (c) {
  return '%' + c.charCodeAt(0).toString(16);
};

var commaRE = /%2C/g; // fixed encodeURIComponent which is more conformant to RFC3986:
// - escapes [!'()*]
// - preserve commas

var encode = function (str) {
  return encodeURIComponent(str).replace(encodeReserveRE, encodeReserveReplacer).replace(commaRE, ',');
};

function decode(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    if (true) {
      warn(false, "Error decoding \"" + str + "\". Leaving it intact.");
    }
  }

  return str;
}

function resolveQuery(query, extraQuery, _parseQuery) {
  if (extraQuery === void 0) extraQuery = {};
  var parse = _parseQuery || parseQuery;
  var parsedQuery;

  try {
    parsedQuery = parse(query || '');
  } catch (e) {
     true && warn(false, e.message);
    parsedQuery = {};
  }

  for (var key in extraQuery) {
    var value = extraQuery[key];
    parsedQuery[key] = Array.isArray(value) ? value.map(castQueryParamValue) : castQueryParamValue(value);
  }

  return parsedQuery;
}

var castQueryParamValue = function (value) {
  return value == null || typeof value === 'object' ? value : String(value);
};

function parseQuery(query) {
  var res = {};
  query = query.trim().replace(/^(\?|#|&)/, '');

  if (!query) {
    return res;
  }

  query.split('&').forEach(function (param) {
    var parts = param.replace(/\+/g, ' ').split('=');
    var key = decode(parts.shift());
    var val = parts.length > 0 ? decode(parts.join('=')) : null;

    if (res[key] === undefined) {
      res[key] = val;
    } else if (Array.isArray(res[key])) {
      res[key].push(val);
    } else {
      res[key] = [res[key], val];
    }
  });
  return res;
}

function stringifyQuery(obj) {
  var res = obj ? Object.keys(obj).map(function (key) {
    var val = obj[key];

    if (val === undefined) {
      return '';
    }

    if (val === null) {
      return encode(key);
    }

    if (Array.isArray(val)) {
      var result = [];
      val.forEach(function (val2) {
        if (val2 === undefined) {
          return;
        }

        if (val2 === null) {
          result.push(encode(key));
        } else {
          result.push(encode(key) + '=' + encode(val2));
        }
      });
      return result.join('&');
    }

    return encode(key) + '=' + encode(val);
  }).filter(function (x) {
    return x.length > 0;
  }).join('&') : null;
  return res ? "?" + res : '';
}
/*  */


var trailingSlashRE = /\/?$/;

function createRoute(record, location, redirectedFrom, router) {
  var stringifyQuery = router && router.options.stringifyQuery;
  var query = location.query || {};

  try {
    query = clone(query);
  } catch (e) {}

  var route = {
    name: location.name || record && record.name,
    meta: record && record.meta || {},
    path: location.path || '/',
    hash: location.hash || '',
    query: query,
    params: location.params || {},
    fullPath: getFullPath(location, stringifyQuery),
    matched: record ? formatMatch(record) : []
  };

  if (redirectedFrom) {
    route.redirectedFrom = getFullPath(redirectedFrom, stringifyQuery);
  }

  return Object.freeze(route);
}

function clone(value) {
  if (Array.isArray(value)) {
    return value.map(clone);
  } else if (value && typeof value === 'object') {
    var res = {};

    for (var key in value) {
      res[key] = clone(value[key]);
    }

    return res;
  } else {
    return value;
  }
} // the starting route that represents the initial state


var START = createRoute(null, {
  path: '/'
});

function formatMatch(record) {
  var res = [];

  while (record) {
    res.unshift(record);
    record = record.parent;
  }

  return res;
}

function getFullPath(ref, _stringifyQuery) {
  var path = ref.path;
  var query = ref.query;
  if (query === void 0) query = {};
  var hash = ref.hash;
  if (hash === void 0) hash = '';
  var stringify = _stringifyQuery || stringifyQuery;
  return (path || '/') + stringify(query) + hash;
}

function isSameRoute(a, b) {
  if (b === START) {
    return a === b;
  } else if (!b) {
    return false;
  } else if (a.path && b.path) {
    return a.path.replace(trailingSlashRE, '') === b.path.replace(trailingSlashRE, '') && a.hash === b.hash && isObjectEqual(a.query, b.query);
  } else if (a.name && b.name) {
    return a.name === b.name && a.hash === b.hash && isObjectEqual(a.query, b.query) && isObjectEqual(a.params, b.params);
  } else {
    return false;
  }
}

function isObjectEqual(a, b) {
  if (a === void 0) a = {};
  if (b === void 0) b = {}; // handle null value #1566

  if (!a || !b) {
    return a === b;
  }

  var aKeys = Object.keys(a).sort();
  var bKeys = Object.keys(b).sort();

  if (aKeys.length !== bKeys.length) {
    return false;
  }

  return aKeys.every(function (key, i) {
    var aVal = a[key];
    var bKey = bKeys[i];

    if (bKey !== key) {
      return false;
    }

    var bVal = b[key]; // query values can be null and undefined

    if (aVal == null || bVal == null) {
      return aVal === bVal;
    } // check nested equality


    if (typeof aVal === 'object' && typeof bVal === 'object') {
      return isObjectEqual(aVal, bVal);
    }

    return String(aVal) === String(bVal);
  });
}

function isIncludedRoute(current, target) {
  return current.path.replace(trailingSlashRE, '/').indexOf(target.path.replace(trailingSlashRE, '/')) === 0 && (!target.hash || current.hash === target.hash) && queryIncludes(current.query, target.query);
}

function queryIncludes(current, target) {
  for (var key in target) {
    if (!(key in current)) {
      return false;
    }
  }

  return true;
}

function handleRouteEntered(route) {
  for (var i = 0; i < route.matched.length; i++) {
    var record = route.matched[i];

    for (var name in record.instances) {
      var instance = record.instances[name];
      var cbs = record.enteredCbs[name];

      if (!instance || !cbs) {
        continue;
      }

      delete record.enteredCbs[name];

      for (var i$1 = 0; i$1 < cbs.length; i$1++) {
        if (!instance._isBeingDestroyed) {
          cbs[i$1](instance);
        }
      }
    }
  }
}

var View = {
  name: 'RouterView',
  functional: true,
  props: {
    name: {
      type: String,
      default: 'default'
    }
  },
  render: function render(_, ref) {
    var props = ref.props;
    var children = ref.children;
    var parent = ref.parent;
    var data = ref.data; // used by devtools to display a router-view badge

    data.routerView = true; // directly use parent context's createElement() function
    // so that components rendered by router-view can resolve named slots

    var h = parent.$createElement;
    var name = props.name;
    var route = parent.$route;
    var cache = parent._routerViewCache || (parent._routerViewCache = {}); // determine current view depth, also check to see if the tree
    // has been toggled inactive but kept-alive.

    var depth = 0;
    var inactive = false;

    while (parent && parent._routerRoot !== parent) {
      var vnodeData = parent.$vnode ? parent.$vnode.data : {};

      if (vnodeData.routerView) {
        depth++;
      }

      if (vnodeData.keepAlive && parent._directInactive && parent._inactive) {
        inactive = true;
      }

      parent = parent.$parent;
    }

    data.routerViewDepth = depth; // render previous view if the tree is inactive and kept-alive

    if (inactive) {
      var cachedData = cache[name];
      var cachedComponent = cachedData && cachedData.component;

      if (cachedComponent) {
        // #2301
        // pass props
        if (cachedData.configProps) {
          fillPropsinData(cachedComponent, data, cachedData.route, cachedData.configProps);
        }

        return h(cachedComponent, data, children);
      } else {
        // render previous empty view
        return h();
      }
    }

    var matched = route.matched[depth];
    var component = matched && matched.components[name]; // render empty node if no matched route or no config component

    if (!matched || !component) {
      cache[name] = null;
      return h();
    } // cache component


    cache[name] = {
      component: component
    }; // attach instance registration hook
    // this will be called in the instance's injected lifecycle hooks

    data.registerRouteInstance = function (vm, val) {
      // val could be undefined for unregistration
      var current = matched.instances[name];

      if (val && current !== vm || !val && current === vm) {
        matched.instances[name] = val;
      }
    } // also register instance in prepatch hook
    // in case the same component instance is reused across different routes
    ;

    (data.hook || (data.hook = {})).prepatch = function (_, vnode) {
      matched.instances[name] = vnode.componentInstance;
    }; // register instance in init hook
    // in case kept-alive component be actived when routes changed


    data.hook.init = function (vnode) {
      if (vnode.data.keepAlive && vnode.componentInstance && vnode.componentInstance !== matched.instances[name]) {
        matched.instances[name] = vnode.componentInstance;
      } // if the route transition has already been confirmed then we weren't
      // able to call the cbs during confirmation as the component was not
      // registered yet, so we call it here.


      handleRouteEntered(route);
    };

    var configProps = matched.props && matched.props[name]; // save route and configProps in cache

    if (configProps) {
      extend(cache[name], {
        route: route,
        configProps: configProps
      });
      fillPropsinData(component, data, route, configProps);
    }

    return h(component, data, children);
  }
};

function fillPropsinData(component, data, route, configProps) {
  // resolve props
  var propsToPass = data.props = resolveProps(route, configProps);

  if (propsToPass) {
    // clone to prevent mutation
    propsToPass = data.props = extend({}, propsToPass); // pass non-declared props as attrs

    var attrs = data.attrs = data.attrs || {};

    for (var key in propsToPass) {
      if (!component.props || !(key in component.props)) {
        attrs[key] = propsToPass[key];
        delete propsToPass[key];
      }
    }
  }
}

function resolveProps(route, config) {
  switch (typeof config) {
    case 'undefined':
      return;

    case 'object':
      return config;

    case 'function':
      return config(route);

    case 'boolean':
      return config ? route.params : undefined;

    default:
      if (true) {
        warn(false, "props in \"" + route.path + "\" is a " + typeof config + ", " + "expecting an object, function or boolean.");
      }

  }
}
/*  */


function resolvePath(relative, base, append) {
  var firstChar = relative.charAt(0);

  if (firstChar === '/') {
    return relative;
  }

  if (firstChar === '?' || firstChar === '#') {
    return base + relative;
  }

  var stack = base.split('/'); // remove trailing segment if:
  // - not appending
  // - appending to trailing slash (last segment is empty)

  if (!append || !stack[stack.length - 1]) {
    stack.pop();
  } // resolve relative path


  var segments = relative.replace(/^\//, '').split('/');

  for (var i = 0; i < segments.length; i++) {
    var segment = segments[i];

    if (segment === '..') {
      stack.pop();
    } else if (segment !== '.') {
      stack.push(segment);
    }
  } // ensure leading slash


  if (stack[0] !== '') {
    stack.unshift('');
  }

  return stack.join('/');
}

function parsePath(path) {
  var hash = '';
  var query = '';
  var hashIndex = path.indexOf('#');

  if (hashIndex >= 0) {
    hash = path.slice(hashIndex);
    path = path.slice(0, hashIndex);
  }

  var queryIndex = path.indexOf('?');

  if (queryIndex >= 0) {
    query = path.slice(queryIndex + 1);
    path = path.slice(0, queryIndex);
  }

  return {
    path: path,
    query: query,
    hash: hash
  };
}

function cleanPath(path) {
  return path.replace(/\/\//g, '/');
}

var isarray = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};
/**
 * Expose `pathToRegexp`.
 */


var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options));
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options && options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
/*  */
// $flow-disable-line

var regexpCompileCache = Object.create(null);

function fillParams(path, params, routeMsg) {
  params = params || {};

  try {
    var filler = regexpCompileCache[path] || (regexpCompileCache[path] = pathToRegexp_1.compile(path)); // Fix #2505 resolving asterisk routes { name: 'not-found', params: { pathMatch: '/not-found' }}
    // and fix #3106 so that you can work with location descriptor object having params.pathMatch equal to empty string

    if (typeof params.pathMatch === 'string') {
      params[0] = params.pathMatch;
    }

    return filler(params, {
      pretty: true
    });
  } catch (e) {
    if (true) {
      // Fix #3072 no warn if `pathMatch` is string
      warn(typeof params.pathMatch === 'string', "missing param for " + routeMsg + ": " + e.message);
    }

    return '';
  } finally {
    // delete the 0 if it was added
    delete params[0];
  }
}
/*  */


function normalizeLocation(raw, current, append, router) {
  var next = typeof raw === 'string' ? {
    path: raw
  } : raw; // named target

  if (next._normalized) {
    return next;
  } else if (next.name) {
    next = extend({}, raw);
    var params = next.params;

    if (params && typeof params === 'object') {
      next.params = extend({}, params);
    }

    return next;
  } // relative params


  if (!next.path && next.params && current) {
    next = extend({}, next);
    next._normalized = true;
    var params$1 = extend(extend({}, current.params), next.params);

    if (current.name) {
      next.name = current.name;
      next.params = params$1;
    } else if (current.matched.length) {
      var rawPath = current.matched[current.matched.length - 1].path;
      next.path = fillParams(rawPath, params$1, "path " + current.path);
    } else if (true) {
      warn(false, "relative params navigation requires a current route.");
    }

    return next;
  }

  var parsedPath = parsePath(next.path || '');
  var basePath = current && current.path || '/';
  var path = parsedPath.path ? resolvePath(parsedPath.path, basePath, append || next.append) : basePath;
  var query = resolveQuery(parsedPath.query, next.query, router && router.options.parseQuery);
  var hash = next.hash || parsedPath.hash;

  if (hash && hash.charAt(0) !== '#') {
    hash = "#" + hash;
  }

  return {
    _normalized: true,
    path: path,
    query: query,
    hash: hash
  };
}
/*  */
// work around weird flow bug


var toTypes = [String, Object];
var eventTypes = [String, Array];

var noop = function () {};

var Link = {
  name: 'RouterLink',
  props: {
    to: {
      type: toTypes,
      required: true
    },
    tag: {
      type: String,
      default: 'a'
    },
    exact: Boolean,
    append: Boolean,
    replace: Boolean,
    activeClass: String,
    exactActiveClass: String,
    ariaCurrentValue: {
      type: String,
      default: 'page'
    },
    event: {
      type: eventTypes,
      default: 'click'
    }
  },
  render: function render(h) {
    var this$1 = this;
    var router = this.$router;
    var current = this.$route;
    var ref = router.resolve(this.to, current, this.append);
    var location = ref.location;
    var route = ref.route;
    var href = ref.href;
    var classes = {};
    var globalActiveClass = router.options.linkActiveClass;
    var globalExactActiveClass = router.options.linkExactActiveClass; // Support global empty active class

    var activeClassFallback = globalActiveClass == null ? 'router-link-active' : globalActiveClass;
    var exactActiveClassFallback = globalExactActiveClass == null ? 'router-link-exact-active' : globalExactActiveClass;
    var activeClass = this.activeClass == null ? activeClassFallback : this.activeClass;
    var exactActiveClass = this.exactActiveClass == null ? exactActiveClassFallback : this.exactActiveClass;
    var compareTarget = route.redirectedFrom ? createRoute(null, normalizeLocation(route.redirectedFrom), null, router) : route;
    classes[exactActiveClass] = isSameRoute(current, compareTarget);
    classes[activeClass] = this.exact ? classes[exactActiveClass] : isIncludedRoute(current, compareTarget);
    var ariaCurrentValue = classes[exactActiveClass] ? this.ariaCurrentValue : null;

    var handler = function (e) {
      if (guardEvent(e)) {
        if (this$1.replace) {
          router.replace(location, noop);
        } else {
          router.push(location, noop);
        }
      }
    };

    var on = {
      click: guardEvent
    };

    if (Array.isArray(this.event)) {
      this.event.forEach(function (e) {
        on[e] = handler;
      });
    } else {
      on[this.event] = handler;
    }

    var data = {
      class: classes
    };
    var scopedSlot = !this.$scopedSlots.$hasNormal && this.$scopedSlots.default && this.$scopedSlots.default({
      href: href,
      route: route,
      navigate: handler,
      isActive: classes[activeClass],
      isExactActive: classes[exactActiveClass]
    });

    if (scopedSlot) {
      if (scopedSlot.length === 1) {
        return scopedSlot[0];
      } else if (scopedSlot.length > 1 || !scopedSlot.length) {
        if (true) {
          warn(false, "RouterLink with to=\"" + this.to + "\" is trying to use a scoped slot but it didn't provide exactly one child. Wrapping the content with a span element.");
        }

        return scopedSlot.length === 0 ? h() : h('span', {}, scopedSlot);
      }
    }

    if (this.tag === 'a') {
      data.on = on;
      data.attrs = {
        href: href,
        'aria-current': ariaCurrentValue
      };
    } else {
      // find the first <a> child and apply listener and href
      var a = findAnchor(this.$slots.default);

      if (a) {
        // in case the <a> is a static node
        a.isStatic = false;
        var aData = a.data = extend({}, a.data);
        aData.on = aData.on || {}; // transform existing events in both objects into arrays so we can push later

        for (var event in aData.on) {
          var handler$1 = aData.on[event];

          if (event in on) {
            aData.on[event] = Array.isArray(handler$1) ? handler$1 : [handler$1];
          }
        } // append new listeners for router-link


        for (var event$1 in on) {
          if (event$1 in aData.on) {
            // on[event] is always a function
            aData.on[event$1].push(on[event$1]);
          } else {
            aData.on[event$1] = handler;
          }
        }

        var aAttrs = a.data.attrs = extend({}, a.data.attrs);
        aAttrs.href = href;
        aAttrs['aria-current'] = ariaCurrentValue;
      } else {
        // doesn't have <a> child, apply listener to self
        data.on = on;
      }
    }

    return h(this.tag, data, this.$slots.default);
  }
};

function guardEvent(e) {
  // don't redirect with control keys
  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) {
    return;
  } // don't redirect when preventDefault called


  if (e.defaultPrevented) {
    return;
  } // don't redirect on right click


  if (e.button !== undefined && e.button !== 0) {
    return;
  } // don't redirect if `target="_blank"`


  if (e.currentTarget && e.currentTarget.getAttribute) {
    var target = e.currentTarget.getAttribute('target');

    if (/\b_blank\b/i.test(target)) {
      return;
    }
  } // this may be a Weex event which doesn't have this method


  if (e.preventDefault) {
    e.preventDefault();
  }

  return true;
}

function findAnchor(children) {
  if (children) {
    var child;

    for (var i = 0; i < children.length; i++) {
      child = children[i];

      if (child.tag === 'a') {
        return child;
      }

      if (child.children && (child = findAnchor(child.children))) {
        return child;
      }
    }
  }
}

var _Vue;

function install(Vue) {
  if (install.installed && _Vue === Vue) {
    return;
  }

  install.installed = true;
  _Vue = Vue;

  var isDef = function (v) {
    return v !== undefined;
  };

  var registerInstance = function (vm, callVal) {
    var i = vm.$options._parentVnode;

    if (isDef(i) && isDef(i = i.data) && isDef(i = i.registerRouteInstance)) {
      i(vm, callVal);
    }
  };

  Vue.mixin({
    beforeCreate: function beforeCreate() {
      if (isDef(this.$options.router)) {
        this._routerRoot = this;
        this._router = this.$options.router;

        this._router.init(this);

        Vue.util.defineReactive(this, '_route', this._router.history.current);
      } else {
        this._routerRoot = this.$parent && this.$parent._routerRoot || this;
      }

      registerInstance(this, this);
    },
    destroyed: function destroyed() {
      registerInstance(this);
    }
  });
  Object.defineProperty(Vue.prototype, '$router', {
    get: function get() {
      return this._routerRoot._router;
    }
  });
  Object.defineProperty(Vue.prototype, '$route', {
    get: function get() {
      return this._routerRoot._route;
    }
  });
  Vue.component('RouterView', View);
  Vue.component('RouterLink', Link);
  var strats = Vue.config.optionMergeStrategies; // use the same hook merging strategy for route hooks

  strats.beforeRouteEnter = strats.beforeRouteLeave = strats.beforeRouteUpdate = strats.created;
}
/*  */


var inBrowser = typeof window !== 'undefined';
/*  */

function createRouteMap(routes, oldPathList, oldPathMap, oldNameMap) {
  // the path list is used to control path matching priority
  var pathList = oldPathList || []; // $flow-disable-line

  var pathMap = oldPathMap || Object.create(null); // $flow-disable-line

  var nameMap = oldNameMap || Object.create(null);
  routes.forEach(function (route) {
    addRouteRecord(pathList, pathMap, nameMap, route);
  }); // ensure wildcard routes are always at the end

  for (var i = 0, l = pathList.length; i < l; i++) {
    if (pathList[i] === '*') {
      pathList.push(pathList.splice(i, 1)[0]);
      l--;
      i--;
    }
  }

  if (true) {
    // warn if routes do not include leading slashes
    var found = pathList // check for missing leading slash
    .filter(function (path) {
      return path && path.charAt(0) !== '*' && path.charAt(0) !== '/';
    });

    if (found.length > 0) {
      var pathNames = found.map(function (path) {
        return "- " + path;
      }).join('\n');
      warn(false, "Non-nested routes must include a leading slash character. Fix the following routes: \n" + pathNames);
    }
  }

  return {
    pathList: pathList,
    pathMap: pathMap,
    nameMap: nameMap
  };
}

function addRouteRecord(pathList, pathMap, nameMap, route, parent, matchAs) {
  var path = route.path;
  var name = route.name;

  if (true) {
    assert(path != null, "\"path\" is required in a route configuration.");
    assert(typeof route.component !== 'string', "route config \"component\" for path: " + String(path || name) + " cannot be a " + "string id. Use an actual component instead.");
    warn( // eslint-disable-next-line no-control-regex
    !/[^\u0000-\u007F]+/.test(path), "Route with path \"" + path + "\" contains unencoded characters, make sure " + "your path is correctly encoded before passing it to the router. Use " + "encodeURI to encode static segments of your path.");
  }

  var pathToRegexpOptions = route.pathToRegexpOptions || {};
  var normalizedPath = normalizePath(path, parent, pathToRegexpOptions.strict);

  if (typeof route.caseSensitive === 'boolean') {
    pathToRegexpOptions.sensitive = route.caseSensitive;
  }

  var record = {
    path: normalizedPath,
    regex: compileRouteRegex(normalizedPath, pathToRegexpOptions),
    components: route.components || {
      default: route.component
    },
    instances: {},
    enteredCbs: {},
    name: name,
    parent: parent,
    matchAs: matchAs,
    redirect: route.redirect,
    beforeEnter: route.beforeEnter,
    meta: route.meta || {},
    props: route.props == null ? {} : route.components ? route.props : {
      default: route.props
    }
  };

  if (route.children) {
    // Warn if route is named, does not redirect and has a default child route.
    // If users navigate to this route by name, the default child will
    // not be rendered (GH Issue #629)
    if (true) {
      if (route.name && !route.redirect && route.children.some(function (child) {
        return /^\/?$/.test(child.path);
      })) {
        warn(false, "Named Route '" + route.name + "' has a default child route. " + "When navigating to this named route (:to=\"{name: '" + route.name + "'\"), " + "the default child route will not be rendered. Remove the name from " + "this route and use the name of the default child route for named " + "links instead.");
      }
    }

    route.children.forEach(function (child) {
      var childMatchAs = matchAs ? cleanPath(matchAs + "/" + child.path) : undefined;
      addRouteRecord(pathList, pathMap, nameMap, child, record, childMatchAs);
    });
  }

  if (!pathMap[record.path]) {
    pathList.push(record.path);
    pathMap[record.path] = record;
  }

  if (route.alias !== undefined) {
    var aliases = Array.isArray(route.alias) ? route.alias : [route.alias];

    for (var i = 0; i < aliases.length; ++i) {
      var alias = aliases[i];

      if ( true && alias === path) {
        warn(false, "Found an alias with the same value as the path: \"" + path + "\". You have to remove that alias. It will be ignored in development."); // skip in dev to make it work

        continue;
      }

      var aliasRoute = {
        path: alias,
        children: route.children
      };
      addRouteRecord(pathList, pathMap, nameMap, aliasRoute, parent, record.path || '/' // matchAs
      );
    }
  }

  if (name) {
    if (!nameMap[name]) {
      nameMap[name] = record;
    } else if ( true && !matchAs) {
      warn(false, "Duplicate named routes definition: " + "{ name: \"" + name + "\", path: \"" + record.path + "\" }");
    }
  }
}

function compileRouteRegex(path, pathToRegexpOptions) {
  var regex = pathToRegexp_1(path, [], pathToRegexpOptions);

  if (true) {
    var keys = Object.create(null);
    regex.keys.forEach(function (key) {
      warn(!keys[key.name], "Duplicate param keys in route with path: \"" + path + "\"");
      keys[key.name] = true;
    });
  }

  return regex;
}

function normalizePath(path, parent, strict) {
  if (!strict) {
    path = path.replace(/\/$/, '');
  }

  if (path[0] === '/') {
    return path;
  }

  if (parent == null) {
    return path;
  }

  return cleanPath(parent.path + "/" + path);
}
/*  */


function createMatcher(routes, router) {
  var ref = createRouteMap(routes);
  var pathList = ref.pathList;
  var pathMap = ref.pathMap;
  var nameMap = ref.nameMap;

  function addRoutes(routes) {
    createRouteMap(routes, pathList, pathMap, nameMap);
  }

  function match(raw, currentRoute, redirectedFrom) {
    var location = normalizeLocation(raw, currentRoute, false, router);
    var name = location.name;

    if (name) {
      var record = nameMap[name];

      if (true) {
        warn(record, "Route with name '" + name + "' does not exist");
      }

      if (!record) {
        return _createRoute(null, location);
      }

      var paramNames = record.regex.keys.filter(function (key) {
        return !key.optional;
      }).map(function (key) {
        return key.name;
      });

      if (typeof location.params !== 'object') {
        location.params = {};
      }

      if (currentRoute && typeof currentRoute.params === 'object') {
        for (var key in currentRoute.params) {
          if (!(key in location.params) && paramNames.indexOf(key) > -1) {
            location.params[key] = currentRoute.params[key];
          }
        }
      }

      location.path = fillParams(record.path, location.params, "named route \"" + name + "\"");
      return _createRoute(record, location, redirectedFrom);
    } else if (location.path) {
      location.params = {};

      for (var i = 0; i < pathList.length; i++) {
        var path = pathList[i];
        var record$1 = pathMap[path];

        if (matchRoute(record$1.regex, location.path, location.params)) {
          return _createRoute(record$1, location, redirectedFrom);
        }
      }
    } // no match


    return _createRoute(null, location);
  }

  function redirect(record, location) {
    var originalRedirect = record.redirect;
    var redirect = typeof originalRedirect === 'function' ? originalRedirect(createRoute(record, location, null, router)) : originalRedirect;

    if (typeof redirect === 'string') {
      redirect = {
        path: redirect
      };
    }

    if (!redirect || typeof redirect !== 'object') {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }

    var re = redirect;
    var name = re.name;
    var path = re.path;
    var query = location.query;
    var hash = location.hash;
    var params = location.params;
    query = re.hasOwnProperty('query') ? re.query : query;
    hash = re.hasOwnProperty('hash') ? re.hash : hash;
    params = re.hasOwnProperty('params') ? re.params : params;

    if (name) {
      // resolved named direct
      var targetRecord = nameMap[name];

      if (true) {
        assert(targetRecord, "redirect failed: named route \"" + name + "\" not found.");
      }

      return match({
        _normalized: true,
        name: name,
        query: query,
        hash: hash,
        params: params
      }, undefined, location);
    } else if (path) {
      // 1. resolve relative redirect
      var rawPath = resolveRecordPath(path, record); // 2. resolve params

      var resolvedPath = fillParams(rawPath, params, "redirect route with path \"" + rawPath + "\""); // 3. rematch with existing query and hash

      return match({
        _normalized: true,
        path: resolvedPath,
        query: query,
        hash: hash
      }, undefined, location);
    } else {
      if (true) {
        warn(false, "invalid redirect option: " + JSON.stringify(redirect));
      }

      return _createRoute(null, location);
    }
  }

  function alias(record, location, matchAs) {
    var aliasedPath = fillParams(matchAs, location.params, "aliased route with path \"" + matchAs + "\"");
    var aliasedMatch = match({
      _normalized: true,
      path: aliasedPath
    });

    if (aliasedMatch) {
      var matched = aliasedMatch.matched;
      var aliasedRecord = matched[matched.length - 1];
      location.params = aliasedMatch.params;
      return _createRoute(aliasedRecord, location);
    }

    return _createRoute(null, location);
  }

  function _createRoute(record, location, redirectedFrom) {
    if (record && record.redirect) {
      return redirect(record, redirectedFrom || location);
    }

    if (record && record.matchAs) {
      return alias(record, location, record.matchAs);
    }

    return createRoute(record, location, redirectedFrom, router);
  }

  return {
    match: match,
    addRoutes: addRoutes
  };
}

function matchRoute(regex, path, params) {
  var m = path.match(regex);

  if (!m) {
    return false;
  } else if (!params) {
    return true;
  }

  for (var i = 1, len = m.length; i < len; ++i) {
    var key = regex.keys[i - 1];

    if (key) {
      // Fix #1994: using * with props: true generates a param named 0
      params[key.name || 'pathMatch'] = typeof m[i] === 'string' ? decode(m[i]) : m[i];
    }
  }

  return true;
}

function resolveRecordPath(path, record) {
  return resolvePath(path, record.parent ? record.parent.path : '/', true);
}
/*  */
// use User Timing api (if present) for more accurate key precision


var Time = inBrowser && window.performance && window.performance.now ? window.performance : Date;

function genStateKey() {
  return Time.now().toFixed(3);
}

var _key = genStateKey();

function getStateKey() {
  return _key;
}

function setStateKey(key) {
  return _key = key;
}
/*  */


var positionStore = Object.create(null);

function setupScroll() {
  // Prevent browser scroll behavior on History popstate
  if ('scrollRestoration' in window.history) {
    window.history.scrollRestoration = 'manual';
  } // Fix for #1585 for Firefox
  // Fix for #2195 Add optional third attribute to workaround a bug in safari https://bugs.webkit.org/show_bug.cgi?id=182678
  // Fix for #2774 Support for apps loaded from Windows file shares not mapped to network drives: replaced location.origin with
  // window.location.protocol + '//' + window.location.host
  // location.host contains the port and location.hostname doesn't


  var protocolAndPath = window.location.protocol + '//' + window.location.host;
  var absolutePath = window.location.href.replace(protocolAndPath, ''); // preserve existing history state as it could be overriden by the user

  var stateCopy = extend({}, window.history.state);
  stateCopy.key = getStateKey();
  window.history.replaceState(stateCopy, '', absolutePath);
  window.addEventListener('popstate', handlePopState);
  return function () {
    window.removeEventListener('popstate', handlePopState);
  };
}

function handleScroll(router, to, from, isPop) {
  if (!router.app) {
    return;
  }

  var behavior = router.options.scrollBehavior;

  if (!behavior) {
    return;
  }

  if (true) {
    assert(typeof behavior === 'function', "scrollBehavior must be a function");
  } // wait until re-render finishes before scrolling


  router.app.$nextTick(function () {
    var position = getScrollPosition();
    var shouldScroll = behavior.call(router, to, from, isPop ? position : null);

    if (!shouldScroll) {
      return;
    }

    if (typeof shouldScroll.then === 'function') {
      shouldScroll.then(function (shouldScroll) {
        scrollToPosition(shouldScroll, position);
      }).catch(function (err) {
        if (true) {
          assert(false, err.toString());
        }
      });
    } else {
      scrollToPosition(shouldScroll, position);
    }
  });
}

function saveScrollPosition() {
  var key = getStateKey();

  if (key) {
    positionStore[key] = {
      x: window.pageXOffset,
      y: window.pageYOffset
    };
  }
}

function handlePopState(e) {
  saveScrollPosition();

  if (e.state && e.state.key) {
    setStateKey(e.state.key);
  }
}

function getScrollPosition() {
  var key = getStateKey();

  if (key) {
    return positionStore[key];
  }
}

function getElementPosition(el, offset) {
  var docEl = document.documentElement;
  var docRect = docEl.getBoundingClientRect();
  var elRect = el.getBoundingClientRect();
  return {
    x: elRect.left - docRect.left - offset.x,
    y: elRect.top - docRect.top - offset.y
  };
}

function isValidPosition(obj) {
  return isNumber(obj.x) || isNumber(obj.y);
}

function normalizePosition(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : window.pageXOffset,
    y: isNumber(obj.y) ? obj.y : window.pageYOffset
  };
}

function normalizeOffset(obj) {
  return {
    x: isNumber(obj.x) ? obj.x : 0,
    y: isNumber(obj.y) ? obj.y : 0
  };
}

function isNumber(v) {
  return typeof v === 'number';
}

var hashStartsWithNumberRE = /^#\d/;

function scrollToPosition(shouldScroll, position) {
  var isObject = typeof shouldScroll === 'object';

  if (isObject && typeof shouldScroll.selector === 'string') {
    // getElementById would still fail if the selector contains a more complicated query like #main[data-attr]
    // but at the same time, it doesn't make much sense to select an element with an id and an extra selector
    var el = hashStartsWithNumberRE.test(shouldScroll.selector) // $flow-disable-line
    ? document.getElementById(shouldScroll.selector.slice(1)) // $flow-disable-line
    : document.querySelector(shouldScroll.selector);

    if (el) {
      var offset = shouldScroll.offset && typeof shouldScroll.offset === 'object' ? shouldScroll.offset : {};
      offset = normalizeOffset(offset);
      position = getElementPosition(el, offset);
    } else if (isValidPosition(shouldScroll)) {
      position = normalizePosition(shouldScroll);
    }
  } else if (isObject && isValidPosition(shouldScroll)) {
    position = normalizePosition(shouldScroll);
  }

  if (position) {
    // $flow-disable-line
    if ('scrollBehavior' in document.documentElement.style) {
      window.scrollTo({
        left: position.x,
        top: position.y,
        // $flow-disable-line
        behavior: shouldScroll.behavior
      });
    } else {
      window.scrollTo(position.x, position.y);
    }
  }
}
/*  */


var supportsPushState = inBrowser && function () {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) {
    return false;
  }

  return window.history && typeof window.history.pushState === 'function';
}();

function pushState(url, replace) {
  saveScrollPosition(); // try...catch the pushState call to get around Safari
  // DOM Exception 18 where it limits to 100 pushState calls

  var history = window.history;

  try {
    if (replace) {
      // preserve existing history state as it could be overriden by the user
      var stateCopy = extend({}, history.state);
      stateCopy.key = getStateKey();
      history.replaceState(stateCopy, '', url);
    } else {
      history.pushState({
        key: setStateKey(genStateKey())
      }, '', url);
    }
  } catch (e) {
    window.location[replace ? 'replace' : 'assign'](url);
  }
}

function replaceState(url) {
  pushState(url, true);
}
/*  */


function runQueue(queue, fn, cb) {
  var step = function (index) {
    if (index >= queue.length) {
      cb();
    } else {
      if (queue[index]) {
        fn(queue[index], function () {
          step(index + 1);
        });
      } else {
        step(index + 1);
      }
    }
  };

  step(0);
} // When changing thing, also edit router.d.ts


var NavigationFailureType = {
  redirected: 2,
  aborted: 4,
  cancelled: 8,
  duplicated: 16
};

function createNavigationRedirectedError(from, to) {
  return createRouterError(from, to, NavigationFailureType.redirected, "Redirected when going from \"" + from.fullPath + "\" to \"" + stringifyRoute(to) + "\" via a navigation guard.");
}

function createNavigationDuplicatedError(from, to) {
  var error = createRouterError(from, to, NavigationFailureType.duplicated, "Avoided redundant navigation to current location: \"" + from.fullPath + "\"."); // backwards compatible with the first introduction of Errors

  error.name = 'NavigationDuplicated';
  return error;
}

function createNavigationCancelledError(from, to) {
  return createRouterError(from, to, NavigationFailureType.cancelled, "Navigation cancelled from \"" + from.fullPath + "\" to \"" + to.fullPath + "\" with a new navigation.");
}

function createNavigationAbortedError(from, to) {
  return createRouterError(from, to, NavigationFailureType.aborted, "Navigation aborted from \"" + from.fullPath + "\" to \"" + to.fullPath + "\" via a navigation guard.");
}

function createRouterError(from, to, type, message) {
  var error = new Error(message);
  error._isRouter = true;
  error.from = from;
  error.to = to;
  error.type = type;
  return error;
}

var propertiesToLog = ['params', 'query', 'hash'];

function stringifyRoute(to) {
  if (typeof to === 'string') {
    return to;
  }

  if ('path' in to) {
    return to.path;
  }

  var location = {};
  propertiesToLog.forEach(function (key) {
    if (key in to) {
      location[key] = to[key];
    }
  });
  return JSON.stringify(location, null, 2);
}

function isError(err) {
  return Object.prototype.toString.call(err).indexOf('Error') > -1;
}

function isNavigationFailure(err, errorType) {
  return isError(err) && err._isRouter && (errorType == null || err.type === errorType);
}
/*  */


function resolveAsyncComponents(matched) {
  return function (to, from, next) {
    var hasAsync = false;
    var pending = 0;
    var error = null;
    flatMapComponents(matched, function (def, _, match, key) {
      // if it's a function and doesn't have cid attached,
      // assume it's an async component resolve function.
      // we are not using Vue's default async resolving mechanism because
      // we want to halt the navigation until the incoming component has been
      // resolved.
      if (typeof def === 'function' && def.cid === undefined) {
        hasAsync = true;
        pending++;
        var resolve = once(function (resolvedDef) {
          if (isESModule(resolvedDef)) {
            resolvedDef = resolvedDef.default;
          } // save resolved on async factory in case it's used elsewhere


          def.resolved = typeof resolvedDef === 'function' ? resolvedDef : _Vue.extend(resolvedDef);
          match.components[key] = resolvedDef;
          pending--;

          if (pending <= 0) {
            next();
          }
        });
        var reject = once(function (reason) {
          var msg = "Failed to resolve async component " + key + ": " + reason;
           true && warn(false, msg);

          if (!error) {
            error = isError(reason) ? reason : new Error(msg);
            next(error);
          }
        });
        var res;

        try {
          res = def(resolve, reject);
        } catch (e) {
          reject(e);
        }

        if (res) {
          if (typeof res.then === 'function') {
            res.then(resolve, reject);
          } else {
            // new syntax in Vue 2.3
            var comp = res.component;

            if (comp && typeof comp.then === 'function') {
              comp.then(resolve, reject);
            }
          }
        }
      }
    });

    if (!hasAsync) {
      next();
    }
  };
}

function flatMapComponents(matched, fn) {
  return flatten(matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return fn(m.components[key], m.instances[key], m, key);
    });
  }));
}

function flatten(arr) {
  return Array.prototype.concat.apply([], arr);
}

var hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

function isESModule(obj) {
  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';
} // in Webpack 2, require.ensure now also returns a Promise
// so the resolve/reject functions may get called an extra time
// if the user uses an arrow function shorthand that happens to
// return that Promise.


function once(fn) {
  var called = false;
  return function () {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    if (called) {
      return;
    }

    called = true;
    return fn.apply(this, args);
  };
}
/*  */


var History = function History(router, base) {
  this.router = router;
  this.base = normalizeBase(base); // start with a route object that stands for "nowhere"

  this.current = START;
  this.pending = null;
  this.ready = false;
  this.readyCbs = [];
  this.readyErrorCbs = [];
  this.errorCbs = [];
  this.listeners = [];
};

History.prototype.listen = function listen(cb) {
  this.cb = cb;
};

History.prototype.onReady = function onReady(cb, errorCb) {
  if (this.ready) {
    cb();
  } else {
    this.readyCbs.push(cb);

    if (errorCb) {
      this.readyErrorCbs.push(errorCb);
    }
  }
};

History.prototype.onError = function onError(errorCb) {
  this.errorCbs.push(errorCb);
};

History.prototype.transitionTo = function transitionTo(location, onComplete, onAbort) {
  var this$1 = this;
  var route; // catch redirect option https://github.com/vuejs/vue-router/issues/3201

  try {
    route = this.router.match(location, this.current);
  } catch (e) {
    this.errorCbs.forEach(function (cb) {
      cb(e);
    }); // Exception should still be thrown

    throw e;
  }

  var prev = this.current;
  this.confirmTransition(route, function () {
    this$1.updateRoute(route);
    onComplete && onComplete(route);
    this$1.ensureURL();
    this$1.router.afterHooks.forEach(function (hook) {
      hook && hook(route, prev);
    }); // fire ready cbs once

    if (!this$1.ready) {
      this$1.ready = true;
      this$1.readyCbs.forEach(function (cb) {
        cb(route);
      });
    }
  }, function (err) {
    if (onAbort) {
      onAbort(err);
    }

    if (err && !this$1.ready) {
      // Initial redirection should not mark the history as ready yet
      // because it's triggered by the redirection instead
      // https://github.com/vuejs/vue-router/issues/3225
      // https://github.com/vuejs/vue-router/issues/3331
      if (!isNavigationFailure(err, NavigationFailureType.redirected) || prev !== START) {
        this$1.ready = true;
        this$1.readyErrorCbs.forEach(function (cb) {
          cb(err);
        });
      }
    }
  });
};

History.prototype.confirmTransition = function confirmTransition(route, onComplete, onAbort) {
  var this$1 = this;
  var current = this.current;
  this.pending = route;

  var abort = function (err) {
    // changed after adding errors with
    // https://github.com/vuejs/vue-router/pull/3047 before that change,
    // redirect and aborted navigation would produce an err == null
    if (!isNavigationFailure(err) && isError(err)) {
      if (this$1.errorCbs.length) {
        this$1.errorCbs.forEach(function (cb) {
          cb(err);
        });
      } else {
        warn(false, 'uncaught error during route navigation:');
        console.error(err);
      }
    }

    onAbort && onAbort(err);
  };

  var lastRouteIndex = route.matched.length - 1;
  var lastCurrentIndex = current.matched.length - 1;

  if (isSameRoute(route, current) && // in the case the route map has been dynamically appended to
  lastRouteIndex === lastCurrentIndex && route.matched[lastRouteIndex] === current.matched[lastCurrentIndex]) {
    this.ensureURL();
    return abort(createNavigationDuplicatedError(current, route));
  }

  var ref = resolveQueue(this.current.matched, route.matched);
  var updated = ref.updated;
  var deactivated = ref.deactivated;
  var activated = ref.activated;
  var queue = [].concat( // in-component leave guards
  extractLeaveGuards(deactivated), // global before hooks
  this.router.beforeHooks, // in-component update hooks
  extractUpdateHooks(updated), // in-config enter guards
  activated.map(function (m) {
    return m.beforeEnter;
  }), // async components
  resolveAsyncComponents(activated));

  var iterator = function (hook, next) {
    if (this$1.pending !== route) {
      return abort(createNavigationCancelledError(current, route));
    }

    try {
      hook(route, current, function (to) {
        if (to === false) {
          // next(false) -> abort navigation, ensure current URL
          this$1.ensureURL(true);
          abort(createNavigationAbortedError(current, route));
        } else if (isError(to)) {
          this$1.ensureURL(true);
          abort(to);
        } else if (typeof to === 'string' || typeof to === 'object' && (typeof to.path === 'string' || typeof to.name === 'string')) {
          // next('/') or next({ path: '/' }) -> redirect
          abort(createNavigationRedirectedError(current, route));

          if (typeof to === 'object' && to.replace) {
            this$1.replace(to);
          } else {
            this$1.push(to);
          }
        } else {
          // confirm transition and pass on the value
          next(to);
        }
      });
    } catch (e) {
      abort(e);
    }
  };

  runQueue(queue, iterator, function () {
    // wait until async components are resolved before
    // extracting in-component enter guards
    var enterGuards = extractEnterGuards(activated);
    var queue = enterGuards.concat(this$1.router.resolveHooks);
    runQueue(queue, iterator, function () {
      if (this$1.pending !== route) {
        return abort(createNavigationCancelledError(current, route));
      }

      this$1.pending = null;
      onComplete(route);

      if (this$1.router.app) {
        this$1.router.app.$nextTick(function () {
          handleRouteEntered(route);
        });
      }
    });
  });
};

History.prototype.updateRoute = function updateRoute(route) {
  this.current = route;
  this.cb && this.cb(route);
};

History.prototype.setupListeners = function setupListeners() {// Default implementation is empty
};

History.prototype.teardown = function teardown() {
  // clean up event listeners
  // https://github.com/vuejs/vue-router/issues/2341
  this.listeners.forEach(function (cleanupListener) {
    cleanupListener();
  });
  this.listeners = []; // reset current history route
  // https://github.com/vuejs/vue-router/issues/3294

  this.current = START;
  this.pending = null;
};

function normalizeBase(base) {
  if (!base) {
    if (inBrowser) {
      // respect <base> tag
      var baseEl = document.querySelector('base');
      base = baseEl && baseEl.getAttribute('href') || '/'; // strip full URL origin

      base = base.replace(/^https?:\/\/[^\/]+/, '');
    } else {
      base = '/';
    }
  } // make sure there's the starting slash


  if (base.charAt(0) !== '/') {
    base = '/' + base;
  } // remove trailing slash


  return base.replace(/\/$/, '');
}

function resolveQueue(current, next) {
  var i;
  var max = Math.max(current.length, next.length);

  for (i = 0; i < max; i++) {
    if (current[i] !== next[i]) {
      break;
    }
  }

  return {
    updated: next.slice(0, i),
    activated: next.slice(i),
    deactivated: current.slice(i)
  };
}

function extractGuards(records, name, bind, reverse) {
  var guards = flatMapComponents(records, function (def, instance, match, key) {
    var guard = extractGuard(def, name);

    if (guard) {
      return Array.isArray(guard) ? guard.map(function (guard) {
        return bind(guard, instance, match, key);
      }) : bind(guard, instance, match, key);
    }
  });
  return flatten(reverse ? guards.reverse() : guards);
}

function extractGuard(def, key) {
  if (typeof def !== 'function') {
    // extend now so that global mixins are applied.
    def = _Vue.extend(def);
  }

  return def.options[key];
}

function extractLeaveGuards(deactivated) {
  return extractGuards(deactivated, 'beforeRouteLeave', bindGuard, true);
}

function extractUpdateHooks(updated) {
  return extractGuards(updated, 'beforeRouteUpdate', bindGuard);
}

function bindGuard(guard, instance) {
  if (instance) {
    return function boundRouteGuard() {
      return guard.apply(instance, arguments);
    };
  }
}

function extractEnterGuards(activated) {
  return extractGuards(activated, 'beforeRouteEnter', function (guard, _, match, key) {
    return bindEnterGuard(guard, match, key);
  });
}

function bindEnterGuard(guard, match, key) {
  return function routeEnterGuard(to, from, next) {
    return guard(to, from, function (cb) {
      if (typeof cb === 'function') {
        if (!match.enteredCbs[key]) {
          match.enteredCbs[key] = [];
        }

        match.enteredCbs[key].push(cb);
      }

      next(cb);
    });
  };
}
/*  */


var HTML5History = /*@__PURE__*/function (History) {
  function HTML5History(router, base) {
    History.call(this, router, base);
    this._startLocation = getLocation(this.base);
  }

  if (History) HTML5History.__proto__ = History;
  HTML5History.prototype = Object.create(History && History.prototype);
  HTML5History.prototype.constructor = HTML5History;

  HTML5History.prototype.setupListeners = function setupListeners() {
    var this$1 = this;

    if (this.listeners.length > 0) {
      return;
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1.current; // Avoiding first `popstate` event dispatched in some browsers but first
      // history route not updated since async guard at the same time.

      var location = getLocation(this$1.base);

      if (this$1.current === START && location === this$1._startLocation) {
        return;
      }

      this$1.transitionTo(location, function (route) {
        if (supportsScroll) {
          handleScroll(router, route, current, true);
        }
      });
    };

    window.addEventListener('popstate', handleRoutingEvent);
    this.listeners.push(function () {
      window.removeEventListener('popstate', handleRoutingEvent);
    });
  };

  HTML5History.prototype.go = function go(n) {
    window.history.go(n);
  };

  HTML5History.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceState(cleanPath(this$1.base + route.fullPath));
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HTML5History.prototype.ensureURL = function ensureURL(push) {
    if (getLocation(this.base) !== this.current.fullPath) {
      var current = cleanPath(this.base + this.current.fullPath);
      push ? pushState(current) : replaceState(current);
    }
  };

  HTML5History.prototype.getCurrentLocation = function getCurrentLocation() {
    return getLocation(this.base);
  };

  return HTML5History;
}(History);

function getLocation(base) {
  var path = window.location.pathname;

  if (base && path.toLowerCase().indexOf(base.toLowerCase()) === 0) {
    path = path.slice(base.length);
  }

  return (path || '/') + window.location.search + window.location.hash;
}
/*  */


var HashHistory = /*@__PURE__*/function (History) {
  function HashHistory(router, base, fallback) {
    History.call(this, router, base); // check history fallback deeplinking

    if (fallback && checkFallback(this.base)) {
      return;
    }

    ensureSlash();
  }

  if (History) HashHistory.__proto__ = History;
  HashHistory.prototype = Object.create(History && History.prototype);
  HashHistory.prototype.constructor = HashHistory; // this is delayed until the app mounts
  // to avoid the hashchange listener being fired too early

  HashHistory.prototype.setupListeners = function setupListeners() {
    var this$1 = this;

    if (this.listeners.length > 0) {
      return;
    }

    var router = this.router;
    var expectScroll = router.options.scrollBehavior;
    var supportsScroll = supportsPushState && expectScroll;

    if (supportsScroll) {
      this.listeners.push(setupScroll());
    }

    var handleRoutingEvent = function () {
      var current = this$1.current;

      if (!ensureSlash()) {
        return;
      }

      this$1.transitionTo(getHash(), function (route) {
        if (supportsScroll) {
          handleScroll(this$1.router, route, current, true);
        }

        if (!supportsPushState) {
          replaceHash(route.fullPath);
        }
      });
    };

    var eventType = supportsPushState ? 'popstate' : 'hashchange';
    window.addEventListener(eventType, handleRoutingEvent);
    this.listeners.push(function () {
      window.removeEventListener(eventType, handleRoutingEvent);
    });
  };

  HashHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      pushHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    var ref = this;
    var fromRoute = ref.current;
    this.transitionTo(location, function (route) {
      replaceHash(route.fullPath);
      handleScroll(this$1.router, route, fromRoute, false);
      onComplete && onComplete(route);
    }, onAbort);
  };

  HashHistory.prototype.go = function go(n) {
    window.history.go(n);
  };

  HashHistory.prototype.ensureURL = function ensureURL(push) {
    var current = this.current.fullPath;

    if (getHash() !== current) {
      push ? pushHash(current) : replaceHash(current);
    }
  };

  HashHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    return getHash();
  };

  return HashHistory;
}(History);

function checkFallback(base) {
  var location = getLocation(base);

  if (!/^\/#/.test(location)) {
    window.location.replace(cleanPath(base + '/#' + location));
    return true;
  }
}

function ensureSlash() {
  var path = getHash();

  if (path.charAt(0) === '/') {
    return true;
  }

  replaceHash('/' + path);
  return false;
}

function getHash() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var index = href.indexOf('#'); // empty path

  if (index < 0) {
    return '';
  }

  href = href.slice(index + 1);
  return href;
}

function getUrl(path) {
  var href = window.location.href;
  var i = href.indexOf('#');
  var base = i >= 0 ? href.slice(0, i) : href;
  return base + "#" + path;
}

function pushHash(path) {
  if (supportsPushState) {
    pushState(getUrl(path));
  } else {
    window.location.hash = path;
  }
}

function replaceHash(path) {
  if (supportsPushState) {
    replaceState(getUrl(path));
  } else {
    window.location.replace(getUrl(path));
  }
}
/*  */


var AbstractHistory = /*@__PURE__*/function (History) {
  function AbstractHistory(router, base) {
    History.call(this, router, base);
    this.stack = [];
    this.index = -1;
  }

  if (History) AbstractHistory.__proto__ = History;
  AbstractHistory.prototype = Object.create(History && History.prototype);
  AbstractHistory.prototype.constructor = AbstractHistory;

  AbstractHistory.prototype.push = function push(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index + 1).concat(route);
      this$1.index++;
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.replace = function replace(location, onComplete, onAbort) {
    var this$1 = this;
    this.transitionTo(location, function (route) {
      this$1.stack = this$1.stack.slice(0, this$1.index).concat(route);
      onComplete && onComplete(route);
    }, onAbort);
  };

  AbstractHistory.prototype.go = function go(n) {
    var this$1 = this;
    var targetIndex = this.index + n;

    if (targetIndex < 0 || targetIndex >= this.stack.length) {
      return;
    }

    var route = this.stack[targetIndex];
    this.confirmTransition(route, function () {
      var prev = this$1.current;
      this$1.index = targetIndex;
      this$1.updateRoute(route);
      this$1.router.afterHooks.forEach(function (hook) {
        hook && hook(route, prev);
      });
    }, function (err) {
      if (isNavigationFailure(err, NavigationFailureType.duplicated)) {
        this$1.index = targetIndex;
      }
    });
  };

  AbstractHistory.prototype.getCurrentLocation = function getCurrentLocation() {
    var current = this.stack[this.stack.length - 1];
    return current ? current.fullPath : '/';
  };

  AbstractHistory.prototype.ensureURL = function ensureURL() {// noop
  };

  return AbstractHistory;
}(History);
/*  */


var VueRouter = function VueRouter(options) {
  if (options === void 0) options = {};
  this.app = null;
  this.apps = [];
  this.options = options;
  this.beforeHooks = [];
  this.resolveHooks = [];
  this.afterHooks = [];
  this.matcher = createMatcher(options.routes || [], this);
  var mode = options.mode || 'hash';
  this.fallback = mode === 'history' && !supportsPushState && options.fallback !== false;

  if (this.fallback) {
    mode = 'hash';
  }

  if (!inBrowser) {
    mode = 'abstract';
  }

  this.mode = mode;

  switch (mode) {
    case 'history':
      this.history = new HTML5History(this, options.base);
      break;

    case 'hash':
      this.history = new HashHistory(this, options.base, this.fallback);
      break;

    case 'abstract':
      this.history = new AbstractHistory(this, options.base);
      break;

    default:
      if (true) {
        assert(false, "invalid mode: " + mode);
      }

  }
};

var prototypeAccessors = {
  currentRoute: {
    configurable: true
  }
};

VueRouter.prototype.match = function match(raw, current, redirectedFrom) {
  return this.matcher.match(raw, current, redirectedFrom);
};

prototypeAccessors.currentRoute.get = function () {
  return this.history && this.history.current;
};

VueRouter.prototype.init = function init(app
/* Vue component instance */
) {
  var this$1 = this;
   true && assert(install.installed, "not installed. Make sure to call `Vue.use(VueRouter)` " + "before creating root instance.");
  this.apps.push(app); // set up app destroyed handler
  // https://github.com/vuejs/vue-router/issues/2639

  app.$once('hook:destroyed', function () {
    // clean out app from this.apps array once destroyed
    var index = this$1.apps.indexOf(app);

    if (index > -1) {
      this$1.apps.splice(index, 1);
    } // ensure we still have a main app or null if no apps
    // we do not release the router so it can be reused


    if (this$1.app === app) {
      this$1.app = this$1.apps[0] || null;
    }

    if (!this$1.app) {
      this$1.history.teardown();
    }
  }); // main app previously initialized
  // return as we don't need to set up new history listener

  if (this.app) {
    return;
  }

  this.app = app;
  var history = this.history;

  if (history instanceof HTML5History || history instanceof HashHistory) {
    var handleInitialScroll = function (routeOrError) {
      var from = history.current;
      var expectScroll = this$1.options.scrollBehavior;
      var supportsScroll = supportsPushState && expectScroll;

      if (supportsScroll && 'fullPath' in routeOrError) {
        handleScroll(this$1, routeOrError, from, false);
      }
    };

    var setupListeners = function (routeOrError) {
      history.setupListeners();
      handleInitialScroll(routeOrError);
    };

    history.transitionTo(history.getCurrentLocation(), setupListeners, setupListeners);
  }

  history.listen(function (route) {
    this$1.apps.forEach(function (app) {
      app._route = route;
    });
  });
};

VueRouter.prototype.beforeEach = function beforeEach(fn) {
  return registerHook(this.beforeHooks, fn);
};

VueRouter.prototype.beforeResolve = function beforeResolve(fn) {
  return registerHook(this.resolveHooks, fn);
};

VueRouter.prototype.afterEach = function afterEach(fn) {
  return registerHook(this.afterHooks, fn);
};

VueRouter.prototype.onReady = function onReady(cb, errorCb) {
  this.history.onReady(cb, errorCb);
};

VueRouter.prototype.onError = function onError(errorCb) {
  this.history.onError(errorCb);
};

VueRouter.prototype.push = function push(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.push(location, resolve, reject);
    });
  } else {
    this.history.push(location, onComplete, onAbort);
  }
};

VueRouter.prototype.replace = function replace(location, onComplete, onAbort) {
  var this$1 = this; // $flow-disable-line

  if (!onComplete && !onAbort && typeof Promise !== 'undefined') {
    return new Promise(function (resolve, reject) {
      this$1.history.replace(location, resolve, reject);
    });
  } else {
    this.history.replace(location, onComplete, onAbort);
  }
};

VueRouter.prototype.go = function go(n) {
  this.history.go(n);
};

VueRouter.prototype.back = function back() {
  this.go(-1);
};

VueRouter.prototype.forward = function forward() {
  this.go(1);
};

VueRouter.prototype.getMatchedComponents = function getMatchedComponents(to) {
  var route = to ? to.matched ? to : this.resolve(to).route : this.currentRoute;

  if (!route) {
    return [];
  }

  return [].concat.apply([], route.matched.map(function (m) {
    return Object.keys(m.components).map(function (key) {
      return m.components[key];
    });
  }));
};

VueRouter.prototype.resolve = function resolve(to, current, append) {
  current = current || this.history.current;
  var location = normalizeLocation(to, current, append, this);
  var route = this.match(location, current);
  var fullPath = route.redirectedFrom || route.fullPath;
  var base = this.history.base;
  var href = createHref(base, fullPath, this.mode);
  return {
    location: location,
    route: route,
    href: href,
    // for backwards compat
    normalizedTo: location,
    resolved: route
  };
};

VueRouter.prototype.addRoutes = function addRoutes(routes) {
  this.matcher.addRoutes(routes);

  if (this.history.current !== START) {
    this.history.transitionTo(this.history.getCurrentLocation());
  }
};

Object.defineProperties(VueRouter.prototype, prototypeAccessors);

function registerHook(list, fn) {
  list.push(fn);
  return function () {
    var i = list.indexOf(fn);

    if (i > -1) {
      list.splice(i, 1);
    }
  };
}

function createHref(base, fullPath, mode) {
  var path = mode === 'hash' ? '#' + fullPath : fullPath;
  return base ? cleanPath(base + '/' + path) : path;
}

VueRouter.install = install;
VueRouter.version = '3.4.9';
VueRouter.isNavigationFailure = isNavigationFailure;
VueRouter.NavigationFailureType = NavigationFailureType;

if (inBrowser && window.Vue) {
  window.Vue.use(VueRouter);
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (VueRouter);

/***/ }),

/***/ "./node_modules/vue/dist/vue.runtime.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/vue/dist/vue.runtime.esm.js ***!
  \**************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_exports__, __webpack_require__.r, __webpack_require__.g, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/*!
 * Vue.js v2.6.12
 * (c) 2014-2020 Evan You
 * Released under the MIT License.
 */

/*  */
var emptyObject = Object.freeze({}); // These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.

function isUndef(v) {
  return v === undefined || v === null;
}

function isDef(v) {
  return v !== undefined && v !== null;
}

function isTrue(v) {
  return v === true;
}

function isFalse(v) {
  return v === false;
}
/**
 * Check if value is primitive.
 */


function isPrimitive(value) {
  return typeof value === 'string' || typeof value === 'number' || // $flow-disable-line
  typeof value === 'symbol' || typeof value === 'boolean';
}
/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */


function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}
/**
 * Get the raw type string of a value, e.g., [object Object].
 */


var _toString = Object.prototype.toString;

function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */


function isPlainObject(obj) {
  return _toString.call(obj) === '[object Object]';
}

function isRegExp(v) {
  return _toString.call(v) === '[object RegExp]';
}
/**
 * Check if val is a valid array index.
 */


function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}

function isPromise(val) {
  return isDef(val) && typeof val.then === 'function' && typeof val.catch === 'function';
}
/**
 * Convert a value to a string that is actually rendered.
 */


function toString(val) {
  return val == null ? '' : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */


function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */


function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(',');

  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }

  return expectsLowerCase ? function (val) {
    return map[val.toLowerCase()];
  } : function (val) {
    return map[val];
  };
}
/**
 * Check if a tag is a built-in tag.
 */


var isBuiltInTag = makeMap('slot,component', true);
/**
 * Check if an attribute is a reserved attribute.
 */

var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');
/**
 * Remove an item from an array.
 */

function remove(arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
}
/**
 * Check whether an object has the property.
 */


var hasOwnProperty = Object.prototype.hasOwnProperty;

function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
/**
 * Create a cached version of a pure function.
 */


function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
/**
 * Camelize a hyphen-delimited string.
 */


var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) {
    return c ? c.toUpperCase() : '';
  });
});
/**
 * Capitalize a string.
 */

var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
});
/**
 * Hyphenate a camelCase string.
 */

var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase();
});
/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */

function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }

  boundFn._length = fn.length;
  return boundFn;
}

function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}

var bind = Function.prototype.bind ? nativeBind : polyfillBind;
/**
 * Convert an Array-like object to a real Array.
 */

function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);

  while (i--) {
    ret[i] = list[i + start];
  }

  return ret;
}
/**
 * Mix properties into target object.
 */


function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }

  return to;
}
/**
 * Merge an Array of Objects into a single Object.
 */


function toObject(arr) {
  var res = {};

  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }

  return res;
}
/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */


function noop(a, b, c) {}
/**
 * Always return false.
 */


var no = function (a, b, c) {
  return false;
};
/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */


var identity = function (_) {
  return _;
};
/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */


function looseEqual(a, b) {
  if (a === b) {
    return true;
  }

  var isObjectA = isObject(a);
  var isObjectB = isObject(b);

  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);

      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        /* istanbul ignore next */
        return false;
      }
    } catch (e) {
      /* istanbul ignore next */
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */


function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }

  return -1;
}
/**
 * Ensure a function is called only once.
 */


function once(fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}

var SSR_ATTR = 'data-server-rendered';
var ASSET_TYPES = ['component', 'directive', 'filter'];
var LIFECYCLE_HOOKS = ['beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeUpdate', 'updated', 'beforeDestroy', 'destroyed', 'activated', 'deactivated', 'errorCaptured', 'serverPrefetch'];
/*  */

var config = {
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
};
/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */

var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
/**
 * Check if a string starts with $ or _
 */

function isReserved(str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F;
}
/**
 * Define a property.
 */


function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
/**
 * Parse simple path.
 */


var bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");

function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }

  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }

      obj = obj[segments[i]];
    }

    return obj;
  };
}
/*  */
// can we use __proto__?


var hasProto = ('__proto__' in {}); // Browser environment sniffing

var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = UA && UA.indexOf('android') > 0 || weexPlatform === 'android';
var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === 'ios';
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/); // Firefox has a "watch" function on Object.prototype...

var nativeWatch = {}.watch;
var supportsPassive = false;

if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', {
      get: function get() {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    }); // https://github.com/facebook/flow/issues/285

    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
} // this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV


var _isServer;

var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof __webpack_require__.g !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = __webpack_require__.g['process'] && __webpack_require__.g['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }

  return _isServer;
}; // detect devtools


var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
/* istanbul ignore next */

function isNative(Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString());
}

var hasSymbol = typeof Symbol !== 'undefined' && isNative(Symbol) && typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */
// $flow-disable-line


if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/function () {
    function Set() {
      this.set = Object.create(null);
    }

    Set.prototype.has = function has(key) {
      return this.set[key] === true;
    };

    Set.prototype.add = function add(key) {
      this.set[key] = true;
    };

    Set.prototype.clear = function clear() {
      this.set = Object.create(null);
    };

    return Set;
  }();
}
/*  */


var warn = noop;
var tip = noop;
var generateComponentTrace = noop; // work around flow check

var formatComponentName = noop;

if (true) {
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;

  var classify = function (str) {
    return str.replace(classifyRE, function (c) {
      return c.toUpperCase();
    }).replace(/[-_]/g, '');
  };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && !config.silent) {
      console.error("[Vue warn]: " + msg + trace);
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && !config.silent) {
      console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ''));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>';
    }

    var options = typeof vm === 'function' && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;

    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : '');
  };

  var repeat = function (str, n) {
    var res = '';

    while (n) {
      if (n % 2 === 1) {
        res += str;
      }

      if (n > 1) {
        str += str;
      }

      n >>= 1;
    }

    return res;
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;

      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];

          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue;
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }

        tree.push(vm);
        vm = vm.$parent;
      }

      return '\n\nfound in\n\n' + tree.map(function (vm, i) {
        return "" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm) ? formatComponentName(vm[0]) + "... (" + vm[1] + " recursive calls)" : formatComponentName(vm));
      }).join('\n');
    } else {
      return "\n\n(found in " + formatComponentName(vm) + ")";
    }
  };
}
/*  */


var uid = 0;
/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */

var Dep = function Dep() {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub(sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub(sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend() {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify() {
  // stabilize the subscriber list first
  var subs = this.subs.slice();

  if ( true && !config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) {
      return a.id - b.id;
    });
  }

  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
}; // The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.


Dep.target = null;
var targetStack = [];

function pushTarget(target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
/*  */


var VNode = function VNode(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = {
  child: {
    configurable: true
  }
}; // DEPRECATED: alias for componentInstance for backwards compat.

/* istanbul ignore next */

prototypeAccessors.child.get = function () {
  return this.componentInstance;
};

Object.defineProperties(VNode.prototype, prototypeAccessors);

var createEmptyVNode = function (text) {
  if (text === void 0) text = '';
  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node;
};

function createTextVNode(val) {
  return new VNode(undefined, undefined, undefined, String(val));
} // optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.


function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, // #7975
  // clone children array to avoid mutating original in case of cloning
  // a child.
  vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */


var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);
var methodsToPatch = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];
/**
 * Intercept mutating methods and emit events
 */

methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator() {
    var args = [],
        len = arguments.length;

    while (len--) args[len] = arguments[len];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;

    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break;

      case 'splice':
        inserted = args.slice(2);
        break;
    }

    if (inserted) {
      ob.observeArray(inserted);
    } // notify change


    ob.dep.notify();
    return result;
  });
});
/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */

var shouldObserve = true;

function toggleObserving(value) {
  shouldObserve = value;
}
/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */


var Observer = function Observer(value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);

  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }

    this.observeArray(value);
  } else {
    this.walk(value);
  }
};
/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */


Observer.prototype.walk = function walk(obj) {
  var keys = Object.keys(obj);

  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};
/**
 * Observe a list of Array items.
 */


Observer.prototype.observeArray = function observeArray(items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
}; // helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */


function protoAugment(target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}
/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */

/* istanbul ignore next */


function copyAugment(target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}
/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */


function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }

  var ob;

  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }

  if (asRootData && ob) {
    ob.vmCount++;
  }

  return ob;
}
/**
 * Define a reactive property on an Object.
 */


function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);

  if (property && property.configurable === false) {
    return;
  } // cater for pre-defined getter/setters


  var getter = property && property.get;
  var setter = property && property.set;

  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;

      if (Dep.target) {
        dep.depend();

        if (childOb) {
          childOb.dep.depend();

          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }

      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */

      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      /* eslint-enable no-self-compare */


      if ( true && customSetter) {
        customSetter();
      } // #7981: for accessor properties without setter


      if (getter && !setter) {
        return;
      }

      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }

      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */


function set(target, key, val) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val;
  }

  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid adding reactive properties to a Vue instance or its root $data ' + 'at runtime - declare it upfront in the data option.');
    return val;
  }

  if (!ob) {
    target[key] = val;
    return val;
  }

  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
/**
 * Delete a property and trigger change if necessary.
 */


function del(target, key) {
  if ( true && (isUndef(target) || isPrimitive(target))) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target);
  }

  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return;
  }

  var ob = target.__ob__;

  if (target._isVue || ob && ob.vmCount) {
     true && warn('Avoid deleting properties on a Vue instance or its root $data ' + '- just set it to null.');
    return;
  }

  if (!hasOwn(target, key)) {
    return;
  }

  delete target[key];

  if (!ob) {
    return;
  }

  ob.dep.notify();
}
/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */


function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();

    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */


var strats = config.optionMergeStrategies;
/**
 * Options with restrictions
 */

if (true) {
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn("option \"" + key + "\" can only be used during instance " + 'creation with the `new` keyword.');
    }

    return defaultStrat(parent, child);
  };
}
/**
 * Helper that recursively merges two data objects together.
 */


function mergeData(to, from) {
  if (!from) {
    return to;
  }

  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i]; // in case the object is already observed...

    if (key === '__ob__') {
      continue;
    }

    toVal = to[key];
    fromVal = from[key];

    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }

  return to;
}
/**
 * Data
 */


function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal;
    }

    if (!parentVal) {
      return childVal;
    } // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.


    return function mergedDataFn() {
      return mergeData(typeof childVal === 'function' ? childVal.call(this, this) : childVal, typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      // instance merge
      var instanceData = typeof childVal === 'function' ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm, vm) : parentVal;

      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}

strats.data = function (parentVal, childVal, vm) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
       true && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
      return parentVal;
    }

    return mergeDataOrFn(parentVal, childVal);
  }

  return mergeDataOrFn(parentVal, childVal, vm);
};
/**
 * Hooks and props are merged as arrays.
 */


function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}

function dedupeHooks(hooks) {
  var res = [];

  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }

  return res;
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});
/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */

function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);

  if (childVal) {
     true && assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});
/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */

strats.watch = function (parentVal, childVal, vm, key) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) {
    parentVal = undefined;
  }

  if (childVal === nativeWatch) {
    childVal = undefined;
  }
  /* istanbul ignore if */


  if (!childVal) {
    return Object.create(parentVal || null);
  }

  if (true) {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = {};
  extend(ret, parentVal);

  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];

    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }

    ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
  }

  return ret;
};
/**
 * Other object hashes.
 */


strats.props = strats.methods = strats.inject = strats.computed = function (parentVal, childVal, vm, key) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }

  if (!parentVal) {
    return childVal;
  }

  var ret = Object.create(null);
  extend(ret, parentVal);

  if (childVal) {
    extend(ret, childVal);
  }

  return ret;
};

strats.provide = mergeDataOrFn;
/**
 * Default strategy.
 */

var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined ? parentVal : childVal;
};
/**
 * Validate component names
 */


function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names ' + 'should conform to valid custom element name in html5 specification.');
  }

  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + name);
  }
}
/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */


function normalizeProps(options, vm) {
  var props = options.props;

  if (!props) {
    return;
  }

  var res = {};
  var i, val, name;

  if (Array.isArray(props)) {
    i = props.length;

    while (i--) {
      val = props[i];

      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = {
          type: null
        };
      } else if (true) {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : {
        type: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"props\": expected an Array or an Object, " + "but got " + toRawType(props) + ".", vm);
  }

  options.props = res;
}
/**
 * Normalize all injections into Object-based format
 */


function normalizeInject(options, vm) {
  var inject = options.inject;

  if (!inject) {
    return;
  }

  var normalized = options.inject = {};

  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = {
        from: inject[i]
      };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({
        from: key
      }, val) : {
        from: val
      };
    }
  } else if (true) {
    warn("Invalid value for option \"inject\": expected an Array or an Object, " + "but got " + toRawType(inject) + ".", vm);
  }
}
/**
 * Normalize raw function directives into object format.
 */


function normalizeDirectives(options) {
  var dirs = options.directives;

  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];

      if (typeof def$$1 === 'function') {
        dirs[key] = {
          bind: def$$1,
          update: def$$1
        };
      }
    }
  }
}

function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn("Invalid value for option \"" + name + "\": expected an Object, " + "but got " + toRawType(value) + ".", vm);
  }
}
/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */


function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child); // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.

  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }

    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;

  for (key in parent) {
    mergeField(key);
  }

  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }

  function mergeField(key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }

  return options;
}
/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */


function resolveAsset(options, type, id, warnMissing) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return;
  }

  var assets = options[type]; // check local registration variations first

  if (hasOwn(assets, id)) {
    return assets[id];
  }

  var camelizedId = camelize(id);

  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }

  var PascalCaseId = capitalize(camelizedId);

  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  } // fallback to prototype chain


  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];

  if ( true && warnMissing && !res) {
    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
  }

  return res;
}
/*  */


function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key]; // boolean casting

  var booleanIndex = getTypeIndex(Boolean, prop.type);

  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);

      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  } // check default value


  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key); // since the default value is a fresh copy,
    // make sure to observe it.

    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }

  if (true) {
    assertProp(prop, key, value, vm, absent);
  }

  return value;
}
/**
 * Get the default value of a prop.
 */


function getPropDefaultValue(vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined;
  }

  var def = prop.default; // warn against non-factory defaults for Object & Array

  if ( true && isObject(def)) {
    warn('Invalid default value for prop "' + key + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
  } // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger


  if (vm && vm.$options.propsData && vm.$options.propsData[key] === undefined && vm._props[key] !== undefined) {
    return vm._props[key];
  } // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context


  return typeof def === 'function' && getType(prop.type) !== 'Function' ? def.call(vm) : def;
}
/**
 * Assert whether a prop is valid.
 */


function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }

  if (value == null && !prop.required) {
    return;
  }

  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];

  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }

    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }

  var validator = prop.validator;

  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType(value, type) {
  var valid;
  var expectedType = getType(type);

  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects

    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }

  return {
    valid: valid,
    expectedType: expectedType
  };
}
/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */


function getType(fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : '';
}

function isSameType(a, b) {
  return getType(a) === getType(b);
}

function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }

  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }

  return -1;
}

function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." + " Expected " + expectedTypes.map(capitalize).join(', ');
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType); // check if we need to specify expected value

  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }

  message += ", got " + receivedType + " "; // check if we need to specify received value

  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }

  return message;
}

function styleValue(value, type) {
  if (type === 'String') {
    return "\"" + value + "\"";
  } else if (type === 'Number') {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}

function isExplicable(value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) {
    return value.toLowerCase() === elem;
  });
}

function isBoolean() {
  var args = [],
      len = arguments.length;

  while (len--) args[len] = arguments[len];

  return args.some(function (elem) {
    return elem.toLowerCase() === 'boolean';
  });
}
/*  */


function handleError(err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();

  try {
    if (vm) {
      var cur = vm;

      while (cur = cur.$parent) {
        var hooks = cur.$options.errorCaptured;

        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;

              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }

    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;

  try {
    res = args ? handler.apply(context, args) : handler.call(context);

    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) {
        return handleError(e, vm, info + " (Promise/async)");
      }); // issue #9511
      // avoid catch triggering multiple times when nested calls

      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }

  return res;
}

function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }

  logError(err, vm, info);
}

function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ": \"" + err.toString() + "\"", vm);
  }
  /* istanbul ignore else */


  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err;
  }
}
/*  */


var isUsingMicroTask = false;
var callbacks = [];
var pending = false;

function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;

  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
} // Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).


var timerFunc; // The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:

/* istanbul ignore next, $flow-disable-line */

if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();

  timerFunc = function () {
    p.then(flushCallbacks); // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.

    if (isIOS) {
      setTimeout(noop);
    }
  };

  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (isNative(MutationObserver) || // PhantomJS and iOS 7.x
MutationObserver.toString() === '[object MutationObserverConstructor]')) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });

  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };

  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Technically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick(cb, ctx) {
  var _resolve;

  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });

  if (!pending) {
    pending = true;
    timerFunc();
  } // $flow-disable-line


  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    });
  }
}
/*  */

/* not type checking this file because flow doesn't play well with Proxy */


var initProxy;

if (true) {
  var allowedGlobals = makeMap('Infinity,undefined,NaN,isFinite,isNaN,' + 'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' + 'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' + 'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn("Property or method \"" + key + "\" is not defined on the instance but " + 'referenced during render. Make sure that this property is reactive, ' + 'either in the data option, or for class-based components, by ' + 'initializing the property. ' + 'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target);
  };

  var warnReservedPrefix = function (target, key) {
    warn("Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " + 'properties starting with "$" or "_" are not proxied in the Vue instance to ' + 'prevent conflicts with Vue internals. ' + 'See: https://vuejs.org/v2/api/#data', target);
  };

  var hasProxy = typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set(target, key, value) {
        if (isBuiltInModifier(key)) {
          warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
          return false;
        } else {
          target[key] = value;
          return true;
        }
      }
    });
  }

  var hasHandler = {
    has: function has(target, key) {
      var has = (key in target);
      var isAllowed = allowedGlobals(key) || typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data);

      if (!has && !isAllowed) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return has || !isAllowed;
    }
  };
  var getHandler = {
    get: function get(target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) {
          warnReservedPrefix(target, key);
        } else {
          warnNonPresent(target, key);
        }
      }

      return target[key];
    }
  };

  initProxy = function initProxy(vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}
/*  */


var seenObjects = new _Set();
/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */

function traverse(val) {
  _traverse(val, seenObjects);

  seenObjects.clear();
}

function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);

  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }

  if (val.__ob__) {
    var depId = val.__ob__.dep.id;

    if (seen.has(depId)) {
      return;
    }

    seen.add(depId);
  }

  if (isA) {
    i = val.length;

    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;

    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}

var mark;
var measure;

if (true) {
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */

  if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
    mark = function (tag) {
      return perf.mark(tag);
    };

    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag); // perf.clearMeasures(name)
    };
  }
}
/*  */


var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first

  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  };
});

function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns = invoker.fns;

    if (Array.isArray(fns)) {
      var cloned = fns.slice();

      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler");
    }
  }

  invoker.fns = fns;
  return invoker;
}

function updateListeners(on, oldOn, add, remove$$1, createOnceHandler, vm) {
  var name, def$$1, cur, old, event;

  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);

    if (isUndef(cur)) {
       true && warn("Invalid handler for event \"" + event.name + "\": got " + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }

      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }

      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }

  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}
/*  */


function mergeVNodeHook(def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }

  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook() {
    hook.apply(this, arguments); // important: remove merged hook to ensure it's called only once
    // and prevent memory leak

    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}
/*  */


function extractPropsFromVNodeData(data, Ctor, tag) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;

  if (isUndef(propOptions)) {
    return;
  }

  var res = {};
  var attrs = data.attrs;
  var props = data.props;

  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);

      if (true) {
        var keyInLowerCase = key.toLowerCase();

        if (key !== keyInLowerCase && attrs && hasOwn(attrs, keyInLowerCase)) {
          tip("Prop \"" + keyInLowerCase + "\" is passed to component " + formatComponentName(tag || Ctor) + ", but the declared prop name is" + " \"" + key + "\". " + "Note that HTML attributes are case-insensitive and camelCased " + "props need to use their kebab-case equivalents when using in-DOM " + "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\".");
        }
      }

      checkProp(res, props, key, altKey, true) || checkProp(res, attrs, key, altKey, false);
    }
  }

  return res;
}

function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];

      if (!preserve) {
        delete hash[key];
      }

      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];

      if (!preserve) {
        delete hash[altKey];
      }

      return true;
    }
  }

  return false;
}
/*  */
// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:
// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.


function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }

  return children;
} // 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.


function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : undefined;
}

function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}

function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;

  for (i = 0; i < children.length; i++) {
    c = children[i];

    if (isUndef(c) || typeof c === 'boolean') {
      continue;
    }

    lastIndex = res.length - 1;
    last = res[lastIndex]; //  nested

    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || '') + "_" + i); // merge adjacent text nodes

        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }

        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }

        res.push(c);
      }
    }
  }

  return res;
}
/*  */


function initProvide(vm) {
  var provide = vm.$options.provide;

  if (provide) {
    vm._provided = typeof provide === 'function' ? provide.call(vm) : provide;
  }
}

function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);

  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      if (true) {
        defineReactive$$1(vm, key, result[key], function () {
          warn("Avoid mutating an injected value directly since the changes will be " + "overwritten whenever the provided component re-renders. " + "injection being mutated: \"" + key + "\"", vm);
        });
      } else {}
    });
    toggleObserving(true);
  }
}

function resolveInject(inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i]; // #6574 in case the inject object is observed...

      if (key === '__ob__') {
        continue;
      }

      var provideKey = inject[key].from;
      var source = vm;

      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }

        source = source.$parent;
      }

      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function' ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn("Injection \"" + key + "\" not found", vm);
        }
      }
    }

    return result;
  }
}
/*  */

/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */


function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }

  var slots = {};

  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data; // remove slot attribute if the node is resolved as a Vue slot node

    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    } // named slots should only be respected if the vnode was rendered in the
    // same context.


    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);

      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  } // ignore slots that contains only whitespace


  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }

  return slots;
}

function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === ' ';
}
/*  */


function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;

  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots;
  } else {
    res = {};

    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  } // expose normal slots on scopedSlots


  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  } // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error


  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }

  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res;
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res) ? [res] // single vnode
    : normalizeChildren(res);
    return res && (res.length === 0 || res.length === 1 && res[0].isComment // #9658
    ) ? undefined : res;
  }; // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.


  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }

  return normalized;
}

function proxyNormalSlot(slots, key) {
  return function () {
    return slots[key];
  };
}
/*  */

/**
 * Runtime helper for rendering v-for lists.
 */


function renderList(val, render) {
  var ret, i, l, keys, key;

  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);

    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);

    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();

      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);

      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }

  if (!isDef(ret)) {
    ret = [];
  }

  ret._isVList = true;
  return ret;
}
/*  */

/**
 * Runtime helper for rendering <slot>
 */


function renderSlot(name, fallback, props, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;

  if (scopedSlotFn) {
    // scoped slot
    props = props || {};

    if (bindObject) {
      if ( true && !isObject(bindObject)) {
        warn('slot v-bind without argument expects an Object', this);
      }

      props = extend(extend({}, bindObject), props);
    }

    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;

  if (target) {
    return this.$createElement('template', {
      slot: target
    }, nodes);
  } else {
    return nodes;
  }
}
/*  */

/**
 * Runtime helper for resolving filters
 */


function resolveFilter(id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity;
}
/*  */


function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */


function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;

  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
}
/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */


function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
       true && warn('v-bind without argument expects an Object or Array value', this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }

      var hash;

      var loop = function (key) {
        if (key === 'class' || key === 'style' || isReservedAttribute(key)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }

        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);

        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});

            on["update:" + key] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop(key);
    }
  }

  return data;
}
/*  */

/**
 * Runtime helper for rendering static trees.
 */


function renderStatic(index, isInFor) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index]; // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.

  if (tree && !isInFor) {
    return tree;
  } // otherwise, render a fresh tree.


  tree = cached[index] = this.$options.staticRenderFns[index].call(this._renderProxy, null, this // for render fns generated for functional component templates
  );
  markStatic(tree, "__static__" + index, false);
  return tree;
}
/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */


function markOnce(tree, index, key) {
  markStatic(tree, "__once__" + index + (key ? "_" + key : ""), true);
  return tree;
}

function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
/*  */


function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
       true && warn('v-on without argument expects an Object value', this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};

      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }

  return data;
}
/*  */


function resolveScopedSlots(fns, // see flow/vnode
res, // the following are added in 2.6
hasDynamicKeys, contentHashKey) {
  res = res || {
    $stable: !hasDynamicKeys
  };

  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];

    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }

      res[slot.key] = slot.fn;
    }
  }

  if (contentHashKey) {
    res.$key = contentHashKey;
  }

  return res;
}
/*  */


function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];

    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if ( true && key !== '' && key !== null) {
      // null is a special value for explicitly removing a binding
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }

  return baseObj;
} // helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.


function prependModifier(value, symbol) {
  return typeof value === 'string' ? symbol + value : value;
}
/*  */


function installRenderHelpers(target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}
/*  */


function FunctionalRenderContext(data, props, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options; // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check

  var contextVm;

  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent); // $flow-disable-line

    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent; // $flow-disable-line

    parent = parent._original;
  }

  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);

  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }

    return this$1.$slots;
  };

  Object.defineProperty(this, 'scopedSlots', {
    enumerable: true,
    get: function get() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  }); // support for compiled functional template

  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options; // pre-resolve slots for renderSlot()

    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);

      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }

      return vnode;
    };
  } else {
    this._c = function (a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;

  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props, data.attrs);
    }

    if (isDef(data.props)) {
      mergeProps(props, data.props);
    }
  }

  var renderContext = new FunctionalRenderContext(data, props, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);

    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }

    return res;
  }
}

function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;

  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }

  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }

  return clone;
}

function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
/*  */

/*  */

/*  */

/*  */
// inline hooks to be invoked on component VNodes during patch


var componentVNodeHooks = {
  init: function init(vnode, hydrating) {
    if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow

      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },
  prepatch: function prepatch(oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(child, options.propsData, // updated props
    options.listeners, // updated listeners
    vnode, // new parent vnode
    options.children // new children
    );
  },
  insert: function insert(vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }

    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  },
  destroy: function destroy(vnode) {
    var componentInstance = vnode.componentInstance;

    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true
        /* direct */
        );
      }
    }
  }
};
var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }

  var baseCtor = context.$options._base; // plain options object: turn it into a constructor

  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  } // if at this stage it's not a constructor or an async component factory,
  // reject.


  if (typeof Ctor !== 'function') {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }

    return;
  } // async component


  var asyncFactory;

  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);

    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }

  data = data || {}; // resolve constructor options in case global mixins are applied after
  // component constructor creation

  resolveConstructorOptions(Ctor); // transform component v-model data into props & events

  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  } // extract props


  var propsData = extractPropsFromVNodeData(data, Ctor, tag); // functional component

  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  } // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners


  var listeners = data.on; // replace with listeners with .native modifier
  // so it gets processed during parent component patch.

  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot
    // work around flow
    var slot = data.slot;
    data = {};

    if (slot) {
      data.slot = slot;
    }
  } // install component management hooks onto the placeholder node


  installComponentHooks(data); // return a placeholder vnode

  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ''), data, undefined, undefined, undefined, context, {
    Ctor: Ctor,
    propsData: propsData,
    listeners: listeners,
    tag: tag,
    children: children
  }, asyncFactory);
  return vnode;
}

function createComponentInstanceForVnode(vnode, // we know it's MountedComponentVNode but flow doesn't
parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  }; // check inline-template render functions

  var inlineTemplate = vnode.data.inlineTemplate;

  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }

  return new vnode.componentOptions.Ctor(options);
}

function installComponentHooks(data) {
  var hooks = data.hook || (data.hook = {});

  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];

    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1(f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };

  merged._merged = true;
  return merged;
} // transform component v-model info (value and callback) into
// prop and event handler respectively.


function transformModel(options, data) {
  var prop = options.model && options.model.prop || 'value';
  var event = options.model && options.model.event || 'input';
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;

  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
/*  */


var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2; // wrapper function for providing a more flexible interface
// without getting yelled at by flow

function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }

  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }

  return _createElement(context, tag, data, children, normalizationType);
}

function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
     true && warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\n" + 'Always create fresh vnode data objects in each render!', context);
    return createEmptyVNode();
  } // object syntax in v-bind


  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }

  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode();
  } // warn against non-primitive key


  if ( true && isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn('Avoid using non-primitive value as key, ' + 'use string/number value instead.', context);
    }
  } // support single function children as default scoped slot


  if (Array.isArray(children) && typeof children[0] === 'function') {
    data = data || {};
    data.scopedSlots = {
      default: children[0]
    };
    children.length = 0;
  }

  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }

  var vnode, ns;

  if (typeof tag === 'string') {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);

    if (config.isReservedTag(tag)) {
      // platform built-in elements
      if ( true && isDef(data) && isDef(data.nativeOn)) {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }

      vnode = new VNode(config.parsePlatformTagName(tag), data, children, undefined, undefined, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(tag, data, children, undefined, undefined, context);
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }

  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }

    if (isDef(data)) {
      registerDeepBindings(data);
    }

    return vnode;
  } else {
    return createEmptyVNode();
  }
}

function applyNS(vnode, ns, force) {
  vnode.ns = ns;

  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }

  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];

      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== 'svg')) {
        applyNS(child, ns, force);
      }
    }
  }
} // ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes


function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }

  if (isObject(data.class)) {
    traverse(data.class);
  }
}
/*  */


function initRender(vm) {
  vm._vnode = null; // the root of the child tree

  vm._staticTrees = null; // v-once cached trees

  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree

  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject; // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates

  vm._c = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  }; // normalization is always applied for the public version, used in
  // user-written render functions.


  vm.$createElement = function (a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  }; // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated


  var parentData = parentVnode && parentVnode.data;
  /* istanbul ignore else */

  if (true) {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {}
}

var currentRenderingInstance = null;

function renderMixin(Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this);
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    } // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.


    vm.$vnode = _parentVnode; // render self

    var vnode;

    try {
      // There's no need to maintain a stack because all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render"); // return error render result,
      // or previous vnode to prevent render error causing blank component

      /* istanbul ignore else */

      if ( true && vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    } // if the returned array contains only a single node, allow it


    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    } // return empty vnode in case the render function errored out


    if (!(vnode instanceof VNode)) {
      if ( true && Array.isArray(vnode)) {
        warn('Multiple root nodes returned from render function. Render function ' + 'should return a single root node.', vm);
      }

      vnode = createEmptyVNode();
    } // set parent


    vnode.parent = _parentVnode;
    return vnode;
  };
}
/*  */


function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === 'Module') {
    comp = comp.default;
  }

  return isObject(comp) ? base.extend(comp) : comp;
}

function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = {
    data: data,
    context: context,
    children: children,
    tag: tag
  };
  return node;
}

function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }

  if (isDef(factory.resolved)) {
    return factory.resolved;
  }

  var owner = currentRenderingInstance;

  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on('hook:destroyed', function () {
      return remove(owners, owner);
    });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;

        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }

        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor); // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)

      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function (reason) {
       true && warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ''));

      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);

          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;

              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;

            if (isUndef(factory.resolved)) {
              reject( true ? "timeout (" + res.timeout + "ms)" : 0);
            }
          }, res.timeout);
        }
      }
    }

    sync = false; // return in case resolved synchronously

    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
/*  */


function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
/*  */


function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];

      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
/*  */

/*  */


function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false; // init parent attached events

  var listeners = vm.$options._parentListeners;

  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add(event, fn) {
  target.$on(event, fn);
}

function remove$1(event, fn) {
  target.$off(event, fn);
}

function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);

    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}

function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin(Vue) {
  var hookRE = /^hook:/;

  Vue.prototype.$on = function (event, fn) {
    var vm = this;

    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn); // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup

      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }

    return vm;
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;

    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }

    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this; // all

    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    } // array of events


    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }

      return vm;
    } // specific event


    var cbs = vm._events[event];

    if (!cbs) {
      return vm;
    }

    if (!fn) {
      vm._events[event] = null;
      return vm;
    } // specific handler


    var cb;
    var i = cbs.length;

    while (i--) {
      cb = cbs[i];

      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }

    return vm;
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;

    if (true) {
      var lowerCaseEvent = event.toLowerCase();

      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip("Event \"" + lowerCaseEvent + "\" is emitted in component " + formatComponentName(vm) + " but the handler is registered for \"" + event + "\". " + "Note that HTML attributes are case-insensitive and you cannot use " + "v-on to listen to camelCase events when using in-DOM templates. " + "You should probably use \"" + hyphenate(event) + "\" instead of \"" + event + "\".");
      }
    }

    var cbs = vm._events[event];

    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";

      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }

    return vm;
  };
}
/*  */


var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  };
}

function initLifecycle(vm) {
  var options = vm.$options; // locate first non-abstract parent

  var parent = options.parent;

  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }

    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin(Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode; // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.

    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false
      /* removeOnly */
      );
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }

    restoreActiveInstance(); // update __vue__ reference

    if (prevEl) {
      prevEl.__vue__ = null;
    }

    if (vm.$el) {
      vm.$el.__vue__ = vm;
    } // if parent is an HOC, update its $el as well


    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    } // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.

  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;

    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;

    if (vm._isBeingDestroyed) {
      return;
    }

    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true; // remove self from parent

    var parent = vm.$parent;

    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    } // teardown watchers


    if (vm._watcher) {
      vm._watcher.teardown();
    }

    var i = vm._watchers.length;

    while (i--) {
      vm._watchers[i].teardown();
    } // remove reference from data ob
    // frozen object may not have observer.


    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    } // call the last hook...


    vm._isDestroyed = true; // invoke destroy hooks on current rendered tree

    vm.__patch__(vm._vnode, null); // fire destroyed hook


    callHook(vm, 'destroyed'); // turn off all instance listeners.

    vm.$off(); // remove __vue__ reference

    if (vm.$el) {
      vm.$el.__vue__ = null;
    } // release circular reference (#6759)


    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent(vm, el, hydrating) {
  vm.$el = el;

  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;

    if (true) {
      /* istanbul ignore if */
      if (vm.$options.template && vm.$options.template.charAt(0) !== '#' || vm.$options.el || el) {
        warn('You are using the runtime-only build of Vue where the template ' + 'compiler is not available. Either pre-compile the templates into ' + 'render functions, or use the compiler-included build.', vm);
      } else {
        warn('Failed to mount component: template or render function not defined.', vm);
      }
    }
  }

  callHook(vm, 'beforeMount');
  var updateComponent;
  /* istanbul ignore if */

  if ( true && config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);

      var vnode = vm._render();

      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);

      vm._update(vnode, hydrating);

      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  } // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined


  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true
  /* isRenderWatcher */
  );
  hydrating = false; // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook

  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }

  return vm;
}

function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  } // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.
  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.


  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key); // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.

  var needsForceUpdate = !!(renderChildren || // has new static slots
  vm.$options._renderChildren || // has old static slots
  hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) {
    // update child tree's parent
    vm._vnode.parent = parentVnode;
  }

  vm.$options._renderChildren = renderChildren; // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render

  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject; // update props

  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];

    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?

      props[key] = validateProp(key, propOptions, propsData, vm);
    }

    toggleObserving(true); // keep a copy of raw propsData

    vm.$options.propsData = propsData;
  } // update listeners


  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners); // resolve slots + force update if has children

  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  if (true) {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }

  return false;
}

function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;

    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }

  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;

    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'activated');
  }
}

function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;

    if (isInInactiveTree(vm)) {
      return;
    }
  }

  if (!vm._inactive) {
    vm._inactive = true;

    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }

    callHook(vm, 'deactivated');
  }
}

function callHook(vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";

  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }

  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }

  popTarget();
}
/*  */


var MAX_UPDATE_COUNT = 100;
var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;
/**
 * Reset the scheduler's state.
 */

function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};

  if (true) {
    circular = {};
  }

  waiting = flushing = false;
} // Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.


var currentFlushTimestamp = 0; // Async edge case fix requires storing an event listener's attach timestamp.

var getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)

if (inBrowser && !isIE) {
  var performance = window.performance;

  if (performance && typeof performance.now === 'function' && getNow() > document.createEvent('Event').timeStamp) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () {
      return performance.now();
    };
  }
}
/**
 * Flush both queues and run the watchers.
 */


function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id; // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.

  queue.sort(function (a, b) {
    return a.id - b.id;
  }); // do not cache length because more watchers might be pushed
  // as we run existing watchers

  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];

    if (watcher.before) {
      watcher.before();
    }

    id = watcher.id;
    has[id] = null;
    watcher.run(); // in dev build, check and stop circular updates.

    if ( true && has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;

      if (circular[id] > MAX_UPDATE_COUNT) {
        warn('You may have an infinite update loop ' + (watcher.user ? "in watcher with expression \"" + watcher.expression + "\"" : "in a component render function."), watcher.vm);
        break;
      }
    }
  } // keep copies of post queues before resetting state


  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState(); // call component updated and activated hooks

  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue); // devtool hook

  /* istanbul ignore if */

  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks(queue) {
  var i = queue.length;

  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;

    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}
/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */


function queueActivatedComponent(vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks(queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true
    /* true */
    );
  }
}
/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */


function queueWatcher(watcher) {
  var id = watcher.id;

  if (has[id] == null) {
    has[id] = true;

    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;

      while (i > index && queue[i].id > watcher.id) {
        i--;
      }

      queue.splice(i + 1, 0, watcher);
    } // queue the flush


    if (!waiting) {
      waiting = true;

      if ( true && !config.async) {
        flushSchedulerQueue();
        return;
      }

      nextTick(flushSchedulerQueue);
    }
  }
}
/*  */


var uid$2 = 0;
/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */

var Watcher = function Watcher(vm, expOrFn, cb, options, isRenderWatcher) {
  this.vm = vm;

  if (isRenderWatcher) {
    vm._watcher = this;
  }

  vm._watchers.push(this); // options


  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }

  this.cb = cb;
  this.id = ++uid$2; // uid for batching

  this.active = true;
  this.dirty = this.lazy; // for lazy watchers

  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression =  true ? expOrFn.toString() : 0; // parse expression for getter

  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);

    if (!this.getter) {
      this.getter = noop;
       true && warn("Failed watching path: \"" + expOrFn + "\" " + 'Watcher only accepts simple dot-delimited paths. ' + 'For full control, use a function instead.', vm);
    }
  }

  this.value = this.lazy ? undefined : this.get();
};
/**
 * Evaluate the getter, and re-collect dependencies.
 */


Watcher.prototype.get = function get() {
  pushTarget(this);
  var value;
  var vm = this.vm;

  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, "getter for watcher \"" + this.expression + "\"");
    } else {
      throw e;
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }

    popTarget();
    this.cleanupDeps();
  }

  return value;
};
/**
 * Add a dependency to this directive.
 */


Watcher.prototype.addDep = function addDep(dep) {
  var id = dep.id;

  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);

    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};
/**
 * Clean up for dependency collection.
 */


Watcher.prototype.cleanupDeps = function cleanupDeps() {
  var i = this.deps.length;

  while (i--) {
    var dep = this.deps[i];

    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }

  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};
/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */


Watcher.prototype.update = function update() {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};
/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */


Watcher.prototype.run = function run() {
  if (this.active) {
    var value = this.get();

    if (value !== this.value || // Deep watchers and watchers on Object/Arrays should fire even
    // when the value is the same, because the value may
    // have mutated.
    isObject(value) || this.deep) {
      // set new value
      var oldValue = this.value;
      this.value = value;

      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, "callback for watcher \"" + this.expression + "\"");
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};
/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */


Watcher.prototype.evaluate = function evaluate() {
  this.value = this.get();
  this.dirty = false;
};
/**
 * Depend on all deps collected by this watcher.
 */


Watcher.prototype.depend = function depend() {
  var i = this.deps.length;

  while (i--) {
    this.deps[i].depend();
  }
};
/**
 * Remove self from all dependencies' subscriber list.
 */


Watcher.prototype.teardown = function teardown() {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }

    var i = this.deps.length;

    while (i--) {
      this.deps[i].removeSub(this);
    }

    this.active = false;
  }
};
/*  */


var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy(target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };

  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;

  if (opts.props) {
    initProps(vm, opts.props);
  }

  if (opts.methods) {
    initMethods(vm, opts.methods);
  }

  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true
    /* asRootData */
    );
  }

  if (opts.computed) {
    initComputed(vm, opts.computed);
  }

  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {}; // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.

  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent; // root instance props should be converted

  if (!isRoot) {
    toggleObserving(false);
  }

  var loop = function (key) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */

    if (true) {
      var hyphenatedKey = hyphenate(key);

      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop.", vm);
      }

      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn("Avoid mutating a prop directly since the value will be " + "overwritten whenever the parent component re-renders. " + "Instead, use a data or computed property based on the prop's " + "value. Prop being mutated: \"" + key + "\"", vm);
        }
      });
    } else {} // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.


    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop(key);

  toggleObserving(true);
}

function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function' ? getData(data, vm) : data || {};

  if (!isPlainObject(data)) {
    data = {};
     true && warn('data functions should return an object:\n' + 'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function', vm);
  } // proxy data on instance


  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;

  while (i--) {
    var key = keys[i];

    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn("Method \"" + key + "\" has already been defined as a data property.", vm);
      }
    }

    if (props && hasOwn(props, key)) {
       true && warn("The data property \"" + key + "\" is already declared as a prop. " + "Use prop default value instead.", vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  } // observe data


  observe(data, true
  /* asRootData */
  );
}

function getData(data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();

  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = {
  lazy: true
};

function initComputed(vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null); // computed properties are just getters during SSR

  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;

    if ( true && getter == null) {
      warn("Getter is missing for computed property \"" + key + "\".", vm);
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    } // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.


    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn("The computed property \"" + key + "\" is already defined in data.", vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn("The computed property \"" + key + "\" is already defined as a prop.", vm);
      }
    }
  }
}

function defineComputed(target, key, userDef) {
  var shouldCache = !isServerRendering();

  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }

  if ( true && sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn("Computed property \"" + key + "\" was assigned to but it has no setter.", this);
    };
  }

  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];

    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }

      if (Dep.target) {
        watcher.depend();
      }

      return watcher.value;
    }
  };
}

function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}

function initMethods(vm, methods) {
  var props = vm.$options.props;

  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== 'function') {
        warn("Method \"" + key + "\" has type \"" + typeof methods[key] + "\" in the component definition. " + "Did you reference the function correctly?", vm);
      }

      if (props && hasOwn(props, key)) {
        warn("Method \"" + key + "\" has already been defined as a prop.", vm);
      }

      if (key in vm && isReserved(key)) {
        warn("Method \"" + key + "\" conflicts with an existing Vue instance method. " + "Avoid defining component methods that start with _ or $.");
      }
    }

    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];

    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }

  if (typeof handler === 'string') {
    handler = vm[handler];
  }

  return vm.$watch(expOrFn, handler, options);
}

function stateMixin(Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};

  dataDef.get = function () {
    return this._data;
  };

  var propsDef = {};

  propsDef.get = function () {
    return this._props;
  };

  if (true) {
    dataDef.set = function () {
      warn('Avoid replacing instance root $data. ' + 'Use nested data properties instead.', this);
    };

    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }

  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);
  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (expOrFn, cb, options) {
    var vm = this;

    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }

    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);

    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, "callback for immediate watcher \"" + watcher.expression + "\"");
      }
    }

    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
/*  */


var uid$3 = 0;

function initMixin(Vue) {
  Vue.prototype._init = function (options) {
    var vm = this; // a uid

    vm._uid = uid$3++;
    var startTag, endTag;
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    } // a flag to avoid this being observed


    vm._isVue = true; // merge options

    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    /* istanbul ignore else */


    if (true) {
      initProxy(vm);
    } else {} // expose real self


    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props

    initState(vm);
    initProvide(vm); // resolve provide after data/props

    callHook(vm, 'created');
    /* istanbul ignore if */

    if ( true && config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options); // doing this because it's faster than dynamic enumeration.

  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;

  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;

    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions; // check if there are any late-modified/attached options (#4976)

      var modifiedOptions = resolveModifiedOptions(Ctor); // update base extend options

      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }

      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);

      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }

  return options;
}

function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;

  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }

      modified[key] = latest[key];
    }
  }

  return modified;
}

function Vue(options) {
  if ( true && !(this instanceof Vue)) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }

  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);
/*  */

function initUse(Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);

    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    } // additional parameters


    var args = toArray(arguments, 1);
    args.unshift(this);

    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }

    installedPlugins.push(plugin);
    return this;
  };
}
/*  */


function initMixin$1(Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
/*  */


function initExtend(Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;
  /**
   * Class inheritance
   */

  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});

    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }

    var name = extendOptions.name || Super.options.name;

    if ( true && name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent(options) {
      this._init(options);
    };

    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub['super'] = Super; // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.

    if (Sub.options.props) {
      initProps$1(Sub);
    }

    if (Sub.options.computed) {
      initComputed$1(Sub);
    } // allow further extension/mixin/plugin usage


    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use; // create asset registers, so extended classes
    // can have their private assets too.

    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    }); // enable recursive self-lookup

    if (name) {
      Sub.options.components[name] = Sub;
    } // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.


    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options); // cache constructor

    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}

function initProps$1(Comp) {
  var props = Comp.options.props;

  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1(Comp) {
  var computed = Comp.options.computed;

  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
/*  */


function initAssetRegisters(Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (id, definition) {
      if (!definition) {
        return this.options[type + 's'][id];
      } else {
        /* istanbul ignore if */
        if ( true && type === 'component') {
          validateComponentName(id);
        }

        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }

        if (type === 'directive' && typeof definition === 'function') {
          definition = {
            bind: definition,
            update: definition
          };
        }

        this.options[type + 's'][id] = definition;
        return definition;
      }
    };
  });
}
/*  */


function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}

function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  /* istanbul ignore next */


  return false;
}

function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;

  for (var key in cache) {
    var cachedNode = cache[key];

    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);

      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry(cache, key, keys, current) {
  var cached$$1 = cache[key];

  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }

  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];
var KeepAlive = {
  name: 'keep-alive',
  abstract: true,
  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },
  created: function created() {
    this.cache = Object.create(null);
    this.keys = [];
  },
  destroyed: function destroyed() {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) {
        return matches(val, name);
      });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) {
        return !matches(val, name);
      });
    });
  },
  render: function render() {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;

    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;

      if ( // not included
      include && (!name || !matches(include, name)) || // excluded
      exclude && name && matches(exclude, name)) {
        return vnode;
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null // same constructor may get registered as different local components
      // so cid alone is not enough (#3269)
      ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : '') : vnode.key;

      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance; // make current key freshest

        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key); // prune oldest entry

        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }

    return vnode || slot && slot[0];
  }
};
var builtInComponents = {
  KeepAlive: KeepAlive
};
/*  */

function initGlobalAPI(Vue) {
  // config
  var configDef = {};

  configDef.get = function () {
    return config;
  };

  if (true) {
    configDef.set = function () {
      warn('Do not replace the Vue.config object, set individual fields instead.');
    };
  }

  Object.defineProperty(Vue, 'config', configDef); // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.

  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick; // 2.6 explicit observable API

  Vue.observable = function (obj) {
    observe(obj);
    return obj;
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  }); // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.

  Vue.options._base = Vue;
  extend(Vue.options.components, builtInComponents);
  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);
Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});
Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get() {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext;
  }
}); // expose FunctionalRenderContext for ssr runtime helper installation

Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});
Vue.version = '2.6.12';
/*  */
// these are reserved for web because they are directly compiled away
// during template compilation

var isReservedAttr = makeMap('style,class'); // attributes that should be using props for binding

var acceptValue = makeMap('input,textarea,option,select,progress');

var mustUseProp = function (tag, type, attr) {
  return attr === 'value' && acceptValue(tag) && type !== 'button' || attr === 'selected' && tag === 'option' || attr === 'checked' && tag === 'input' || attr === 'muted' && tag === 'video';
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');
var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false' ? 'false' // allow arbitrary string value for contenteditable
  : key === 'contenteditable' && isValidContentEditableValue(value) ? value : 'true';
};

var isBooleanAttr = makeMap('allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' + 'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' + 'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' + 'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' + 'required,reversed,scoped,seamless,selected,sortable,translate,' + 'truespeed,typemustmatch,visible');
var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink';
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : '';
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false;
};
/*  */


function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;

  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;

    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }

  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }

  return renderClass(data.staticClass, data.class);
}

function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}

function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  /* istanbul ignore next */


  return '';
}

function concat(a, b) {
  return a ? b ? a + ' ' + b : a : b || '';
}

function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }

  if (isObject(value)) {
    return stringifyObject(value);
  }

  if (typeof value === 'string') {
    return value;
  }
  /* istanbul ignore next */


  return '';
}

function stringifyArray(value) {
  var res = '';
  var stringified;

  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) {
        res += ' ';
      }

      res += stringified;
    }
  }

  return res;
}

function stringifyObject(value) {
  var res = '';

  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += ' ';
      }

      res += key;
    }
  }

  return res;
}
/*  */


var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};
var isHTMLTag = makeMap('html,body,base,head,link,meta,style,title,' + 'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' + 'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' + 'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' + 's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' + 'embed,object,param,source,canvas,script,noscript,del,ins,' + 'caption,col,colgroup,table,thead,tbody,td,th,tr,' + 'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' + 'output,progress,select,textarea,' + 'details,dialog,menu,menuitem,summary,' + 'content,element,shadow,template,blockquote,iframe,tfoot'); // this map is intentionally selective, only covering SVG elements that may
// contain child elements.

var isSVG = makeMap('svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' + 'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' + 'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view', true);

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag);
};

function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return 'svg';
  } // basic support for MathML
  // note it doesn't support other MathML elements being component roots


  if (tag === 'math') {
    return 'math';
  }
}

var unknownElementCache = Object.create(null);

function isUnknownElement(tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true;
  }

  if (isReservedTag(tag)) {
    return false;
  }

  tag = tag.toLowerCase();
  /* istanbul ignore if */

  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }

  var el = document.createElement(tag);

  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');
/*  */

/**
 * Query an element selector if it's not an element already.
 */

function query(el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);

    if (!selected) {
       true && warn('Cannot find element: ' + el);
      return document.createElement('div');
    }

    return selected;
  } else {
    return el;
  }
}
/*  */


function createElement$1(tagName, vnode) {
  var elm = document.createElement(tagName);

  if (tagName !== 'select') {
    return elm;
  } // false or null will remove the attribute but undefined will not


  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }

  return elm;
}

function createElementNS(namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName);
}

function createTextNode(text) {
  return document.createTextNode(text);
}

function createComment(text) {
  return document.createComment(text);
}

function insertBefore(parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild(node, child) {
  node.removeChild(child);
}

function appendChild(node, child) {
  node.appendChild(child);
}

function parentNode(node) {
  return node.parentNode;
}

function nextSibling(node) {
  return node.nextSibling;
}

function tagName(node) {
  return node.tagName;
}

function setTextContent(node, text) {
  node.textContent = text;
}

function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});
/*  */

var ref = {
  create: function create(_, vnode) {
    registerRef(vnode);
  },
  update: function update(oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy(vnode) {
    registerRef(vnode, true);
  }
};

function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;

  if (!isDef(key)) {
    return;
  }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;

  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}
/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */


var emptyNode = new VNode('', {}, []);
var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode(a, b) {
  return a.key === b.key && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && a.asyncFactory === b.asyncFactory && isUndef(b.asyncFactory.error));
}

function sameInputType(a, b) {
  if (a.tag !== 'input') {
    return true;
  }

  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}

function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};

  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;

    if (isDef(key)) {
      map[key] = i;
    }
  }

  return map;
}

function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];

    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt(elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm);
  }

  function createRmCb(childElm, listeners) {
    function remove$$1() {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }

    remove$$1.listeners = listeners;
    return remove$$1;
  }

  function removeNode(el) {
    var parent = nodeOps.parentNode(el); // element may have already been removed due to v-html / v-text

    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function (ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }

  var creatingElmInVPre = 0;

  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check

    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;

    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }

        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.', vnode.context);
        }
      }

      vnode.elm = vnode.ns ? nodeOps.createElementNS(vnode.ns, tag) : nodeOps.createElement(tag, vnode);
      setScope(vnode);
      /* istanbul ignore if */

      {
        createChildren(vnode, children, insertedVnodeQueue);

        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }

        insert(parentElm, vnode.elm, refElm);
      }

      if ( true && data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;

    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;

      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false
        /* hydrating */
        );
      } // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.


      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);

        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }

        return true;
      }
    }
  }

  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }

    vnode.elm = vnode.componentInstance.$el;

    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode); // make sure to invoke the insert hook

      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i; // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.

    var innerNode = vnode;

    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;

      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }

        insertedVnodeQueue.push(innerNode);
        break;
      }
    } // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself


    insert(parentElm, vnode.elm, refElm);
  }

  function insert(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }

      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }

    return isDef(vnode.tag);
  }

  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }

    i = vnode.data.hook; // Reuse variable

    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }

      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  } // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.


  function setScope(vnode) {
    var i;

    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;

      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }

        ancestor = ancestor.parent;
      }
    } // for slot content they should also get the scopeId from the host instance.


    if (isDef(i = activeInstance) && i !== vnode.context && i !== vnode.fnContext && isDef(i = i.$options._scopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook(vnode) {
    var i, j;
    var data = vnode.data;

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) {
        i(vnode);
      }

      for (i = 0; i < cbs.destroy.length; ++i) {
        cbs.destroy[i](vnode);
      }
    }

    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];

      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;

      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      } // recursively invoke hooks on child component root node


      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }

      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }

      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm; // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions

    var canMove = !removeOnly;

    if (true) {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }

        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);

        if (isUndef(idxInOld)) {
          // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];

          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }

        newStartVnode = newCh[++newStartIdx];
      }
    }

    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys(children) {
    var seenKeys = {};

    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;

      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld(node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];

      if (isDef(c) && sameVnode(node, c)) {
        return i;
      }
    }
  }

  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }

      return;
    } // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.


    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }

    var i;
    var data = vnode.data;

    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;

    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) {
        cbs.update[i](oldVnode, vnode);
      }

      if (isDef(i = data.hook) && isDef(i = i.update)) {
        i(oldVnode, vnode);
      }
    }

    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }

        if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }

        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) {
        i(oldVnode, vnode);
      }
    }
  }

  function invokeInsertHook(vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false; // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).

  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key'); // Note: this is a browser-only function so we can assume elms are DOM nodes.

  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    } // assert node match


    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }

    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) {
        i(vnode, true
        /* hydrating */
        );
      }

      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }

    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }

              return false;
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;

            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }

              childNode = childNode.nextSibling;
            } // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.


            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if ( true && typeof console !== 'undefined' && !hydrationBailed) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }

              return false;
            }
          }
        }
      }

      if (isDef(data)) {
        var fullInvoke = false;

        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }

        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }

    return true;
  }

  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }

  return function patch(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }

      return;
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);

      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }

          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn('The client-side rendered virtual DOM tree is not matching ' + 'server-rendered content. This is likely caused by incorrect ' + 'HTML markup, for example nesting block-level elements inside ' + '<p>, or missing <tbody>. Bailing hydration and performing ' + 'full client-side render.');
            }
          } // either not server-rendered, or hydration failed.
          // create an empty node and replace it


          oldVnode = emptyNodeAt(oldVnode);
        } // replacing existing element


        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm); // create new node

        createElm(vnode, insertedVnodeQueue, // extremely rare edge case: do not insert if old element is in a
        // leaving transition. Only happens when combining transition +
        // keep-alive + HOCs. (#4590)
        oldElm._leaveCb ? null : parentElm, nodeOps.nextSibling(oldElm)); // update parent placeholder node element, recursively

        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);

          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }

            ancestor.elm = vnode.elm;

            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              } // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.


              var insert = ancestor.data.hook.insert;

              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }

            ancestor = ancestor.parent;
          }
        } // destroy old node


        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
/*  */


var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives(vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;

  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];

    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);

      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);

      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };

    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);

  if (!dirs) {
    // $flow-disable-line
    return res;
  }

  var i, dir;

  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];

    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }

    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  } // $flow-disable-line


  return res;
}

function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join('.');
}

function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];

  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}

var baseModules = [ref, directives];
/*  */

function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;

  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }

  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }

  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];

    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  } // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max

  /* istanbul ignore if */


  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }

  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr(el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED' ? 'true' : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.

    /* istanbul ignore if */
    if (isIE && !isIE9 && el.tagName === 'TEXTAREA' && key === 'placeholder' && value !== '' && !el.__ieph) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };

      el.addEventListener('input', blocker); // $flow-disable-line

      el.__ieph = true;
      /* IE placeholder patched */
    }

    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};
/*  */

function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }

  var cls = genClassForVnode(vnode); // handle transition classes

  var transitionClass = el._transitionClasses;

  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  } // set the class


  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};
/*  */

/*  */

/*  */

/*  */
// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.

var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';
/*  */
// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.

function normalizeEvents(on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  } // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4

  /* istanbul ignore if */


  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1(event, handler, capture) {
  var _target = target$1; // save current target element in closure

  return function onceHandler() {
    var res = handler.apply(null, arguments);

    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
} // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.


var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1(name, handler, capture, passive) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;

    handler = original._wrapper = function (e) {
      if ( // no bubbling, should always fire.
      // this is just a safety net in case event.timeStamp is unreliable in
      // certain weird environments...
      e.target === e.currentTarget || // event is fired after handler attachment
      e.timeStamp >= attachedTimestamp || // bail for environments that have buggy event.timeStamp implementations
      // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
      // #9681 QtWebEngine event.timeStamp is negative value
      e.timeStamp <= 0 || // #9448 bail if event is fired in another document in a multi-page
      // electron/nw.js app, since event.timeStamp will be using a different
      // starting reference
      e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }

  target$1.addEventListener(name, handler, supportsPassive ? {
    capture: capture,
    passive: passive
  } : capture);
}

function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}

function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }

  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};
/*  */

var svgContainer;

function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }

  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {}; // clone observed objects, as the user probably wants to mutate it

  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key]; // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)

    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) {
        vnode.children.length = 0;
      }

      if (cur === oldProps[key]) {
        continue;
      } // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property


      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur; // avoid resetting cursor position when value is the same

      var strCur = isUndef(cur) ? '' : String(cur);

      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;

      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }

      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if ( // skip the update if old and new VDOM state is the same.
    // `value` is handled separately because the DOM value may be temporarily
    // out of sync with VDOM state due to focus, composition and modifiers.
    // This  #4521 by skipping the unnecessary `checked` update.
    cur !== oldProps[key]) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
} // check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === 'OPTION' || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}

function isNotInFocusAndDirty(elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true; // #6157
  // work around IE bug when accessing document.activeElement in an iframe

  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {}

  return notInFocus && elm.value !== checkVal;
}

function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime

  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }

    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }

  return value !== newVal;
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};
/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res;
}); // merge static and dynamic style data on the same vnode

function normalizeStyleData(data) {
  var style = normalizeStyleBinding(data.style); // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it

  return data.staticStyle ? extend(data.staticStyle, style) : style;
} // normalize possible array / string values into Object


function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }

  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle);
  }

  return bindingStyle;
}
/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */


function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;

    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;

      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }

  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }

  var parentNode = vnode;

  while (parentNode = parentNode.parent) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }

  return res;
}
/*  */


var cssVarRE = /^--/;
var importantRE = /\s*!important$/;

var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);

    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];
var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);

  if (prop !== 'filter' && prop in emptyStyle) {
    return prop;
  }

  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);

  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;

    if (name in emptyStyle) {
      return name;
    }
  }
});

function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {}; // if static style exists, stylebinding already merged into it when doing normalizeStyleData

  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style = normalizeStyleBinding(vnode.data.style) || {}; // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.

  vnode.data.normalizedStyle = isDef(style.__ob__) ? extend({}, style) : style;
  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }

  for (name in newStyle) {
    cur = newStyle[name];

    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};
/*  */

var whitespaceRE = /\s+/;
/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */

function addClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";

    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}
/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */


function removeClass(el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  /* istanbul ignore else */


  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }

    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';

    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }

    cur = cur.trim();

    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}
/*  */


function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  /* istanbul ignore else */


  if (typeof def$$1 === 'object') {
    var res = {};

    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }

    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1);
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: name + "-enter",
    enterToClass: name + "-enter-to",
    enterActiveClass: name + "-enter-active",
    leaveClass: name + "-leave",
    leaveToClass: name + "-leave-to",
    leaveActiveClass: name + "-leave-active"
  };
});
var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation'; // Transition property/event sniffing

var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';

if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined && window.onwebkittransitionend !== undefined) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }

  if (window.onanimationend === undefined && window.onwebkitanimationend !== undefined) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
} // binding to window is necessary to make hot reload work in IE in strict mode


var raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout :
/* istanbul ignore next */
function (fn) {
  return fn();
};

function nextFrame(fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);

  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }

  removeClass(el, cls);
}

function whenTransitionEnds(el, expectedType, cb) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;

  if (!type) {
    return cb();
  }

  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;

  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };

  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };

  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties

  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */

  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }

  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  };
}

function getTimeout(delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors


function toMs(s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000;
}
/*  */


function enter(vnode, toggleDisplay) {
  var el = vnode.elm; // call leave callback now

  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;

    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data)) {
    return;
  }
  /* istanbul ignore if */


  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration; // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.

  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;

  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return;
  }

  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === 'function' ? appear : enter : enter;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);

  if ( true && explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }

      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }

    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];

      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }

      enterHook && enterHook(el, cb);
    });
  } // start enter transition


  beforeEnterHook && beforeEnterHook(el);

  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);

      if (!cb.cancelled) {
        addTransitionClass(el, toClass);

        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave(vnode, rm) {
  var el = vnode.elm; // call enter callback now

  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;

    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);

  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  /* istanbul ignore if */


  if (isDef(el._leaveCb)) {
    return;
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);

  if ( true && isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }

    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }

    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }

      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }

    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave() {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return;
    } // record leaving element


    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }

    beforeLeave && beforeLeave(el);

    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);

        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);

          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    leave && leave(el, cb);

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
} // only used in dev mode


function checkDuration(val, name, vnode) {
  if (typeof val !== 'number') {
    warn("<transition> explicit " + name + " duration is not a valid number - " + "got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - " + 'the duration expression might be incorrect.', vnode.context);
  }
}

function isValidDuration(val) {
  return typeof val === 'number' && !isNaN(val);
}
/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */


function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }

  var invokerFns = fn.fns;

  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}

function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1(vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};
var platformModules = [attrs, klass, events, domProps, style, transition];
/*  */
// the directive module should be applied last, after all
// built-in modules have been applied.

var modules = platformModules.concat(baseModules);
var patch = createPatchFunction({
  nodeOps: nodeOps,
  modules: modules
});
/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */

if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;

    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted(el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }

      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;

      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.

        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */

        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },
  componentUpdated: function componentUpdated(el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context); // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.

      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);

      if (curOptions.some(function (o, i) {
        return !looseEqual(o, prevOptions[i]);
      })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple ? binding.value.some(function (v) {
          return hasNoMatchingOption(v, curOptions);
        }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);

        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */

  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;

  if (isMultiple && !Array.isArray(value)) {
     true && warn("<select multiple v-model=\"" + binding.expression + "\"> " + "expects an Array value for its binding, but got " + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }

  var selected, option;

  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];

    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;

      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }

        return;
      }
    }
  }

  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption(value, options) {
  return options.every(function (o) {
    return !looseEqual(o, value);
  });
}

function getValue(option) {
  return '_value' in option ? option._value : option.value;
}

function onCompositionStart(e) {
  e.target.composing = true;
}

function onCompositionEnd(e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) {
    return;
  }

  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger(el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
/*  */
// recursively search for possible transition defined inside the component root


function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}

var show = {
  bind: function bind(el, ref, vnode) {
    var value = ref.value;
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay = el.style.display === 'none' ? '' : el.style.display;

    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },
  update: function update(el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;
    /* istanbul ignore if */

    if (!value === !oldValue) {
      return;
    }

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;

    if (transition$$1) {
      vnode.data.show = true;

      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },
  unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};
var platformDirectives = {
  model: directive,
  show: show
};
/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
}; // in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered

function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;

  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}

function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options; // props

  for (var key in options.propsData) {
    data[key] = comp[key];
  } // events.
  // extract listeners and pass them directly to the transition methods


  var listeners = options._parentListeners;

  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }

  return data;
}

function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    });
  }
}

function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}

function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}

var isNotTextNode = function (c) {
  return c.tag || isAsyncPlaceholder(c);
};

var isVShowDirective = function (d) {
  return d.name === 'show';
};

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return;
    } // filter out text nodes (possible whitespaces)


    children = children.filter(isNotTextNode);
    /* istanbul ignore if */

    if (!children.length) {
      return;
    } // warn multiple elements


    if ( true && children.length > 1) {
      warn('<transition> can only be used on a single element. Use ' + '<transition-group> for lists.', this.$parent);
    }

    var mode = this.mode; // warn invalid mode

    if ( true && mode && mode !== 'in-out' && mode !== 'out-in') {
      warn('invalid <transition> mode: ' + mode, this.$parent);
    }

    var rawChild = children[0]; // if this is a component root node and the component's
    // parent container node also has transition, skip.

    if (hasParentTransition(this.$vnode)) {
      return rawChild;
    } // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive


    var child = getRealChild(rawChild);
    /* istanbul ignore if */

    if (!child) {
      return rawChild;
    }

    if (this._leaving) {
      return placeholder(h, rawChild);
    } // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.


    var id = "__transition-" + this._uid + "-";
    child.key = child.key == null ? child.isComment ? id + 'comment' : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild); // mark v-show
    // so that the transition module can hand over the control to the directive

    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && // #6687 component root is a comment node
    !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data); // handle transition mode

      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild);
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild;
        }

        var delayedLeave;

        var performLeave = function () {
          delayedLeave();
        };

        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) {
          delayedLeave = leave;
        });
      }
    }

    return rawChild;
  }
};
/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);
delete props.mode;
var TransitionGroup = {
  props: props,
  beforeMount: function beforeMount() {
    var this$1 = this;
    var update = this._update;

    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1); // force removing pass

      this$1.__patch__(this$1._vnode, this$1.kept, false, // hydrating
      true // removeOnly (!important, avoids unnecessary moves)
      );

      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },
  render: function render(h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];

      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c;
          (c.data || (c.data = {})).transition = transitionData;
        } else if (true) {
          var opts = c.componentOptions;
          var name = opts ? opts.Ctor.options.name || opts.tag || '' : c.tag;
          warn("<transition-group> children must be keyed: <" + name + ">");
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];

      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();

        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }

      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children);
  },
  updated: function updated() {
    var children = this.prevChildren;
    var moveClass = this.moveClass || (this.name || 'v') + '-move';

    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return;
    } // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.


    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation); // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line

    this._reflow = document.body.offsetHeight;
    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
          if (e && e.target !== el) {
            return;
          }

          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },
  methods: {
    hasMove: function hasMove(el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false;
      }
      /* istanbul ignore if */


      if (this._hasMove) {
        return this._hasMove;
      } // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.


      var clone = el.cloneNode();

      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) {
          removeClass(clone, cls);
        });
      }

      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return this._hasMove = info.hasTransform;
    }
  }
};

function callPendingCbs(c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */


  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;

  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};
/*  */
// install platform specific utils

Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement; // install platform runtime directives & components

extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents); // install platform patch function

Vue.prototype.__patch__ = inBrowser ? patch : noop; // public mount method

Vue.prototype.$mount = function (el, hydrating) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating);
}; // devtools global hook

/* istanbul ignore next */


if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else if (true) {
        console[console.info ? 'info' : 'log']('Download the Vue Devtools extension for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
      }
    }

    if ( true && config.productionTip !== false && typeof console !== 'undefined') {
      console[console.info ? 'info' : 'log']("You are running Vue in development mode.\n" + "Make sure to turn on production mode when deploying for production.\n" + "See more tips at https://vuejs.org/guide/deployment.html");
    }
  }, 0);
}
/*  */


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Vue);

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");
/* harmony import */ var _App_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue */ "./src/App.vue");
/* harmony import */ var _router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./router */ "./src/router/index.js");



vue__WEBPACK_IMPORTED_MODULE_2__.default.config.productionTip = false;
new vue__WEBPACK_IMPORTED_MODULE_2__.default({
  el: '#app',
  router: _router__WEBPACK_IMPORTED_MODULE_1__.default,
  render: function render(h) {
    return h(_App_vue__WEBPACK_IMPORTED_MODULE_0__.default);
  }
});

/***/ }),

/***/ "./src/router/index.js":
/*!*****************************!*\
  !*** ./src/router/index.js ***!
  \*****************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! vue */ "./node_modules/vue/dist/vue.runtime.esm.js");
/* harmony import */ var vue_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! vue-router */ "./node_modules/vue-router/dist/vue-router.esm.js");
/* harmony import */ var _components_TrafficLight_vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/TrafficLight.vue */ "./src/components/TrafficLight.vue");



vue__WEBPACK_IMPORTED_MODULE_1__.default.use(vue_router__WEBPACK_IMPORTED_MODULE_2__.default);
var routes = [{
  path: '/',
  redirect: '/red'
}, {
  path: '/red',
  name: 'Red Signal',
  component: _components_TrafficLight_vue__WEBPACK_IMPORTED_MODULE_0__.default,
  props: {
    activeColor: 'red',
    timer: 10000
  }
}, {
  path: '/yellow',
  name: 'Yellow Signal',
  component: _components_TrafficLight_vue__WEBPACK_IMPORTED_MODULE_0__.default,
  props: {
    activeColor: 'yellow',
    timer: 3000
  }
}, {
  path: '/green',
  name: 'Green Signal',
  component: _components_TrafficLight_vue__WEBPACK_IMPORTED_MODULE_0__.default,
  props: {
    activeColor: 'green',
    timer: 15000
  }
}];
var router = new vue_router__WEBPACK_IMPORTED_MODULE_2__.default({
  routes: routes
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (router);

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, module.id, __webpack_require__.d, __webpack_require__.*, module */
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n", "",{"version":3,"sources":["webpack://./src/App.vue"],"names":[],"mappings":";AAgBA;EACA,iDAAA;EACA,mCAAA;EACA,kCAAA;EACA,kBAAA;EACA,cAAA;AACA","sourcesContent":["<template>\n  <div id=\"app\">\n    <router-view/>\n  </div>\n</template>\n\n<script>\n  import TrafficLight from \"./components/TrafficLight.vue\"\n  export default {\n    components: {\n      TrafficLight\n    }\n  }\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n</style>\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css&":
/*!************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css& ***!
  \************************************************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, module.id, __webpack_require__.d, __webpack_require__.*, module */
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n.traffic-light[data-v-6a0838c9] {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  width: 200px;\n  height: 500px;\n  margin: 50px auto;\n  background-color: rgba(0, 0, 0, 0.83);\n  border-radius: 50px;\n}\n", "",{"version":3,"sources":["webpack://./src/components/TrafficLight.vue"],"names":[],"mappings":";AAwFA;EACA,aAAA;EACA,sBAAA;EACA,6BAAA;EACA,mBAAA;EACA,YAAA;EACA,aAAA;EACA,iBAAA;EACA,qCAAA;EACA,mBAAA;AACA","sourcesContent":["<template>\r\n  <div class=\"traffic-light\">\r\n    <Signal\r\n      v-for=\"signal in signals\"\r\n      :key=\"signal.color\"\r\n      :color=\"signal.color\"\r\n      :isActive=\"signal.color === activeColor\"\r\n      :isDim=\"!(signal.color === activeColor)\"\r\n    />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  import Signal from './traffic-light-components/Signal.vue';\r\n  export default {\r\n    name: 'TrafficLight',\r\n    components: {\r\n      Signal\r\n    },\r\n    props: {\r\n      activeColor: String,\r\n      timer: Number\r\n    },\r\n    data() {\r\n      return {\r\n        signals: [\r\n          {\r\n            color: 'red',\r\n            isActive: false\r\n          },\r\n          {\r\n            color: 'yellow',\r\n            isActive: false\r\n          },\r\n          {\r\n            color: 'green',\r\n            isActive: false\r\n          }\r\n        ],\r\n        signalsOrder: this.setSignalsOrderByDefault(),\r\n\r\n      }\r\n    },\r\n    created() {\r\n      console.log('created ' + this.activeColor)\r\n      this.startTimer()\r\n    },\r\n    updated() {\r\n      console.log('updated ' + this.activeColor)\r\n      console.log(this.signalsOrder)\r\n      this.startTimer()\r\n    },\r\n    watch: {\r\n      // 'signalsOrder': () => {\r\n      //   localStorage.setItem('signalsOrder', JSON.stringify(this.signalsOrder))\r\n      // }\r\n    },\r\n    methods: {\r\n      // getItFromLocalStorage(key) {\r\n      //   const item = localStorage.getItem(key)\r\n      //   if (item) {\r\n      //     return JSON.parse(item)\r\n      //   } else {\r\n      //     return null\r\n      //   }\r\n      // },\r\n      startTimer() {\r\n        setTimeout(() => {\r\n          this.$router.push(`/${this.signalsOrder[1]}`)\r\n          this.signalsOrder.push(this.signalsOrder.shift())\r\n        }, this.timer)\r\n      },\r\n      setSignalsOrderByDefault() {\r\n        switch (this.activeColor) {\r\n          case 'red':\r\n            return ['red', 'yellow', 'green']\r\n          case 'yellow':\r\n            return ['yellow', 'green', 'red']\r\n          case 'green':\r\n            return ['green', 'red', 'yellow']\r\n        }\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n\r\n<style scoped>\r\n  .traffic-light {\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-around;\r\n    align-items: center;\r\n    width: 200px;\r\n    height: 500px;\r\n    margin: 50px auto;\r\n    background-color: rgba(0, 0, 0, 0.83);\r\n    border-radius: 50px;\r\n  }\r\n</style>"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css&":
/*!*******************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css& ***!
  \*******************************************************************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, module.id, __webpack_require__.d, __webpack_require__.*, module */
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js */ "./node_modules/css-loader/dist/runtime/cssWithMappingToString.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_cssWithMappingToString_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "\n.signal[data-v-7ec7fc3a] {\n  position: relative;\n  width: 100px;\n  height: 100px;\n  border: 10px solid black;\n  border-radius: 50%;\n  box-shadow: 0 0 10px black inset;\n}\n.red-signal[data-v-7ec7fc3a] {\n  background-color: red;\n}\n.yellow-signal[data-v-7ec7fc3a] {\n  background-color: yellow;\n}\n.green-signal[data-v-7ec7fc3a] {\n  background-color: green;\n}\n.dim-signal[data-v-7ec7fc3a]:after {\n  content: \"\";\n  position: absolute;\n  top: -1px;\n  right: -1px;\n  left: -1px;\n  bottom: -1px;\n  z-index: 100;\n  border-radius: 50%;\n  background-color: #000;\n  opacity: 0.8;\n}\n.blink[data-v-7ec7fc3a]:after {\n  animation: blink-data-v-7ec7fc3a 0.6s infinite;\n}\n@keyframes blink-data-v-7ec7fc3a {\n0% { opacity: 0.8\n}\n50% { opacity: 0.1\n}\n100% { opacity: 0.8\n}\n}\n", "",{"version":3,"sources":["webpack://./src/components/traffic-light-components/Signal.vue"],"names":[],"mappings":";AAgBA;EACA,kBAAA;EACA,YAAA;EACA,aAAA;EACA,wBAAA;EACA,kBAAA;EACA,gCAAA;AACA;AACA;EACA,qBAAA;AACA;AACA;EACA,wBAAA;AACA;AACA;EACA,uBAAA;AACA;AACA;EACA,WAAA;EACA,kBAAA;EACA,SAAA;EACA,WAAA;EACA,UAAA;EACA,YAAA;EACA,YAAA;EACA,kBAAA;EACA,sBAAA;EACA,YAAA;AACA;AACA;EACA,8CAAA;AACA;AACA;AACA,KAAA;AAAA;AACA,MAAA;AAAA;AACA,OAAA;AAAA;AACA","sourcesContent":["<template>\r\n  <div :class=\"['signal', color+'-signal', {'dim-signal': isDim}]\"></div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: 'Signal',\r\n    props: {\r\n      color: String,\r\n      isActive: Boolean,\r\n      isDim: Boolean\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  .signal {\r\n    position: relative;\r\n    width: 100px;\r\n    height: 100px;\r\n    border: 10px solid black;\r\n    border-radius: 50%;\r\n    box-shadow: 0 0 10px black inset;\r\n  }\r\n  .red-signal {\r\n    background-color: red;\r\n  }\r\n  .yellow-signal {\r\n    background-color: yellow;\r\n  }\r\n  .green-signal {\r\n    background-color: green;\r\n  }\r\n  .dim-signal:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    top: -1px;\r\n    right: -1px;\r\n    left: -1px;\r\n    bottom: -1px;\r\n    z-index: 100;\r\n    border-radius: 50%;\r\n    background-color: #000;\r\n    opacity: 0.8;\r\n  }\r\n  .blink:after {\r\n    animation: blink 0.6s infinite;\r\n  }\r\n  @keyframes blink {\r\n    0% { opacity: 0.8 }\r\n    50% { opacity: 0.1 }\r\n    100% { opacity: 0.8 }\r\n  }\r\n</style>"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&":
/*!********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css& ***!
  \********************************************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css&":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css& ***!
  \****************************************************************************************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_style_index_0_id_6a0838c9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css&");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_style_index_0_id_6a0838c9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_style_index_0_id_6a0838c9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css&":
/*!***********************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css& ***!
  \***********************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.n, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_style_index_0_id_7ec7fc3a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css& */ "./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css&");

            

var options = {};

options.insert = "head";
options.singleton = false;

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_style_index_0_id_7ec7fc3a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__.default, options);



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_style_index_0_id_7ec7fc3a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_1__.default.locals || {});

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements: module, __webpack_require__.nc, __webpack_require__.* */
/*! CommonJS bailout: module.exports is used directly at 230:0-14 */
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var isOldIE = function isOldIE() {
  var memo;
  return function memorize() {
    if (typeof memo === 'undefined') {
      // Test for IE <= 9 as proposed by Browserhacks
      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
      // Tests for existence of standard globals is to allow style-loader
      // to operate correctly into non-standard environments
      // @see https://github.com/webpack-contrib/style-loader/issues/177
      memo = Boolean(window && document && document.all && !window.atob);
    }

    return memo;
  };
}();

var getTarget = function getTarget() {
  var memo = {};
  return function memorize(target) {
    if (typeof memo[target] === 'undefined') {
      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
        try {
          // This will throw an exception if access to iframe is blocked
          // due to cross-origin restrictions
          styleTarget = styleTarget.contentDocument.head;
        } catch (e) {
          // istanbul ignore next
          styleTarget = null;
        }
      }

      memo[target] = styleTarget;
    }

    return memo[target];
  };
}();

var stylesInDom = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDom.length; i++) {
    if (stylesInDom[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var index = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3]
    };

    if (index !== -1) {
      stylesInDom[index].references++;
      stylesInDom[index].updater(obj);
    } else {
      stylesInDom.push({
        identifier: identifier,
        updater: addStyle(obj, options),
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function insertStyleElement(options) {
  var style = document.createElement('style');
  var attributes = options.attributes || {};

  if (typeof attributes.nonce === 'undefined') {
    var nonce =  true ? __webpack_require__.nc : 0;

    if (nonce) {
      attributes.nonce = nonce;
    }
  }

  Object.keys(attributes).forEach(function (key) {
    style.setAttribute(key, attributes[key]);
  });

  if (typeof options.insert === 'function') {
    options.insert(style);
  } else {
    var target = getTarget(options.insert || 'head');

    if (!target) {
      throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
    }

    target.appendChild(style);
  }

  return style;
}

function removeStyleElement(style) {
  // istanbul ignore if
  if (style.parentNode === null) {
    return false;
  }

  style.parentNode.removeChild(style);
}
/* istanbul ignore next  */


var replaceText = function replaceText() {
  var textStore = [];
  return function replace(index, replacement) {
    textStore[index] = replacement;
    return textStore.filter(Boolean).join('\n');
  };
}();

function applyToSingletonTag(style, index, remove, obj) {
  var css = remove ? '' : obj.media ? "@media ".concat(obj.media, " {").concat(obj.css, "}") : obj.css; // For old IE

  /* istanbul ignore if  */

  if (style.styleSheet) {
    style.styleSheet.cssText = replaceText(index, css);
  } else {
    var cssNode = document.createTextNode(css);
    var childNodes = style.childNodes;

    if (childNodes[index]) {
      style.removeChild(childNodes[index]);
    }

    if (childNodes.length) {
      style.insertBefore(cssNode, childNodes[index]);
    } else {
      style.appendChild(cssNode);
    }
  }
}

function applyToTag(style, options, obj) {
  var css = obj.css;
  var media = obj.media;
  var sourceMap = obj.sourceMap;

  if (media) {
    style.setAttribute('media', media);
  } else {
    style.removeAttribute('media');
  }

  if (sourceMap && typeof btoa !== 'undefined') {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    while (style.firstChild) {
      style.removeChild(style.firstChild);
    }

    style.appendChild(document.createTextNode(css));
  }
}

var singleton = null;
var singletonCounter = 0;

function addStyle(obj, options) {
  var style;
  var update;
  var remove;

  if (options.singleton) {
    var styleIndex = singletonCounter++;
    style = singleton || (singleton = insertStyleElement(options));
    update = applyToSingletonTag.bind(null, style, styleIndex, false);
    remove = applyToSingletonTag.bind(null, style, styleIndex, true);
  } else {
    style = insertStyleElement(options);
    update = applyToTag.bind(null, style, options);

    remove = function remove() {
      removeStyleElement(style);
    };
  }

  update(obj);
  return function updateStyle(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
        return;
      }

      update(obj = newObj);
    } else {
      remove();
    }
  };
}

module.exports = function (list, options) {
  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
  // tags it will allow on a page

  if (!options.singleton && typeof options.singleton !== 'boolean') {
    options.singleton = isOldIE();
  }

  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    if (Object.prototype.toString.call(newList) !== '[object Array]') {
      return;
    }

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDom[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDom[_index].references === 0) {
        stylesInDom[_index].updater();

        stylesInDom.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./src/App.vue":
/*!*********************!*\
  !*** ./src/App.vue ***!
  \*********************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./App.vue?vue&type=template&id=7ba5bd90& */ "./src/App.vue?vue&type=template&id=7ba5bd90&");
/* harmony import */ var _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./App.vue?vue&type=script&lang=js& */ "./src/App.vue?vue&type=script&lang=js&");
/* harmony import */ var _App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./App.vue?vue&type=style&index=0&lang=css& */ "./src/App.vue?vue&type=style&index=0&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");



;


/* normalize component */

var component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__.default)(
  _App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__.default,
  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.render,
  _App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/App.vue"
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);

/***/ }),

/***/ "./src/components/TrafficLight.vue":
/*!*****************************************!*\
  !*** ./src/components/TrafficLight.vue ***!
  \*****************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _TrafficLight_vue_vue_type_template_id_6a0838c9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true& */ "./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true&");
/* harmony import */ var _TrafficLight_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TrafficLight.vue?vue&type=script&lang=js& */ "./src/components/TrafficLight.vue?vue&type=script&lang=js&");
/* harmony import */ var _TrafficLight_vue_vue_type_style_index_0_id_6a0838c9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css& */ "./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");



;


/* normalize component */

var component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__.default)(
  _TrafficLight_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__.default,
  _TrafficLight_vue_vue_type_template_id_6a0838c9_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,
  _TrafficLight_vue_vue_type_template_id_6a0838c9_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,
  false,
  null,
  "6a0838c9",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/TrafficLight.vue"
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);

/***/ }),

/***/ "./src/components/traffic-light-components/Signal.vue":
/*!************************************************************!*\
  !*** ./src/components/traffic-light-components/Signal.vue ***!
  \************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _Signal_vue_vue_type_template_id_7ec7fc3a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true& */ "./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true&");
/* harmony import */ var _Signal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Signal.vue?vue&type=script&lang=js& */ "./src/components/traffic-light-components/Signal.vue?vue&type=script&lang=js&");
/* harmony import */ var _Signal_vue_vue_type_style_index_0_id_7ec7fc3a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css& */ "./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css&");
/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js");



;


/* normalize component */

var component = (0,_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__.default)(
  _Signal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__.default,
  _Signal_vue_vue_type_template_id_7ec7fc3a_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,
  _Signal_vue_vue_type_template_id_7ec7fc3a_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,
  false,
  null,
  "7ec7fc3a",
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "src/components/traffic-light-components/Signal.vue"
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (component.exports);

/***/ }),

/***/ "./src/App.vue?vue&type=script&lang=js&":
/*!**********************************************!*\
  !*** ./src/App.vue?vue&type=script&lang=js& ***!
  \**********************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/babel-loader/lib/index.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=script&lang=js&");
 /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__.default); 

/***/ }),

/***/ "./src/components/TrafficLight.vue?vue&type=script&lang=js&":
/*!******************************************************************!*\
  !*** ./src/components/TrafficLight.vue?vue&type=script&lang=js& ***!
  \******************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/babel-loader/lib/index.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrafficLight.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=script&lang=js&");
 /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__.default); 

/***/ }),

/***/ "./src/components/traffic-light-components/Signal.vue?vue&type=script&lang=js&":
/*!*************************************************************************************!*\
  !*** ./src/components/traffic-light-components/Signal.vue?vue&type=script&lang=js& ***!
  \*************************************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.r, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => __WEBPACK_DEFAULT_EXPORT__
/* harmony export */ });
/* harmony import */ var _node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signal.vue?vue&type=script&lang=js& */ "./node_modules/babel-loader/lib/index.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=script&lang=js&");
 /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_babel_loader_lib_index_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__.default); 

/***/ }),

/***/ "./src/App.vue?vue&type=style&index=0&lang=css&":
/*!******************************************************!*\
  !*** ./src/App.vue?vue&type=style&index=0&lang=css& ***!
  \******************************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/style-loader/dist/cjs.js!../node_modules/css-loader/dist/cjs.js!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=css& */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=style&index=0&lang=css&");


/***/ }),

/***/ "./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css&":
/*!**************************************************************************************************!*\
  !*** ./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css& ***!
  \**************************************************************************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_style_index_0_id_6a0838c9_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/style-loader/dist/cjs.js!../../node_modules/css-loader/dist/cjs.js!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css& */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=style&index=0&id=6a0838c9&scoped=true&lang=css&");


/***/ }),

/***/ "./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css&":
/*!*********************************************************************************************************************!*\
  !*** ./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css& ***!
  \*********************************************************************************************************************/
/*! namespace exports */
/*! exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_require__.r, __webpack_exports__, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_style_loader_dist_cjs_js_node_modules_css_loader_dist_cjs_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_style_index_0_id_7ec7fc3a_scoped_true_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/style-loader/dist/cjs.js!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css& */ "./node_modules/style-loader/dist/cjs.js!./node_modules/css-loader/dist/cjs.js!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=style&index=0&id=7ec7fc3a&scoped=true&lang=css&");


/***/ }),

/***/ "./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!****************************************************!*\
  !*** ./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \****************************************************/
/*! namespace exports */
/*! export render [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90& .render */
/*! export staticRenderFns [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90& .staticRenderFns */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* reexport safe */ _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.render,
/* harmony export */   "staticRenderFns": () => /* reexport safe */ _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns
/* harmony export */ });
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_App_vue_vue_type_template_id_7ba5bd90___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=template&id=7ba5bd90& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90&");


/***/ }),

/***/ "./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true&":
/*!************************************************************************************!*\
  !*** ./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true& ***!
  \************************************************************************************/
/*! namespace exports */
/*! export render [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true& .render */
/*! export staticRenderFns [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true& .staticRenderFns */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* reexport safe */ _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_template_id_6a0838c9_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,
/* harmony export */   "staticRenderFns": () => /* reexport safe */ _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_template_id_6a0838c9_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns
/* harmony export */ });
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_TrafficLight_vue_vue_type_template_id_6a0838c9_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true&");


/***/ }),

/***/ "./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true&":
/*!*******************************************************************************************************!*\
  !*** ./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true& ***!
  \*******************************************************************************************************/
/*! namespace exports */
/*! export render [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true& .render */
/*! export staticRenderFns [provided] [no usage info] [missing usage info prevents renaming] -> ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true& .staticRenderFns */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__, __webpack_exports__, __webpack_require__.d, __webpack_require__.r, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* reexport safe */ _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_template_id_7ec7fc3a_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,
/* harmony export */   "staticRenderFns": () => /* reexport safe */ _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_template_id_7ec7fc3a_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns
/* harmony export */ });
/* harmony import */ var _node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_loader_lib_index_js_vue_loader_options_Signal_vue_vue_type_template_id_7ec7fc3a_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true& */ "./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true&");


/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90&":
/*!*******************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/App.vue?vue&type=template&id=7ba5bd90& ***!
  \*******************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export render [provided] [no usage info] [missing usage info prevents renaming] */
/*! export staticRenderFns [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* binding */ render,
/* harmony export */   "staticRenderFns": () => /* binding */ staticRenderFns
/* harmony export */ });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { attrs: { id: "app" } }, [_c("router-view")], 1)
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true&":
/*!***************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/TrafficLight.vue?vue&type=template&id=6a0838c9&scoped=true& ***!
  \***************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export render [provided] [no usage info] [missing usage info prevents renaming] */
/*! export staticRenderFns [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* binding */ render,
/* harmony export */   "staticRenderFns": () => /* binding */ staticRenderFns
/* harmony export */ });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "div",
    { staticClass: "traffic-light" },
    _vm._l(_vm.signals, function(signal) {
      return _c("Signal", {
        key: signal.color,
        attrs: {
          color: signal.color,
          isActive: signal.color === _vm.activeColor,
          isDim: !(signal.color === _vm.activeColor)
        }
      })
    }),
    1
  )
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./src/components/traffic-light-components/Signal.vue?vue&type=template&id=7ec7fc3a&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************************************************/
/*! namespace exports */
/*! export render [provided] [no usage info] [missing usage info prevents renaming] */
/*! export staticRenderFns [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": () => /* binding */ render,
/* harmony export */   "staticRenderFns": () => /* binding */ staticRenderFns
/* harmony export */ });
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", {
    class: ["signal", _vm.color + "-signal", { "dim-signal": _vm.isDim }]
  })
}
var staticRenderFns = []
render._withStripped = true



/***/ }),

/***/ "./node_modules/vue-loader/lib/runtime/componentNormalizer.js":
/*!********************************************************************!*\
  !*** ./node_modules/vue-loader/lib/runtime/componentNormalizer.js ***!
  \********************************************************************/
/*! namespace exports */
/*! export default [provided] [no usage info] [missing usage info prevents renaming] */
/*! other exports [not provided] [no usage info] */
/*! runtime requirements: __webpack_require__.r, __webpack_exports__, __webpack_require__.d, __webpack_require__.* */
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => /* binding */ normalizeComponent
/* harmony export */ });
/* globals __VUE_SSR_CONTEXT__ */

// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).
// This module is a runtime utility for cleaner component module output and will
// be included in the final webpack user bundle.

function normalizeComponent (
  scriptExports,
  render,
  staticRenderFns,
  functionalTemplate,
  injectStyles,
  scopeId,
  moduleIdentifier, /* server only */
  shadowMode /* vue-cli only */
) {
  // Vue.extend constructor export interop
  var options = typeof scriptExports === 'function'
    ? scriptExports.options
    : scriptExports

  // render functions
  if (render) {
    options.render = render
    options.staticRenderFns = staticRenderFns
    options._compiled = true
  }

  // functional template
  if (functionalTemplate) {
    options.functional = true
  }

  // scopedId
  if (scopeId) {
    options._scopeId = 'data-v-' + scopeId
  }

  var hook
  if (moduleIdentifier) { // server build
    hook = function (context) {
      // 2.3 injection
      context =
        context || // cached call
        (this.$vnode && this.$vnode.ssrContext) || // stateful
        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional
      // 2.2 with runInNewContext: true
      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
        context = __VUE_SSR_CONTEXT__
      }
      // inject component styles
      if (injectStyles) {
        injectStyles.call(this, context)
      }
      // register component module identifier for async chunk inferrence
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier)
      }
    }
    // used by ssr in case component is cached and beforeCreate
    // never gets called
    options._ssrRegister = hook
  } else if (injectStyles) {
    hook = shadowMode
      ? function () {
        injectStyles.call(
          this,
          (options.functional ? this.parent : this).$root.$options.shadowRoot
        )
      }
      : injectStyles
  }

  if (hook) {
    if (options.functional) {
      // for template-only hot-reload because in that case the render fn doesn't
      // go through the normalizer
      options._injectStyles = hook
      // register for functional component in vue file
      var originalRender = options.render
      options.render = function renderWithStyleInjection (h, context) {
        hook.call(context)
        return originalRender(h, context)
      }
    } else {
      // inject component registration as beforeCreate hook
      var existing = options.beforeCreate
      options.beforeCreate = existing
        ? [].concat(existing, hook)
        : [hook]
    }
  }

  return {
    exports: scriptExports,
    options: options
  }
}


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/main.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci9zcmMvQXBwLnZ1ZSIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci9zcmMvY29tcG9uZW50cy9UcmFmZmljTGlnaHQudnVlIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yL3NyYy9jb21wb25lbnRzL3RyYWZmaWMtbGlnaHQtY29tcG9uZW50cy9TaWduYWwudnVlIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL3Z1ZS1yb3V0ZXIvZGlzdC92dWUtcm91dGVyLmVzbS5qcyIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci8uL25vZGVfbW9kdWxlcy92dWUvZGlzdC92dWUucnVudGltZS5lc20uanMiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvbWFpbi5qcyIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci8uL3NyYy9yb3V0ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvQXBwLnZ1ZT9iYzg4Iiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvVHJhZmZpY0xpZ2h0LnZ1ZT9jZGExIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvdHJhZmZpYy1saWdodC1jb21wb25lbnRzL1NpZ25hbC52dWU/MmI4NSIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci8uL3NyYy9BcHAudnVlPzNmNzAiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9UcmFmZmljTGlnaHQudnVlPzlkZDYiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy90cmFmZmljLWxpZ2h0LWNvbXBvbmVudHMvU2lnbmFsLnZ1ZT83NTVhIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vc3JjL0FwcC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9UcmFmZmljTGlnaHQudnVlIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvdHJhZmZpYy1saWdodC1jb21wb25lbnRzL1NpZ25hbC52dWUiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvQXBwLnZ1ZT9iMzliIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvVHJhZmZpY0xpZ2h0LnZ1ZT9iNjE5Iiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vc3JjL2NvbXBvbmVudHMvdHJhZmZpYy1saWdodC1jb21wb25lbnRzL1NpZ25hbC52dWU/NmJjYyIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci8uL3NyYy9BcHAudnVlPzlkY2EiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy9UcmFmZmljTGlnaHQudnVlP2E5YjIiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3IvLi9zcmMvY29tcG9uZW50cy90cmFmZmljLWxpZ2h0LWNvbXBvbmVudHMvU2lnbmFsLnZ1ZT8xMTZmIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3Ivd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly92dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3Z1ZS10cmFmZmljLWxpZ2h0LWVtdWxhdG9yL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3Ivd2VicGFjay9zdGFydHVwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwiX2kiLCJwdXNoIiwiX3NsaWNlZFRvQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRoSG9sZXMiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkiLCJfbm9uSXRlcmFibGVSZXN0IiwiVHlwZUVycm9yIiwibyIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwibiIsIk9iamVjdCIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsIkFycmF5IiwiZnJvbSIsInRlc3QiLCJsZW4iLCJhcnIyIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwidW5kZWZpbmVkIiwiX3MiLCJuZXh0IiwiZG9uZSIsInZhbHVlIiwiZXJyIiwiaXNBcnJheSIsIl9pdGVtIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImFzc2VydCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJFcnJvciIsIndhcm4iLCJwcm9jZXNzIiwiY29uc29sZSIsImV4dGVuZCIsImEiLCJiIiwia2V5IiwiZW5jb2RlUmVzZXJ2ZVJFIiwiZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyIiwiYyIsImNoYXJDb2RlQXQiLCJjb21tYVJFIiwiZW5jb2RlIiwic3RyIiwicmVwbGFjZSIsImRlY29kZSIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlc29sdmVRdWVyeSIsInF1ZXJ5IiwiZXh0cmFRdWVyeSIsIl9wYXJzZVF1ZXJ5IiwicGFyc2UiLCJwYXJzZVF1ZXJ5IiwicGFyc2VkUXVlcnkiLCJlIiwiY2FzdFF1ZXJ5UGFyYW1WYWx1ZSIsIlN0cmluZyIsInJlcyIsInRyaW0iLCJzcGxpdCIsImZvckVhY2giLCJwYXJhbSIsInBhcnRzIiwic2hpZnQiLCJ2YWwiLCJzdHJpbmdpZnlRdWVyeSIsIm9iaiIsImtleXMiLCJyZXN1bHQiLCJ2YWwyIiwiZmlsdGVyIiwieCIsInRyYWlsaW5nU2xhc2hSRSIsImNyZWF0ZVJvdXRlIiwicmVjb3JkIiwibG9jYXRpb24iLCJyZWRpcmVjdGVkRnJvbSIsInJvdXRlciIsIm9wdGlvbnMiLCJjbG9uZSIsInJvdXRlIiwibWV0YSIsInBhdGgiLCJoYXNoIiwicGFyYW1zIiwiZnVsbFBhdGgiLCJnZXRGdWxsUGF0aCIsIm1hdGNoZWQiLCJmb3JtYXRNYXRjaCIsImZyZWV6ZSIsIlNUQVJUIiwidW5zaGlmdCIsInBhcmVudCIsInJlZiIsIl9zdHJpbmdpZnlRdWVyeSIsImlzU2FtZVJvdXRlIiwiaXNPYmplY3RFcXVhbCIsImFLZXlzIiwic29ydCIsImJLZXlzIiwiZXZlcnkiLCJhVmFsIiwiYktleSIsImJWYWwiLCJpc0luY2x1ZGVkUm91dGUiLCJjdXJyZW50IiwidGFyZ2V0IiwiaW5kZXhPZiIsInF1ZXJ5SW5jbHVkZXMiLCJoYW5kbGVSb3V0ZUVudGVyZWQiLCJpbnN0YW5jZXMiLCJpbnN0YW5jZSIsImNicyIsImVudGVyZWRDYnMiLCJpJDEiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsIlZpZXciLCJmdW5jdGlvbmFsIiwicHJvcHMiLCJ0eXBlIiwiZGVmYXVsdCIsInJlbmRlciIsIl8iLCJjaGlsZHJlbiIsInJvdXRlclZpZXciLCJoIiwiJGNyZWF0ZUVsZW1lbnQiLCIkcm91dGUiLCJjYWNoZSIsIl9yb3V0ZXJWaWV3Q2FjaGUiLCJkZXB0aCIsImluYWN0aXZlIiwiX3JvdXRlclJvb3QiLCJ2bm9kZURhdGEiLCIkdm5vZGUiLCJrZWVwQWxpdmUiLCJfZGlyZWN0SW5hY3RpdmUiLCJfaW5hY3RpdmUiLCIkcGFyZW50Iiwicm91dGVyVmlld0RlcHRoIiwiY2FjaGVkRGF0YSIsImNhY2hlZENvbXBvbmVudCIsImNvbXBvbmVudCIsImNvbmZpZ1Byb3BzIiwiZmlsbFByb3BzaW5EYXRhIiwiY29tcG9uZW50cyIsInJlZ2lzdGVyUm91dGVJbnN0YW5jZSIsInZtIiwiaG9vayIsInByZXBhdGNoIiwidm5vZGUiLCJjb21wb25lbnRJbnN0YW5jZSIsImluaXQiLCJwcm9wc1RvUGFzcyIsInJlc29sdmVQcm9wcyIsImF0dHJzIiwiY29uZmlnIiwicmVzb2x2ZVBhdGgiLCJyZWxhdGl2ZSIsImJhc2UiLCJhcHBlbmQiLCJmaXJzdENoYXIiLCJjaGFyQXQiLCJzdGFjayIsInBvcCIsInNlZ21lbnRzIiwic2VnbWVudCIsInBhcnNlUGF0aCIsImhhc2hJbmRleCIsInF1ZXJ5SW5kZXgiLCJjbGVhblBhdGgiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwXzEiLCJwYXRoVG9SZWdleHAiLCJwYXJzZV8xIiwiY29tcGlsZV8xIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb25fMSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cF8xIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsIlJlZ0V4cCIsInRva2VucyIsImluZGV4IiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImV4ZWMiLCJtIiwiZXNjYXBlZCIsIm9mZnNldCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJ0b1VwcGVyQ2FzZSIsImVuY29kZUFzdGVyaXNrIiwibWF0Y2hlcyIsImZsYWdzIiwib3B0cyIsInByZXR0eSIsInRva2VuIiwiaiIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsInJlZ2V4cFRvUmVnZXhwIiwiZ3JvdXBzIiwibWF0Y2giLCJhcnJheVRvUmVnZXhwIiwicmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJzdHJpY3QiLCJlbmQiLCJlbmRzV2l0aERlbGltaXRlciIsInJlZ2V4cENvbXBpbGVDYWNoZSIsImNyZWF0ZSIsImZpbGxQYXJhbXMiLCJyb3V0ZU1zZyIsImZpbGxlciIsInBhdGhNYXRjaCIsIm5vcm1hbGl6ZUxvY2F0aW9uIiwicmF3IiwiX25vcm1hbGl6ZWQiLCJwYXJhbXMkMSIsInJhd1BhdGgiLCJwYXJzZWRQYXRoIiwiYmFzZVBhdGgiLCJ0b1R5cGVzIiwiZXZlbnRUeXBlcyIsIm5vb3AiLCJMaW5rIiwidG8iLCJyZXF1aXJlZCIsInRhZyIsImV4YWN0IiwiQm9vbGVhbiIsImFjdGl2ZUNsYXNzIiwiZXhhY3RBY3RpdmVDbGFzcyIsImFyaWFDdXJyZW50VmFsdWUiLCJldmVudCIsInRoaXMkMSIsIiRyb3V0ZXIiLCJyZXNvbHZlIiwiaHJlZiIsImNsYXNzZXMiLCJnbG9iYWxBY3RpdmVDbGFzcyIsImxpbmtBY3RpdmVDbGFzcyIsImdsb2JhbEV4YWN0QWN0aXZlQ2xhc3MiLCJsaW5rRXhhY3RBY3RpdmVDbGFzcyIsImFjdGl2ZUNsYXNzRmFsbGJhY2siLCJleGFjdEFjdGl2ZUNsYXNzRmFsbGJhY2siLCJjb21wYXJlVGFyZ2V0IiwiaGFuZGxlciIsImd1YXJkRXZlbnQiLCJvbiIsImNsaWNrIiwiY2xhc3MiLCJzY29wZWRTbG90IiwiJHNjb3BlZFNsb3RzIiwiJGhhc05vcm1hbCIsIm5hdmlnYXRlIiwiaXNBY3RpdmUiLCJpc0V4YWN0QWN0aXZlIiwiZmluZEFuY2hvciIsIiRzbG90cyIsImlzU3RhdGljIiwiYURhdGEiLCJoYW5kbGVyJDEiLCJldmVudCQxIiwiYUF0dHJzIiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImRlZmF1bHRQcmV2ZW50ZWQiLCJidXR0b24iLCJjdXJyZW50VGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwicHJldmVudERlZmF1bHQiLCJjaGlsZCIsIl9WdWUiLCJpbnN0YWxsIiwiVnVlIiwiaW5zdGFsbGVkIiwiaXNEZWYiLCJ2IiwicmVnaXN0ZXJJbnN0YW5jZSIsImNhbGxWYWwiLCIkb3B0aW9ucyIsIl9wYXJlbnRWbm9kZSIsIm1peGluIiwiYmVmb3JlQ3JlYXRlIiwiX3JvdXRlciIsInV0aWwiLCJkZWZpbmVSZWFjdGl2ZSIsImhpc3RvcnkiLCJkZXN0cm95ZWQiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsIl9yb3V0ZSIsInN0cmF0cyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsImJlZm9yZVJvdXRlRW50ZXIiLCJiZWZvcmVSb3V0ZUxlYXZlIiwiYmVmb3JlUm91dGVVcGRhdGUiLCJjcmVhdGVkIiwiaW5Ccm93c2VyIiwid2luZG93IiwiY3JlYXRlUm91dGVNYXAiLCJyb3V0ZXMiLCJvbGRQYXRoTGlzdCIsIm9sZFBhdGhNYXAiLCJvbGROYW1lTWFwIiwicGF0aExpc3QiLCJwYXRoTWFwIiwibmFtZU1hcCIsImFkZFJvdXRlUmVjb3JkIiwibCIsInNwbGljZSIsImZvdW5kIiwicGF0aE5hbWVzIiwibWF0Y2hBcyIsInBhdGhUb1JlZ2V4cE9wdGlvbnMiLCJub3JtYWxpemVkUGF0aCIsIm5vcm1hbGl6ZVBhdGgiLCJjYXNlU2Vuc2l0aXZlIiwicmVnZXgiLCJjb21waWxlUm91dGVSZWdleCIsInJlZGlyZWN0IiwiYmVmb3JlRW50ZXIiLCJzb21lIiwiY2hpbGRNYXRjaEFzIiwiYWxpYXMiLCJhbGlhc2VzIiwiYWxpYXNSb3V0ZSIsImNyZWF0ZU1hdGNoZXIiLCJhZGRSb3V0ZXMiLCJjdXJyZW50Um91dGUiLCJfY3JlYXRlUm91dGUiLCJwYXJhbU5hbWVzIiwicmVjb3JkJDEiLCJtYXRjaFJvdXRlIiwib3JpZ2luYWxSZWRpcmVjdCIsImhhc093blByb3BlcnR5IiwidGFyZ2V0UmVjb3JkIiwicmVzb2x2ZVJlY29yZFBhdGgiLCJyZXNvbHZlZFBhdGgiLCJhbGlhc2VkUGF0aCIsImFsaWFzZWRNYXRjaCIsImFsaWFzZWRSZWNvcmQiLCJUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwiZ2VuU3RhdGVLZXkiLCJ0b0ZpeGVkIiwiX2tleSIsImdldFN0YXRlS2V5Iiwic2V0U3RhdGVLZXkiLCJwb3NpdGlvblN0b3JlIiwic2V0dXBTY3JvbGwiLCJzY3JvbGxSZXN0b3JhdGlvbiIsInByb3RvY29sQW5kUGF0aCIsInByb3RvY29sIiwiaG9zdCIsImFic29sdXRlUGF0aCIsInN0YXRlQ29weSIsInN0YXRlIiwicmVwbGFjZVN0YXRlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZVBvcFN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZVNjcm9sbCIsImlzUG9wIiwiYXBwIiwiYmVoYXZpb3IiLCJzY3JvbGxCZWhhdmlvciIsIiRuZXh0VGljayIsInBvc2l0aW9uIiwiZ2V0U2Nyb2xsUG9zaXRpb24iLCJzaG91bGRTY3JvbGwiLCJ0aGVuIiwic2Nyb2xsVG9Qb3NpdGlvbiIsImNhdGNoIiwic2F2ZVNjcm9sbFBvc2l0aW9uIiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJnZXRFbGVtZW50UG9zaXRpb24iLCJlbCIsImRvY0VsIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJkb2NSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiZWxSZWN0IiwibGVmdCIsInRvcCIsImlzVmFsaWRQb3NpdGlvbiIsImlzTnVtYmVyIiwibm9ybWFsaXplUG9zaXRpb24iLCJub3JtYWxpemVPZmZzZXQiLCJoYXNoU3RhcnRzV2l0aE51bWJlclJFIiwiaXNPYmplY3QiLCJzZWxlY3RvciIsImdldEVsZW1lbnRCeUlkIiwicXVlcnlTZWxlY3RvciIsInN0eWxlIiwic2Nyb2xsVG8iLCJzdXBwb3J0c1B1c2hTdGF0ZSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwicHVzaFN0YXRlIiwidXJsIiwicnVuUXVldWUiLCJxdWV1ZSIsImZuIiwiY2IiLCJzdGVwIiwiTmF2aWdhdGlvbkZhaWx1cmVUeXBlIiwicmVkaXJlY3RlZCIsImFib3J0ZWQiLCJjYW5jZWxsZWQiLCJkdXBsaWNhdGVkIiwiY3JlYXRlTmF2aWdhdGlvblJlZGlyZWN0ZWRFcnJvciIsImNyZWF0ZVJvdXRlckVycm9yIiwic3RyaW5naWZ5Um91dGUiLCJjcmVhdGVOYXZpZ2F0aW9uRHVwbGljYXRlZEVycm9yIiwiZXJyb3IiLCJjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IiLCJjcmVhdGVOYXZpZ2F0aW9uQWJvcnRlZEVycm9yIiwiX2lzUm91dGVyIiwicHJvcGVydGllc1RvTG9nIiwiaXNFcnJvciIsImlzTmF2aWdhdGlvbkZhaWx1cmUiLCJlcnJvclR5cGUiLCJyZXNvbHZlQXN5bmNDb21wb25lbnRzIiwiaGFzQXN5bmMiLCJwZW5kaW5nIiwiZmxhdE1hcENvbXBvbmVudHMiLCJkZWYiLCJjaWQiLCJvbmNlIiwicmVzb2x2ZWREZWYiLCJpc0VTTW9kdWxlIiwicmVzb2x2ZWQiLCJyZWplY3QiLCJyZWFzb24iLCJtc2ciLCJjb21wIiwiZmxhdHRlbiIsImFwcGx5IiwiaGFzU3ltYm9sIiwidG9TdHJpbmdUYWciLCJfX2VzTW9kdWxlIiwiY2FsbGVkIiwiYXJncyIsImFyZ3VtZW50cyIsIkhpc3RvcnkiLCJub3JtYWxpemVCYXNlIiwicmVhZHkiLCJyZWFkeUNicyIsInJlYWR5RXJyb3JDYnMiLCJlcnJvckNicyIsImxpc3RlbmVycyIsImxpc3RlbiIsIm9uUmVhZHkiLCJlcnJvckNiIiwib25FcnJvciIsInRyYW5zaXRpb25UbyIsIm9uQ29tcGxldGUiLCJvbkFib3J0IiwicHJldiIsImNvbmZpcm1UcmFuc2l0aW9uIiwidXBkYXRlUm91dGUiLCJlbnN1cmVVUkwiLCJhZnRlckhvb2tzIiwiYWJvcnQiLCJsYXN0Um91dGVJbmRleCIsImxhc3RDdXJyZW50SW5kZXgiLCJyZXNvbHZlUXVldWUiLCJ1cGRhdGVkIiwiZGVhY3RpdmF0ZWQiLCJhY3RpdmF0ZWQiLCJleHRyYWN0TGVhdmVHdWFyZHMiLCJiZWZvcmVIb29rcyIsImV4dHJhY3RVcGRhdGVIb29rcyIsImVudGVyR3VhcmRzIiwiZXh0cmFjdEVudGVyR3VhcmRzIiwicmVzb2x2ZUhvb2tzIiwic2V0dXBMaXN0ZW5lcnMiLCJ0ZWFyZG93biIsImNsZWFudXBMaXN0ZW5lciIsImJhc2VFbCIsIm1heCIsIk1hdGgiLCJleHRyYWN0R3VhcmRzIiwicmVjb3JkcyIsImJpbmQiLCJyZXZlcnNlIiwiZ3VhcmRzIiwiZ3VhcmQiLCJleHRyYWN0R3VhcmQiLCJiaW5kR3VhcmQiLCJib3VuZFJvdXRlR3VhcmQiLCJiaW5kRW50ZXJHdWFyZCIsInJvdXRlRW50ZXJHdWFyZCIsIkhUTUw1SGlzdG9yeSIsIl9zdGFydExvY2F0aW9uIiwiZ2V0TG9jYXRpb24iLCJfX3Byb3RvX18iLCJleHBlY3RTY3JvbGwiLCJzdXBwb3J0c1Njcm9sbCIsImhhbmRsZVJvdXRpbmdFdmVudCIsImdvIiwiZnJvbVJvdXRlIiwiZ2V0Q3VycmVudExvY2F0aW9uIiwicGF0aG5hbWUiLCJ0b0xvd2VyQ2FzZSIsInNlYXJjaCIsIkhhc2hIaXN0b3J5IiwiZmFsbGJhY2siLCJjaGVja0ZhbGxiYWNrIiwiZW5zdXJlU2xhc2giLCJnZXRIYXNoIiwicmVwbGFjZUhhc2giLCJldmVudFR5cGUiLCJwdXNoSGFzaCIsImdldFVybCIsIkFic3RyYWN0SGlzdG9yeSIsInRhcmdldEluZGV4IiwiVnVlUm91dGVyIiwiYXBwcyIsIm1hdGNoZXIiLCJtb2RlIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiY29uZmlndXJhYmxlIiwiJG9uY2UiLCJoYW5kbGVJbml0aWFsU2Nyb2xsIiwicm91dGVPckVycm9yIiwiYmVmb3JlRWFjaCIsInJlZ2lzdGVySG9vayIsImJlZm9yZVJlc29sdmUiLCJhZnRlckVhY2giLCJQcm9taXNlIiwiYmFjayIsImZvcndhcmQiLCJnZXRNYXRjaGVkQ29tcG9uZW50cyIsImNyZWF0ZUhyZWYiLCJub3JtYWxpemVkVG8iLCJkZWZpbmVQcm9wZXJ0aWVzIiwidmVyc2lvbiIsInVzZSIsImVtcHR5T2JqZWN0IiwiaXNVbmRlZiIsImlzVHJ1ZSIsImlzRmFsc2UiLCJpc1ByaW1pdGl2ZSIsIl90b1N0cmluZyIsInRvUmF3VHlwZSIsImlzUGxhaW5PYmplY3QiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwicGFyc2VGbG9hdCIsImZsb29yIiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsImV4cGVjdHNMb3dlckNhc2UiLCJpc0J1aWx0SW5UYWciLCJpc1Jlc2VydmVkQXR0cmlidXRlIiwicmVtb3ZlIiwiaGFzT3duIiwiY2FjaGVkIiwiY2FjaGVkRm4iLCJoaXQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJwb2x5ZmlsbEJpbmQiLCJjdHgiLCJib3VuZEZuIiwiX2xlbmd0aCIsIm5hdGl2ZUJpbmQiLCJGdW5jdGlvbiIsInRvQXJyYXkiLCJzdGFydCIsInJldCIsIl9mcm9tIiwidG9PYmplY3QiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJnZXRUaW1lIiwia2V5c0EiLCJrZXlzQiIsImxvb3NlSW5kZXhPZiIsIlNTUl9BVFRSIiwiQVNTRVRfVFlQRVMiLCJMSUZFQ1lDTEVfSE9PS1MiLCJzaWxlbnQiLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJlcnJvckhhbmRsZXIiLCJ3YXJuSGFuZGxlciIsImlnbm9yZWRFbGVtZW50cyIsImtleUNvZGVzIiwiaXNSZXNlcnZlZFRhZyIsImlzUmVzZXJ2ZWRBdHRyIiwiaXNVbmtub3duRWxlbWVudCIsImdldFRhZ05hbWVzcGFjZSIsInBhcnNlUGxhdGZvcm1UYWdOYW1lIiwibXVzdFVzZVByb3AiLCJhc3luYyIsIl9saWZlY3ljbGVIb29rcyIsInVuaWNvZGVSZWdFeHAiLCJpc1Jlc2VydmVkIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiYmFpbFJFIiwiaGFzUHJvdG8iLCJpbldlZXgiLCJXWEVudmlyb25tZW50IiwicGxhdGZvcm0iLCJ3ZWV4UGxhdGZvcm0iLCJVQSIsImlzSUUiLCJpc0lFOSIsImlzRWRnZSIsImlzQW5kcm9pZCIsImlzSU9TIiwiaXNDaHJvbWUiLCJpc1BoYW50b21KUyIsImlzRkYiLCJuYXRpdmVXYXRjaCIsIndhdGNoIiwic3VwcG9ydHNQYXNzaXZlIiwiX2lzU2VydmVyIiwiaXNTZXJ2ZXJSZW5kZXJpbmciLCJnbG9iYWwiLCJlbnYiLCJWVUVfRU5WIiwiX19WVUVfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsImlzTmF0aXZlIiwiQ3RvciIsIlJlZmxlY3QiLCJvd25LZXlzIiwiX1NldCIsIlNldCIsInNldCIsImhhcyIsImFkZCIsImNsZWFyIiwidGlwIiwiZ2VuZXJhdGVDb21wb25lbnRUcmFjZSIsImZvcm1hdENvbXBvbmVudE5hbWUiLCJoYXNDb25zb2xlIiwiY2xhc3NpZnlSRSIsImNsYXNzaWZ5IiwidHJhY2UiLCJpbmNsdWRlRmlsZSIsIiRyb290IiwiX2lzVnVlIiwiX2NvbXBvbmVudFRhZyIsImZpbGUiLCJfX2ZpbGUiLCJ0cmVlIiwiY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlIiwibGFzdCIsInVpZCIsIkRlcCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJub3RpZnkiLCJ1cGRhdGUiLCJ0YXJnZXRTdGFjayIsInB1c2hUYXJnZXQiLCJwb3BUYXJnZXQiLCJWTm9kZSIsInRleHQiLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiaXNSb290SW5zZXJ0IiwiaXNDb21tZW50IiwiaXNDbG9uZWQiLCJpc09uY2UiLCJhc3luY01ldGEiLCJpc0FzeW5jUGxhY2Vob2xkZXIiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJjbG9uZWQiLCJhcnJheVByb3RvIiwiYXJyYXlNZXRob2RzIiwibWV0aG9kc1RvUGF0Y2giLCJtZXRob2QiLCJvcmlnaW5hbCIsIm11dGF0b3IiLCJvYiIsIl9fb2JfXyIsImluc2VydGVkIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJwcm90b0F1Z21lbnQiLCJjb3B5QXVnbWVudCIsIndhbGsiLCJkZWZpbmVSZWFjdGl2ZSQkMSIsIml0ZW1zIiwib2JzZXJ2ZSIsInNyYyIsImFzUm9vdERhdGEiLCJpc0V4dGVuc2libGUiLCJjdXN0b21TZXR0ZXIiLCJzaGFsbG93IiwicHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXR0ZXIiLCJzZXR0ZXIiLCJjaGlsZE9iIiwicmVhY3RpdmVHZXR0ZXIiLCJkZXBlbmRBcnJheSIsInJlYWN0aXZlU2V0dGVyIiwibmV3VmFsIiwiZGVsIiwicHJvcHNEYXRhIiwiZGVmYXVsdFN0cmF0IiwibWVyZ2VEYXRhIiwidG9WYWwiLCJmcm9tVmFsIiwibWVyZ2VEYXRhT3JGbiIsInBhcmVudFZhbCIsImNoaWxkVmFsIiwibWVyZ2VkRGF0YUZuIiwibWVyZ2VkSW5zdGFuY2VEYXRhRm4iLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImRlZHVwZUhvb2tzIiwiaG9va3MiLCJtZXJnZUFzc2V0cyIsImFzc2VydE9iamVjdFR5cGUiLCJrZXkkMSIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJjaGVja0NvbXBvbmVudHMiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJtZXJnZU9wdGlvbnMiLCJfYmFzZSIsImV4dGVuZHMiLCJtaXhpbnMiLCJtZXJnZUZpZWxkIiwic3RyYXQiLCJyZXNvbHZlQXNzZXQiLCJ3YXJuTWlzc2luZyIsImFzc2V0cyIsImNhbWVsaXplZElkIiwiUGFzY2FsQ2FzZUlkIiwidmFsaWRhdGVQcm9wIiwicHJvcE9wdGlvbnMiLCJwcm9wIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJnZXRQcm9wRGVmYXVsdFZhbHVlIiwicHJldlNob3VsZE9ic2VydmUiLCJhc3NlcnRQcm9wIiwiX3Byb3BzIiwiZ2V0VHlwZSIsInZhbGlkIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJnZXRJbnZhbGlkVHlwZU1lc3NhZ2UiLCJ2YWxpZGF0b3IiLCJzaW1wbGVDaGVja1JFIiwidCIsImlzU2FtZVR5cGUiLCJyZWNlaXZlZFR5cGUiLCJleHBlY3RlZFZhbHVlIiwic3R5bGVWYWx1ZSIsInJlY2VpdmVkVmFsdWUiLCJpc0V4cGxpY2FibGUiLCJpc0Jvb2xlYW4iLCJOdW1iZXIiLCJleHBsaWNpdFR5cGVzIiwiZWxlbSIsImhhbmRsZUVycm9yIiwiaW5mbyIsImN1ciIsImVycm9yQ2FwdHVyZWQiLCJnbG9iYWxIYW5kbGVFcnJvciIsImludm9rZVdpdGhFcnJvckhhbmRsaW5nIiwiX2hhbmRsZWQiLCJsb2dFcnJvciIsImlzVXNpbmdNaWNyb1Rhc2siLCJjYWxsYmFja3MiLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInRpbWVyRnVuYyIsInAiLCJzZXRUaW1lb3V0IiwiTXV0YXRpb25PYnNlcnZlciIsImNvdW50ZXIiLCJvYnNlcnZlciIsInRleHROb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwic2V0SW1tZWRpYXRlIiwibmV4dFRpY2siLCJfcmVzb2x2ZSIsImluaXRQcm94eSIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibWFyayIsIm1lYXN1cmUiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsIm5vcm1hbGl6ZUV2ZW50IiwicGFzc2l2ZSIsIm9uY2UkJDEiLCJjcmVhdGVGbkludm9rZXIiLCJmbnMiLCJpbnZva2VyIiwiYXJndW1lbnRzJDEiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbGRPbiIsInJlbW92ZSQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyIiwib2xkIiwibWVyZ2VWTm9kZUhvb2siLCJob29rS2V5Iiwib2xkSG9vayIsIndyYXBwZWRIb29rIiwibWVyZ2VkIiwiZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSIsImtleUluTG93ZXJDYXNlIiwiY2hlY2tQcm9wIiwicHJlc2VydmUiLCJzaW1wbGVOb3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUNoaWxkcmVuIiwibm9ybWFsaXplQXJyYXlDaGlsZHJlbiIsImlzVGV4dE5vZGUiLCJuZXN0ZWRJbmRleCIsImxhc3RJbmRleCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5Iiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwicmVuZGVyU2xvdCIsImJpbmRPYmplY3QiLCJzY29wZWRTbG90Rm4iLCJub2RlcyIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibG9vcCIsImRvbVByb3BzIiwiY2FtZWxpemVkS2V5IiwiaHlwaGVuYXRlZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJzdGF0aWNSZW5kZXJGbnMiLCJtYXJrU3RhdGljIiwibWFya09uY2UiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImNvbnRlbnRIYXNoS2V5IiwiYmluZER5bmFtaWNLZXlzIiwiYmFzZU9iaiIsInZhbHVlcyIsInByZXBlbmRNb2RpZmllciIsInN5bWJvbCIsImluc3RhbGxSZW5kZXJIZWxwZXJzIiwiX28iLCJfbCIsIl90IiwiX3EiLCJfbSIsIl9mIiwiX2siLCJfYiIsIl92IiwiX3UiLCJfZyIsIl9wIiwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLCJjb250ZXh0Vm0iLCJfb3JpZ2luYWwiLCJpc0NvbXBpbGVkIiwiX2NvbXBpbGVkIiwibmVlZE5vcm1hbGl6YXRpb24iLCJpbmplY3Rpb25zIiwic2NvcGVkU2xvdHMiLCJfc2NvcGVJZCIsIl9jIiwiZCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwibWVyZ2VQcm9wcyIsInJlbmRlckNvbnRleHQiLCJjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0Iiwidm5vZGVzIiwiZGV2dG9vbHNNZXRhIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsIm1vdW50ZWROb2RlIiwiY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZSIsImFjdGl2ZUluc3RhbmNlIiwiJG1vdW50Iiwib2xkVm5vZGUiLCJ1cGRhdGVDaGlsZENvbXBvbmVudCIsImluc2VydCIsIl9pc01vdW50ZWQiLCJjYWxsSG9vayIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImRlc3Ryb3kiLCIkZGVzdHJveSIsImRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImluc3RhbGxDb21wb25lbnRIb29rcyIsIl9pc0NvbXBvbmVudCIsImlubGluZVRlbXBsYXRlIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJjYWxsYmFjayIsIlNJTVBMRV9OT1JNQUxJWkUiLCJBTFdBWVNfTk9STUFMSVpFIiwibm9ybWFsaXphdGlvblR5cGUiLCJhbHdheXNOb3JtYWxpemUiLCJfY3JlYXRlRWxlbWVudCIsImlzIiwicHJlIiwiYXBwbHlOUyIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwiZm9yY2UiLCJpbml0UmVuZGVyIiwiX3Zub2RlIiwicGFyZW50Vm5vZGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCJwYXJlbnREYXRhIiwiaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50IiwiX3BhcmVudExpc3RlbmVycyIsImN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSIsInJlbmRlck1peGluIiwiX3JlbmRlciIsInJlbmRlckVycm9yIiwiZW5zdXJlQ3RvciIsImZhY3RvcnkiLCJlcnJvckNvbXAiLCJvd25lciIsIm93bmVycyIsImxvYWRpbmciLCJsb2FkaW5nQ29tcCIsInN5bmMiLCJ0aW1lckxvYWRpbmciLCJ0aW1lclRpbWVvdXQiLCIkb24iLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsIiRmb3JjZVVwZGF0ZSIsImNsZWFyVGltZW91dCIsImRlbGF5IiwidGltZW91dCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJpbml0RXZlbnRzIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRlbWl0IiwibG93ZXJDYXNlRXZlbnQiLCJzZXRBY3RpdmVJbnN0YW5jZSIsInByZXZBY3RpdmVJbnN0YW5jZSIsImluaXRMaWZlY3ljbGUiLCIkY2hpbGRyZW4iLCIkcmVmcyIsIl93YXRjaGVyIiwibGlmZWN5Y2xlTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsIl93YXRjaGVycyIsIl9kYXRhIiwibW91bnRDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsInVwZGF0ZUNvbXBvbmVudCIsIl9uYW1lIiwiX3VpZCIsIldhdGNoZXIiLCJiZWZvcmUiLCJyZW5kZXJDaGlsZHJlbiIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiTUFYX1VQREFURV9DT1VOVCIsImFjdGl2YXRlZENoaWxkcmVuIiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJyZXNldFNjaGVkdWxlclN0YXRlIiwiY3VycmVudEZsdXNoVGltZXN0YW1wIiwiZ2V0Tm93IiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsInJ1biIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJjYWxsQWN0aXZhdGVkSG9va3MiLCJjYWxsVXBkYXRlZEhvb2tzIiwiZW1pdCIsInF1ZXVlV2F0Y2hlciIsInVpZCQyIiwiZXhwT3JGbiIsImlzUmVuZGVyV2F0Y2hlciIsImRlZXAiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImNsZWFudXBEZXBzIiwidG1wIiwib2xkVmFsdWUiLCJldmFsdWF0ZSIsInNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiIsInNvdXJjZUtleSIsInByb3h5R2V0dGVyIiwicHJveHlTZXR0ZXIiLCJpbml0U3RhdGUiLCJpbml0UHJvcHMiLCJpbml0TWV0aG9kcyIsImluaXREYXRhIiwiaW5pdENvbXB1dGVkIiwiaW5pdFdhdGNoIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiZ2V0RGF0YSIsImNvbXB1dGVkV2F0Y2hlck9wdGlvbnMiLCJ3YXRjaGVycyIsIl9jb21wdXRlZFdhdGNoZXJzIiwiaXNTU1IiLCJ1c2VyRGVmIiwiZGVmaW5lQ29tcHV0ZWQiLCJzaG91bGRDYWNoZSIsImNyZWF0ZUNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlR2V0dGVySW52b2tlciIsImNvbXB1dGVkR2V0dGVyIiwiY3JlYXRlV2F0Y2hlciIsIiR3YXRjaCIsInN0YXRlTWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInVud2F0Y2hGbiIsInVpZCQzIiwiaW5pdE1peGluIiwiX2luaXQiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwiY2FjaGVkU3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5pdE1peGluJDEiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIlZ1ZUNvbXBvbmVudCIsImluaXRQcm9wcyQxIiwiaW5pdENvbXB1dGVkJDEiLCJDb21wIiwiaW5pdEFzc2V0UmVnaXN0ZXJzIiwiZGVmaW5pdGlvbiIsImdldENvbXBvbmVudE5hbWUiLCJwcnVuZUNhY2hlIiwia2VlcEFsaXZlSW5zdGFuY2UiLCJjYWNoZWROb2RlIiwicHJ1bmVDYWNoZUVudHJ5IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJtb3VudGVkIiwicmVmJDEiLCJwYXJzZUludCIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsImRlbGV0ZSIsIm9ic2VydmFibGUiLCJzc3JDb250ZXh0IiwiYWNjZXB0VmFsdWUiLCJhdHRyIiwiaXNFbnVtZXJhdGVkQXR0ciIsImlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSIsImNvbnZlcnRFbnVtZXJhdGVkVmFsdWUiLCJpc0ZhbHN5QXR0clZhbHVlIiwiaXNCb29sZWFuQXR0ciIsInhsaW5rTlMiLCJpc1hsaW5rIiwiZ2V0WGxpbmtQcm9wIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGUiLCJtZXJnZUNsYXNzRGF0YSIsInJlbmRlckNsYXNzIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmeUFycmF5Iiwic3RyaW5naWZ5T2JqZWN0Iiwic3RyaW5naWZpZWQiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiSFRNTFVua25vd25FbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJpc1RleHRJbnB1dFR5cGUiLCJzZWxlY3RlZCIsImNyZWF0ZUVsZW1lbnQkMSIsInRhZ05hbWUiLCJtdWx0aXBsZSIsInNldEF0dHJpYnV0ZSIsImNyZWF0ZUVsZW1lbnROUyIsIm5hbWVzcGFjZSIsImNyZWF0ZUNvbW1lbnQiLCJpbnNlcnRCZWZvcmUiLCJuZXdOb2RlIiwicmVmZXJlbmNlTm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJuZXh0U2libGluZyIsInNldFRleHRDb250ZW50IiwidGV4dENvbnRlbnQiLCJzZXRTdHlsZVNjb3BlIiwic2NvcGVJZCIsIm5vZGVPcHMiLCJyZWdpc3RlclJlZiIsImlzUmVtb3ZhbCIsInJlZnMiLCJyZWZJbkZvciIsImVtcHR5Tm9kZSIsInNhbWVWbm9kZSIsInNhbWVJbnB1dFR5cGUiLCJ0eXBlQSIsInR5cGVCIiwiY3JlYXRlS2V5VG9PbGRJZHgiLCJiZWdpbklkeCIsImVuZElkeCIsImNyZWF0ZVBhdGNoRnVuY3Rpb24iLCJiYWNrZW5kIiwiZW1wdHlOb2RlQXQiLCJjcmVhdGVSbUNiIiwiY2hpbGRFbG0iLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsImlubmVyTm9kZSIsInRyYW5zaXRpb24iLCJhY3RpdmF0ZSIsInJlZiQkMSIsImNoZWNrRHVwbGljYXRlS2V5cyIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwic3RhcnRJZHgiLCJpbnZva2VEZXN0cm95SG9vayIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwidXBkYXRlQ2hpbGRyZW4iLCJvbGRDaCIsIm5ld0NoIiwicmVtb3ZlT25seSIsIm9sZFN0YXJ0SWR4IiwibmV3U3RhcnRJZHgiLCJvbGRFbmRJZHgiLCJvbGRTdGFydFZub2RlIiwib2xkRW5kVm5vZGUiLCJuZXdFbmRJZHgiLCJuZXdTdGFydFZub2RlIiwibmV3RW5kVm5vZGUiLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJjYW5Nb3ZlIiwicGF0Y2hWbm9kZSIsImZpbmRJZHhJbk9sZCIsInNlZW5LZXlzIiwiaHlkcmF0ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImFzc2VydE5vZGVNYXRjaCIsImhhc0NoaWxkTm9kZXMiLCJpbm5lckhUTUwiLCJjaGlsZHJlbk1hdGNoIiwiZmlyc3RDaGlsZCIsImNoaWxkTm9kZXMiLCJmdWxsSW52b2tlIiwibm9kZVR5cGUiLCJwYXRjaCIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwiaSQyIiwidXBkYXRlRGlyZWN0aXZlcyIsInVuYmluZERpcmVjdGl2ZXMiLCJpc0NyZWF0ZSIsImlzRGVzdHJveSIsIm9sZERpcnMiLCJub3JtYWxpemVEaXJlY3RpdmVzJDEiLCJuZXdEaXJzIiwiZGlyc1dpdGhJbnNlcnQiLCJkaXJzV2l0aFBvc3RwYXRjaCIsIm9sZERpciIsImRpciIsImNhbGxIb29rJDEiLCJvbGRBcmciLCJhcmciLCJjb21wb25lbnRVcGRhdGVkIiwiY2FsbEluc2VydCIsImVtcHR5TW9kaWZpZXJzIiwibW9kaWZpZXJzIiwiZ2V0UmF3RGlyTmFtZSIsInJhd05hbWUiLCJiYXNlTW9kdWxlcyIsInVwZGF0ZUF0dHJzIiwiaW5oZXJpdEF0dHJzIiwib2xkQXR0cnMiLCJzZXRBdHRyIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJiYXNlU2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiX19pZXBoIiwiYmxvY2tlciIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInVwZGF0ZUNsYXNzIiwib2xkRGF0YSIsImNscyIsInRyYW5zaXRpb25DbGFzcyIsIl90cmFuc2l0aW9uQ2xhc3NlcyIsIl9wcmV2Q2xhc3MiLCJrbGFzcyIsIlJBTkdFX1RPS0VOIiwiQ0hFQ0tCT1hfUkFESU9fVE9LRU4iLCJub3JtYWxpemVFdmVudHMiLCJjaGFuZ2UiLCJ0YXJnZXQkMSIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsIm93bmVyRG9jdW1lbnQiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJldmVudHMiLCJzdmdDb250YWluZXIiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsIl92TW9kaWZpZXJzIiwibnVtYmVyIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwibGlzdERlbGltaXRlciIsInByb3BlcnR5RGVsaW1pdGVyIiwibm9ybWFsaXplU3R5bGVEYXRhIiwibm9ybWFsaXplU3R5bGVCaW5kaW5nIiwic3RhdGljU3R5bGUiLCJiaW5kaW5nU3R5bGUiLCJnZXRTdHlsZSIsImNoZWNrQ2hpbGQiLCJzdHlsZURhdGEiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImVtcHR5U3R5bGUiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJhZGRDbGFzcyIsImNsYXNzTGlzdCIsInJlbW92ZUNsYXNzIiwidGFyIiwicmVzb2x2ZVRyYW5zaXRpb24iLCJjc3MiLCJhdXRvQ3NzVHJhbnNpdGlvbiIsImVudGVyQ2xhc3MiLCJlbnRlclRvQ2xhc3MiLCJlbnRlckFjdGl2ZUNsYXNzIiwibGVhdmVDbGFzcyIsImxlYXZlVG9DbGFzcyIsImxlYXZlQWN0aXZlQ2xhc3MiLCJoYXNUcmFuc2l0aW9uIiwiVFJBTlNJVElPTiIsIkFOSU1BVElPTiIsInRyYW5zaXRpb25Qcm9wIiwidHJhbnNpdGlvbkVuZEV2ZW50IiwiYW5pbWF0aW9uUHJvcCIsImFuaW1hdGlvbkVuZEV2ZW50Iiwib250cmFuc2l0aW9uZW5kIiwib253ZWJraXR0cmFuc2l0aW9uZW5kIiwib25hbmltYXRpb25lbmQiLCJvbndlYmtpdGFuaW1hdGlvbmVuZCIsInJhZiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm5leHRGcmFtZSIsImFkZFRyYW5zaXRpb25DbGFzcyIsInRyYW5zaXRpb25DbGFzc2VzIiwicmVtb3ZlVHJhbnNpdGlvbkNsYXNzIiwid2hlblRyYW5zaXRpb25FbmRzIiwiZ2V0VHJhbnNpdGlvbkluZm8iLCJwcm9wQ291bnQiLCJlbmRlZCIsIm9uRW5kIiwidHJhbnNmb3JtUkUiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwidHJhbnNpdGlvbkRlbGF5cyIsInRyYW5zaXRpb25EdXJhdGlvbnMiLCJ0cmFuc2l0aW9uVGltZW91dCIsImdldFRpbWVvdXQiLCJhbmltYXRpb25EZWxheXMiLCJhbmltYXRpb25EdXJhdGlvbnMiLCJhbmltYXRpb25UaW1lb3V0IiwiaGFzVHJhbnNmb3JtIiwiZGVsYXlzIiwiZHVyYXRpb25zIiwidG9NcyIsInMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfZW50ZXJDYiIsImFwcGVhckNsYXNzIiwiYXBwZWFyVG9DbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJkdXJhdGlvbiIsInRyYW5zaXRpb25Ob2RlIiwiaXNBcHBlYXIiLCJzdGFydENsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJiZWZvcmVMZWF2ZSIsImFmdGVyTGVhdmUiLCJsZWF2ZUNhbmNlbGxlZCIsImRlbGF5TGVhdmUiLCJleHBsaWNpdExlYXZlRHVyYXRpb24iLCJwZXJmb3JtTGVhdmUiLCJpbnZva2VyRm5zIiwiX2VudGVyIiwicGxhdGZvcm1Nb2R1bGVzIiwidm1vZGVsIiwidHJpZ2dlciIsImRpcmVjdGl2ZSIsImJpbmRpbmciLCJfdk9wdGlvbnMiLCJzZXRTZWxlY3RlZCIsImdldFZhbHVlIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsIm5lZWRSZXNldCIsImhhc05vTWF0Y2hpbmdPcHRpb24iLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwibG9jYXRlTm9kZSIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJkaXNwbGF5IiwidW5iaW5kIiwicGxhdGZvcm1EaXJlY3RpdmVzIiwidHJhbnNpdGlvblByb3BzIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJwbGFjZWhvbGRlciIsInJhd0NoaWxkIiwiaGFzUGFyZW50VHJhbnNpdGlvbiIsImlzU2FtZUNoaWxkIiwib2xkQ2hpbGQiLCJpc05vdFRleHROb2RlIiwiaXNWU2hvd0RpcmVjdGl2ZSIsIlRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwibW92ZUNsYXNzIiwiVHJhbnNpdGlvbkdyb3VwIiwiYmVmb3JlTW91bnQiLCJrZXB0IiwicHJldkNoaWxkcmVuIiwicmF3Q2hpbGRyZW4iLCJ0cmFuc2l0aW9uRGF0YSIsInJlbW92ZWQiLCJjJDEiLCJwb3MiLCJoYXNNb3ZlIiwiY2FsbFBlbmRpbmdDYnMiLCJyZWNvcmRQb3NpdGlvbiIsImFwcGx5VHJhbnNsYXRpb24iLCJfcmVmbG93IiwiYm9keSIsIm9mZnNldEhlaWdodCIsIm1vdmVkIiwidHJhbnNmb3JtIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwibmV3UG9zIiwib2xkUG9zIiwiZHgiLCJkeSIsInBsYXRmb3JtQ29tcG9uZW50cyIsIkFwcCIsIlRyYWZmaWNMaWdodCIsImFjdGl2ZUNvbG9yIiwidGltZXIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBYTtBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLHNCQUFWLEVBQWtDO0FBQ2pELE1BQUlDLElBQUksR0FBRyxFQUFYLENBRGlELENBQ2xDOztBQUVmQSxNQUFJLENBQUNDLFFBQUwsR0FBZ0IsU0FBU0EsUUFBVCxHQUFvQjtBQUNsQyxXQUFPLEtBQUtDLEdBQUwsQ0FBUyxVQUFVQyxJQUFWLEVBQWdCO0FBQzlCLFVBQUlDLE9BQU8sR0FBR0wsc0JBQXNCLENBQUNJLElBQUQsQ0FBcEM7O0FBRUEsVUFBSUEsSUFBSSxDQUFDLENBQUQsQ0FBUixFQUFhO0FBQ1gsZUFBTyxVQUFVRSxNQUFWLENBQWlCRixJQUFJLENBQUMsQ0FBRCxDQUFyQixFQUEwQixJQUExQixFQUFnQ0UsTUFBaEMsQ0FBdUNELE9BQXZDLEVBQWdELEdBQWhELENBQVA7QUFDRDs7QUFFRCxhQUFPQSxPQUFQO0FBQ0QsS0FSTSxFQVFKRSxJQVJJLENBUUMsRUFSRCxDQUFQO0FBU0QsR0FWRCxDQUhpRCxDQWE5QztBQUNIOzs7QUFHQU4sTUFBSSxDQUFDTyxDQUFMLEdBQVMsVUFBVUMsT0FBVixFQUFtQkMsVUFBbkIsRUFBK0JDLE1BQS9CLEVBQXVDO0FBQzlDLFFBQUksT0FBT0YsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQjtBQUNBQSxhQUFPLEdBQUcsQ0FBQyxDQUFDLElBQUQsRUFBT0EsT0FBUCxFQUFnQixFQUFoQixDQUFELENBQVY7QUFDRDs7QUFFRCxRQUFJRyxzQkFBc0IsR0FBRyxFQUE3Qjs7QUFFQSxRQUFJRCxNQUFKLEVBQVk7QUFDVixXQUFLLElBQUlILENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUcsS0FBS0ssTUFBekIsRUFBaUNM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O0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7VUNqR0E7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7O1VBRUE7VUFDQTs7VUFFQTtVQUNBO1VBQ0E7Ozs7O1dDckJBO1dBQ0E7V0FDQTtXQUNBO1dBQ0E7V0FDQSxnQ0FBZ0MsWUFBWTtXQUM1QztXQUNBLEU7Ozs7O1dDUEE7V0FDQTtXQUNBO1dBQ0E7V0FDQSx3Q0FBd0MseUNBQXlDO1dBQ2pGO1dBQ0E7V0FDQSxFOzs7OztXQ1BBO1dBQ0E7V0FDQTtXQUNBO1dBQ0EsRUFBRTtXQUNGO1dBQ0E7V0FDQSxDQUFDLEk7Ozs7O1dDUEQsc0Y7Ozs7O1dDQUE7V0FDQTtXQUNBO1dBQ0Esc0RBQXNELGtCQUFrQjtXQUN4RTtXQUNBLCtDQUErQyxjQUFjO1dBQzdELEU7Ozs7VUNOQTtVQUNBO1VBQ0E7VUFDQSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oJycpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwidW5kZWZpbmVkXCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdICE9IG51bGwpIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfVxuXG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pIHtcbiAgdmFyIF9pdGVtID0gX3NsaWNlZFRvQXJyYXkoaXRlbSwgNCksXG4gICAgICBjb250ZW50ID0gX2l0ZW1bMV0sXG4gICAgICBjc3NNYXBwaW5nID0gX2l0ZW1bM107XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8ICcnKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59OyIsIjx0ZW1wbGF0ZT5cbiAgPGRpdiBpZD1cImFwcFwiPlxuICAgIDxyb3V0ZXItdmlldy8+XG4gIDwvZGl2PlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IFRyYWZmaWNMaWdodCBmcm9tIFwiLi9jb21wb25lbnRzL1RyYWZmaWNMaWdodC52dWVcIlxuICBleHBvcnQgZGVmYXVsdCB7XG4gICAgY29tcG9uZW50czoge1xuICAgICAgVHJhZmZpY0xpZ2h0XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuI2FwcCB7XG4gIGZvbnQtZmFtaWx5OiBBdmVuaXIsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGNvbG9yOiAjMmMzZTUwO1xufVxuPC9zdHlsZT5cbiIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IGNsYXNzPVwidHJhZmZpYy1saWdodFwiPlxyXG4gICAgPFNpZ25hbFxyXG4gICAgICB2LWZvcj1cInNpZ25hbCBpbiBzaWduYWxzXCJcclxuICAgICAgOmtleT1cInNpZ25hbC5jb2xvclwiXHJcbiAgICAgIDpjb2xvcj1cInNpZ25hbC5jb2xvclwiXHJcbiAgICAgIDppc0FjdGl2ZT1cInNpZ25hbC5jb2xvciA9PT0gYWN0aXZlQ29sb3JcIlxyXG4gICAgICA6aXNEaW09XCIhKHNpZ25hbC5jb2xvciA9PT0gYWN0aXZlQ29sb3IpXCJcclxuICAgIC8+XHJcbiAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gIGltcG9ydCBTaWduYWwgZnJvbSAnLi90cmFmZmljLWxpZ2h0LWNvbXBvbmVudHMvU2lnbmFsLnZ1ZSc7XHJcbiAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbmFtZTogJ1RyYWZmaWNMaWdodCcsXHJcbiAgICBjb21wb25lbnRzOiB7XHJcbiAgICAgIFNpZ25hbFxyXG4gICAgfSxcclxuICAgIHByb3BzOiB7XHJcbiAgICAgIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXHJcbiAgICAgIHRpbWVyOiBOdW1iZXJcclxuICAgIH0sXHJcbiAgICBkYXRhKCkge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHNpZ25hbHM6IFtcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgY29sb3I6ICdyZWQnLFxyXG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2VcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAneWVsbG93JyxcclxuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBjb2xvcjogJ2dyZWVuJyxcclxuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgXSxcclxuICAgICAgICBzaWduYWxzT3JkZXI6IHRoaXMuc2V0U2lnbmFsc09yZGVyQnlEZWZhdWx0KCksXHJcblxyXG4gICAgICB9XHJcbiAgICB9LFxyXG4gICAgY3JlYXRlZCgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZWQgJyArIHRoaXMuYWN0aXZlQ29sb3IpXHJcbiAgICAgIHRoaXMuc3RhcnRUaW1lcigpXHJcbiAgICB9LFxyXG4gICAgdXBkYXRlZCgpIHtcclxuICAgICAgY29uc29sZS5sb2coJ3VwZGF0ZWQgJyArIHRoaXMuYWN0aXZlQ29sb3IpXHJcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuc2lnbmFsc09yZGVyKVxyXG4gICAgICB0aGlzLnN0YXJ0VGltZXIoKVxyXG4gICAgfSxcclxuICAgIHdhdGNoOiB7XHJcbiAgICAgIC8vICdzaWduYWxzT3JkZXInOiAoKSA9PiB7XHJcbiAgICAgIC8vICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NpZ25hbHNPcmRlcicsIEpTT04uc3RyaW5naWZ5KHRoaXMuc2lnbmFsc09yZGVyKSlcclxuICAgICAgLy8gfVxyXG4gICAgfSxcclxuICAgIG1ldGhvZHM6IHtcclxuICAgICAgLy8gZ2V0SXRGcm9tTG9jYWxTdG9yYWdlKGtleSkge1xyXG4gICAgICAvLyAgIGNvbnN0IGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpXHJcbiAgICAgIC8vICAgaWYgKGl0ZW0pIHtcclxuICAgICAgLy8gICAgIHJldHVybiBKU09OLnBhcnNlKGl0ZW0pXHJcbiAgICAgIC8vICAgfSBlbHNlIHtcclxuICAgICAgLy8gICAgIHJldHVybiBudWxsXHJcbiAgICAgIC8vICAgfVxyXG4gICAgICAvLyB9LFxyXG4gICAgICBzdGFydFRpbWVyKCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goYC8ke3RoaXMuc2lnbmFsc09yZGVyWzFdfWApXHJcbiAgICAgICAgICB0aGlzLnNpZ25hbHNPcmRlci5wdXNoKHRoaXMuc2lnbmFsc09yZGVyLnNoaWZ0KCkpXHJcbiAgICAgICAgfSwgdGhpcy50aW1lcilcclxuICAgICAgfSxcclxuICAgICAgc2V0U2lnbmFsc09yZGVyQnlEZWZhdWx0KCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5hY3RpdmVDb2xvcikge1xyXG4gICAgICAgICAgY2FzZSAncmVkJzpcclxuICAgICAgICAgICAgcmV0dXJuIFsncmVkJywgJ3llbGxvdycsICdncmVlbiddXHJcbiAgICAgICAgICBjYXNlICd5ZWxsb3cnOlxyXG4gICAgICAgICAgICByZXR1cm4gWyd5ZWxsb3cnLCAnZ3JlZW4nLCAncmVkJ11cclxuICAgICAgICAgIGNhc2UgJ2dyZWVuJzpcclxuICAgICAgICAgICAgcmV0dXJuIFsnZ3JlZW4nLCAncmVkJywgJ3llbGxvdyddXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG4gIC50cmFmZmljLWxpZ2h0IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgaGVpZ2h0OiA1MDBweDtcclxuICAgIG1hcmdpbjogNTBweCBhdXRvO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjgzKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwcHg7XHJcbiAgfVxyXG48L3N0eWxlPiIsIjx0ZW1wbGF0ZT5cclxuICA8ZGl2IDpjbGFzcz1cIlsnc2lnbmFsJywgY29sb3IrJy1zaWduYWwnLCB7J2RpbS1zaWduYWwnOiBpc0RpbX1dXCI+PC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6ICdTaWduYWwnLFxyXG4gICAgcHJvcHM6IHtcclxuICAgICAgY29sb3I6IFN0cmluZyxcclxuICAgICAgaXNBY3RpdmU6IEJvb2xlYW4sXHJcbiAgICAgIGlzRGltOiBCb29sZWFuXHJcbiAgICB9XHJcbiAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQ+XHJcbiAgLnNpZ25hbCB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogMTAwcHg7XHJcbiAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgYm9yZGVyOiAxMHB4IHNvbGlkIGJsYWNrO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgYm94LXNoYWRvdzogMCAwIDEwcHggYmxhY2sgaW5zZXQ7XHJcbiAgfVxyXG4gIC5yZWQtc2lnbmFsIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcclxuICB9XHJcbiAgLnllbGxvdy1zaWduYWwge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xyXG4gIH1cclxuICAuZ3JlZW4tc2lnbmFsIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG4gIH1cclxuICAuZGltLXNpZ25hbDphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAtMXB4O1xyXG4gICAgcmlnaHQ6IC0xcHg7XHJcbiAgICBsZWZ0OiAtMXB4O1xyXG4gICAgYm90dG9tOiAtMXB4O1xyXG4gICAgei1pbmRleDogMTAwO1xyXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDtcclxuICAgIG9wYWNpdHk6IDAuODtcclxuICB9XHJcbiAgLmJsaW5rOmFmdGVyIHtcclxuICAgIGFuaW1hdGlvbjogYmxpbmsgMC42cyBpbmZpbml0ZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBibGluayB7XHJcbiAgICAwJSB7IG9wYWNpdHk6IDAuOCB9XHJcbiAgICA1MCUgeyBvcGFjaXR5OiAwLjEgfVxyXG4gICAgMTAwJSB7IG9wYWNpdHk6IDAuOCB9XHJcbiAgfVxyXG48L3N0eWxlPiIsIi8qIVxuICAqIHZ1ZS1yb3V0ZXIgdjMuNC45XG4gICogKGMpIDIwMjAgRXZhbiBZb3VcbiAgKiBAbGljZW5zZSBNSVRcbiAgKi9cbi8qICAqL1xuXG5mdW5jdGlvbiBhc3NlcnQgKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcigoXCJbdnVlLXJvdXRlcl0gXCIgKyBtZXNzYWdlKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB3YXJuIChjb25kaXRpb24sIG1lc3NhZ2UpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmRpdGlvbikge1xuICAgIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlLndhcm4oKFwiW3Z1ZS1yb3V0ZXJdIFwiICsgbWVzc2FnZSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGV4dGVuZCAoYSwgYikge1xuICBmb3IgKHZhciBrZXkgaW4gYikge1xuICAgIGFba2V5XSA9IGJba2V5XTtcbiAgfVxuICByZXR1cm4gYVxufVxuXG4vKiAgKi9cblxudmFyIGVuY29kZVJlc2VydmVSRSA9IC9bIScoKSpdL2c7XG52YXIgZW5jb2RlUmVzZXJ2ZVJlcGxhY2VyID0gZnVuY3Rpb24gKGMpIHsgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNik7IH07XG52YXIgY29tbWFSRSA9IC8lMkMvZztcblxuLy8gZml4ZWQgZW5jb2RlVVJJQ29tcG9uZW50IHdoaWNoIGlzIG1vcmUgY29uZm9ybWFudCB0byBSRkMzOTg2OlxuLy8gLSBlc2NhcGVzIFshJygpKl1cbi8vIC0gcHJlc2VydmUgY29tbWFzXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cilcbiAgICAucmVwbGFjZShlbmNvZGVSZXNlcnZlUkUsIGVuY29kZVJlc2VydmVSZXBsYWNlcilcbiAgICAucmVwbGFjZShjb21tYVJFLCAnLCcpOyB9O1xuXG5mdW5jdGlvbiBkZWNvZGUgKHN0cikge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQoc3RyKVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgKFwiRXJyb3IgZGVjb2RpbmcgXFxcIlwiICsgc3RyICsgXCJcXFwiLiBMZWF2aW5nIGl0IGludGFjdC5cIikpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVRdWVyeSAoXG4gIHF1ZXJ5LFxuICBleHRyYVF1ZXJ5LFxuICBfcGFyc2VRdWVyeVxuKSB7XG4gIGlmICggZXh0cmFRdWVyeSA9PT0gdm9pZCAwICkgZXh0cmFRdWVyeSA9IHt9O1xuXG4gIHZhciBwYXJzZSA9IF9wYXJzZVF1ZXJ5IHx8IHBhcnNlUXVlcnk7XG4gIHZhciBwYXJzZWRRdWVyeTtcbiAgdHJ5IHtcbiAgICBwYXJzZWRRdWVyeSA9IHBhcnNlKHF1ZXJ5IHx8ICcnKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihmYWxzZSwgZS5tZXNzYWdlKTtcbiAgICBwYXJzZWRRdWVyeSA9IHt9O1xuICB9XG4gIGZvciAodmFyIGtleSBpbiBleHRyYVF1ZXJ5KSB7XG4gICAgdmFyIHZhbHVlID0gZXh0cmFRdWVyeVtrZXldO1xuICAgIHBhcnNlZFF1ZXJ5W2tleV0gPSBBcnJheS5pc0FycmF5KHZhbHVlKVxuICAgICAgPyB2YWx1ZS5tYXAoY2FzdFF1ZXJ5UGFyYW1WYWx1ZSlcbiAgICAgIDogY2FzdFF1ZXJ5UGFyYW1WYWx1ZSh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHBhcnNlZFF1ZXJ5XG59XG5cbnZhciBjYXN0UXVlcnlQYXJhbVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAodmFsdWUgPT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpKTsgfTtcblxuZnVuY3Rpb24gcGFyc2VRdWVyeSAocXVlcnkpIHtcbiAgdmFyIHJlcyA9IHt9O1xuXG4gIHF1ZXJ5ID0gcXVlcnkudHJpbSgpLnJlcGxhY2UoL14oXFw/fCN8JikvLCAnJyk7XG5cbiAgaWYgKCFxdWVyeSkge1xuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIHF1ZXJ5LnNwbGl0KCcmJykuZm9yRWFjaChmdW5jdGlvbiAocGFyYW0pIHtcbiAgICB2YXIgcGFydHMgPSBwYXJhbS5yZXBsYWNlKC9cXCsvZywgJyAnKS5zcGxpdCgnPScpO1xuICAgIHZhciBrZXkgPSBkZWNvZGUocGFydHMuc2hpZnQoKSk7XG4gICAgdmFyIHZhbCA9IHBhcnRzLmxlbmd0aCA+IDAgPyBkZWNvZGUocGFydHMuam9pbignPScpKSA6IG51bGw7XG5cbiAgICBpZiAocmVzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVzW2tleV0gPSB2YWw7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHJlc1trZXldKSkge1xuICAgICAgcmVzW2tleV0ucHVzaCh2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNba2V5XSA9IFtyZXNba2V5XSwgdmFsXTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5UXVlcnkgKG9iaikge1xuICB2YXIgcmVzID0gb2JqXG4gICAgPyBPYmplY3Qua2V5cyhvYmopXG4gICAgICAubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHZhbCA9IG9ialtrZXldO1xuXG4gICAgICAgIGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiAnJ1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBlbmNvZGUoa2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICB2YWwuZm9yRWFjaChmdW5jdGlvbiAodmFsMikge1xuICAgICAgICAgICAgaWYgKHZhbDIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh2YWwyID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbDIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmpvaW4oJyYnKVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGVuY29kZShrZXkpICsgJz0nICsgZW5jb2RlKHZhbClcbiAgICAgIH0pXG4gICAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Lmxlbmd0aCA+IDA7IH0pXG4gICAgICAuam9pbignJicpXG4gICAgOiBudWxsO1xuICByZXR1cm4gcmVzID8gKFwiP1wiICsgcmVzKSA6ICcnXG59XG5cbi8qICAqL1xuXG52YXIgdHJhaWxpbmdTbGFzaFJFID0gL1xcLz8kLztcblxuZnVuY3Rpb24gY3JlYXRlUm91dGUgKFxuICByZWNvcmQsXG4gIGxvY2F0aW9uLFxuICByZWRpcmVjdGVkRnJvbSxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIHN0cmluZ2lmeVF1ZXJ5ID0gcm91dGVyICYmIHJvdXRlci5vcHRpb25zLnN0cmluZ2lmeVF1ZXJ5O1xuXG4gIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5IHx8IHt9O1xuICB0cnkge1xuICAgIHF1ZXJ5ID0gY2xvbmUocXVlcnkpO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByb3V0ZSA9IHtcbiAgICBuYW1lOiBsb2NhdGlvbi5uYW1lIHx8IChyZWNvcmQgJiYgcmVjb3JkLm5hbWUpLFxuICAgIG1ldGE6IChyZWNvcmQgJiYgcmVjb3JkLm1ldGEpIHx8IHt9LFxuICAgIHBhdGg6IGxvY2F0aW9uLnBhdGggfHwgJy8nLFxuICAgIGhhc2g6IGxvY2F0aW9uLmhhc2ggfHwgJycsXG4gICAgcXVlcnk6IHF1ZXJ5LFxuICAgIHBhcmFtczogbG9jYXRpb24ucGFyYW1zIHx8IHt9LFxuICAgIGZ1bGxQYXRoOiBnZXRGdWxsUGF0aChsb2NhdGlvbiwgc3RyaW5naWZ5UXVlcnkpLFxuICAgIG1hdGNoZWQ6IHJlY29yZCA/IGZvcm1hdE1hdGNoKHJlY29yZCkgOiBbXVxuICB9O1xuICBpZiAocmVkaXJlY3RlZEZyb20pIHtcbiAgICByb3V0ZS5yZWRpcmVjdGVkRnJvbSA9IGdldEZ1bGxQYXRoKHJlZGlyZWN0ZWRGcm9tLCBzdHJpbmdpZnlRdWVyeSk7XG4gIH1cbiAgcmV0dXJuIE9iamVjdC5mcmVlemUocm91dGUpXG59XG5cbmZ1bmN0aW9uIGNsb25lICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWUubWFwKGNsb25lKVxuICB9IGVsc2UgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgICByZXNba2V5XSA9IGNsb25lKHZhbHVlW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbn1cblxuLy8gdGhlIHN0YXJ0aW5nIHJvdXRlIHRoYXQgcmVwcmVzZW50cyB0aGUgaW5pdGlhbCBzdGF0ZVxudmFyIFNUQVJUID0gY3JlYXRlUm91dGUobnVsbCwge1xuICBwYXRoOiAnLydcbn0pO1xuXG5mdW5jdGlvbiBmb3JtYXRNYXRjaCAocmVjb3JkKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgd2hpbGUgKHJlY29yZCkge1xuICAgIHJlcy51bnNoaWZ0KHJlY29yZCk7XG4gICAgcmVjb3JkID0gcmVjb3JkLnBhcmVudDtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldEZ1bGxQYXRoIChcbiAgcmVmLFxuICBfc3RyaW5naWZ5UXVlcnlcbikge1xuICB2YXIgcGF0aCA9IHJlZi5wYXRoO1xuICB2YXIgcXVlcnkgPSByZWYucXVlcnk7IGlmICggcXVlcnkgPT09IHZvaWQgMCApIHF1ZXJ5ID0ge307XG4gIHZhciBoYXNoID0gcmVmLmhhc2g7IGlmICggaGFzaCA9PT0gdm9pZCAwICkgaGFzaCA9ICcnO1xuXG4gIHZhciBzdHJpbmdpZnkgPSBfc3RyaW5naWZ5UXVlcnkgfHwgc3RyaW5naWZ5UXVlcnk7XG4gIHJldHVybiAocGF0aCB8fCAnLycpICsgc3RyaW5naWZ5KHF1ZXJ5KSArIGhhc2hcbn1cblxuZnVuY3Rpb24gaXNTYW1lUm91dGUgKGEsIGIpIHtcbiAgaWYgKGIgPT09IFNUQVJUKSB7XG4gICAgcmV0dXJuIGEgPT09IGJcbiAgfSBlbHNlIGlmICghYikge1xuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKGEucGF0aCAmJiBiLnBhdGgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnJykgPT09IGIucGF0aC5yZXBsYWNlKHRyYWlsaW5nU2xhc2hSRSwgJycpICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KVxuICAgIClcbiAgfSBlbHNlIGlmIChhLm5hbWUgJiYgYi5uYW1lKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGEubmFtZSA9PT0gYi5uYW1lICYmXG4gICAgICBhLmhhc2ggPT09IGIuaGFzaCAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnF1ZXJ5LCBiLnF1ZXJ5KSAmJlxuICAgICAgaXNPYmplY3RFcXVhbChhLnBhcmFtcywgYi5wYXJhbXMpXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0RXF1YWwgKGEsIGIpIHtcbiAgaWYgKCBhID09PSB2b2lkIDAgKSBhID0ge307XG4gIGlmICggYiA9PT0gdm9pZCAwICkgYiA9IHt9O1xuXG4gIC8vIGhhbmRsZSBudWxsIHZhbHVlICMxNTY2XG4gIGlmICghYSB8fCAhYikgeyByZXR1cm4gYSA9PT0gYiB9XG4gIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpLnNvcnQoKTtcbiAgdmFyIGJLZXlzID0gT2JqZWN0LmtleXMoYikuc29ydCgpO1xuICBpZiAoYUtleXMubGVuZ3RoICE9PSBiS2V5cy5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSwgaSkge1xuICAgIHZhciBhVmFsID0gYVtrZXldO1xuICAgIHZhciBiS2V5ID0gYktleXNbaV07XG4gICAgaWYgKGJLZXkgIT09IGtleSkgeyByZXR1cm4gZmFsc2UgfVxuICAgIHZhciBiVmFsID0gYltrZXldO1xuICAgIC8vIHF1ZXJ5IHZhbHVlcyBjYW4gYmUgbnVsbCBhbmQgdW5kZWZpbmVkXG4gICAgaWYgKGFWYWwgPT0gbnVsbCB8fCBiVmFsID09IG51bGwpIHsgcmV0dXJuIGFWYWwgPT09IGJWYWwgfVxuICAgIC8vIGNoZWNrIG5lc3RlZCBlcXVhbGl0eVxuICAgIGlmICh0eXBlb2YgYVZhbCA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGJWYWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RFcXVhbChhVmFsLCBiVmFsKVxuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGFWYWwpID09PSBTdHJpbmcoYlZhbClcbiAgfSlcbn1cblxuZnVuY3Rpb24gaXNJbmNsdWRlZFJvdXRlIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIChcbiAgICBjdXJyZW50LnBhdGgucmVwbGFjZSh0cmFpbGluZ1NsYXNoUkUsICcvJykuaW5kZXhPZihcbiAgICAgIHRhcmdldC5wYXRoLnJlcGxhY2UodHJhaWxpbmdTbGFzaFJFLCAnLycpXG4gICAgKSA9PT0gMCAmJlxuICAgICghdGFyZ2V0Lmhhc2ggfHwgY3VycmVudC5oYXNoID09PSB0YXJnZXQuaGFzaCkgJiZcbiAgICBxdWVyeUluY2x1ZGVzKGN1cnJlbnQucXVlcnksIHRhcmdldC5xdWVyeSlcbiAgKVxufVxuXG5mdW5jdGlvbiBxdWVyeUluY2x1ZGVzIChjdXJyZW50LCB0YXJnZXQpIHtcbiAgZm9yICh2YXIga2V5IGluIHRhcmdldCkge1xuICAgIGlmICghKGtleSBpbiBjdXJyZW50KSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGhhbmRsZVJvdXRlRW50ZXJlZCAocm91dGUpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3V0ZS5tYXRjaGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJlY29yZCA9IHJvdXRlLm1hdGNoZWRbaV07XG4gICAgZm9yICh2YXIgbmFtZSBpbiByZWNvcmQuaW5zdGFuY2VzKSB7XG4gICAgICB2YXIgaW5zdGFuY2UgPSByZWNvcmQuaW5zdGFuY2VzW25hbWVdO1xuICAgICAgdmFyIGNicyA9IHJlY29yZC5lbnRlcmVkQ2JzW25hbWVdO1xuICAgICAgaWYgKCFpbnN0YW5jZSB8fCAhY2JzKSB7IGNvbnRpbnVlIH1cbiAgICAgIGRlbGV0ZSByZWNvcmQuZW50ZXJlZENic1tuYW1lXTtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgIGlmICghaW5zdGFuY2UuX2lzQmVpbmdEZXN0cm95ZWQpIHsgY2JzW2kkMV0oaW5zdGFuY2UpOyB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBWaWV3ID0ge1xuICBuYW1lOiAnUm91dGVyVmlldycsXG4gIGZ1bmN0aW9uYWw6IHRydWUsXG4gIHByb3BzOiB7XG4gICAgbmFtZToge1xuICAgICAgdHlwZTogU3RyaW5nLFxuICAgICAgZGVmYXVsdDogJ2RlZmF1bHQnXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoXywgcmVmKSB7XG4gICAgdmFyIHByb3BzID0gcmVmLnByb3BzO1xuICAgIHZhciBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbjtcbiAgICB2YXIgcGFyZW50ID0gcmVmLnBhcmVudDtcbiAgICB2YXIgZGF0YSA9IHJlZi5kYXRhO1xuXG4gICAgLy8gdXNlZCBieSBkZXZ0b29scyB0byBkaXNwbGF5IGEgcm91dGVyLXZpZXcgYmFkZ2VcbiAgICBkYXRhLnJvdXRlclZpZXcgPSB0cnVlO1xuXG4gICAgLy8gZGlyZWN0bHkgdXNlIHBhcmVudCBjb250ZXh0J3MgY3JlYXRlRWxlbWVudCgpIGZ1bmN0aW9uXG4gICAgLy8gc28gdGhhdCBjb21wb25lbnRzIHJlbmRlcmVkIGJ5IHJvdXRlci12aWV3IGNhbiByZXNvbHZlIG5hbWVkIHNsb3RzXG4gICAgdmFyIGggPSBwYXJlbnQuJGNyZWF0ZUVsZW1lbnQ7XG4gICAgdmFyIG5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHZhciByb3V0ZSA9IHBhcmVudC4kcm91dGU7XG4gICAgdmFyIGNhY2hlID0gcGFyZW50Ll9yb3V0ZXJWaWV3Q2FjaGUgfHwgKHBhcmVudC5fcm91dGVyVmlld0NhY2hlID0ge30pO1xuXG4gICAgLy8gZGV0ZXJtaW5lIGN1cnJlbnQgdmlldyBkZXB0aCwgYWxzbyBjaGVjayB0byBzZWUgaWYgdGhlIHRyZWVcbiAgICAvLyBoYXMgYmVlbiB0b2dnbGVkIGluYWN0aXZlIGJ1dCBrZXB0LWFsaXZlLlxuICAgIHZhciBkZXB0aCA9IDA7XG4gICAgdmFyIGluYWN0aXZlID0gZmFsc2U7XG4gICAgd2hpbGUgKHBhcmVudCAmJiBwYXJlbnQuX3JvdXRlclJvb3QgIT09IHBhcmVudCkge1xuICAgICAgdmFyIHZub2RlRGF0YSA9IHBhcmVudC4kdm5vZGUgPyBwYXJlbnQuJHZub2RlLmRhdGEgOiB7fTtcbiAgICAgIGlmICh2bm9kZURhdGEucm91dGVyVmlldykge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgICAgaWYgKHZub2RlRGF0YS5rZWVwQWxpdmUgJiYgcGFyZW50Ll9kaXJlY3RJbmFjdGl2ZSAmJiBwYXJlbnQuX2luYWN0aXZlKSB7XG4gICAgICAgIGluYWN0aXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC4kcGFyZW50O1xuICAgIH1cbiAgICBkYXRhLnJvdXRlclZpZXdEZXB0aCA9IGRlcHRoO1xuXG4gICAgLy8gcmVuZGVyIHByZXZpb3VzIHZpZXcgaWYgdGhlIHRyZWUgaXMgaW5hY3RpdmUgYW5kIGtlcHQtYWxpdmVcbiAgICBpZiAoaW5hY3RpdmUpIHtcbiAgICAgIHZhciBjYWNoZWREYXRhID0gY2FjaGVbbmFtZV07XG4gICAgICB2YXIgY2FjaGVkQ29tcG9uZW50ID0gY2FjaGVkRGF0YSAmJiBjYWNoZWREYXRhLmNvbXBvbmVudDtcbiAgICAgIGlmIChjYWNoZWRDb21wb25lbnQpIHtcbiAgICAgICAgLy8gIzIzMDFcbiAgICAgICAgLy8gcGFzcyBwcm9wc1xuICAgICAgICBpZiAoY2FjaGVkRGF0YS5jb25maWdQcm9wcykge1xuICAgICAgICAgIGZpbGxQcm9wc2luRGF0YShjYWNoZWRDb21wb25lbnQsIGRhdGEsIGNhY2hlZERhdGEucm91dGUsIGNhY2hlZERhdGEuY29uZmlnUHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoKGNhY2hlZENvbXBvbmVudCwgZGF0YSwgY2hpbGRyZW4pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyByZW5kZXIgcHJldmlvdXMgZW1wdHkgdmlld1xuICAgICAgICByZXR1cm4gaCgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWQgPSByb3V0ZS5tYXRjaGVkW2RlcHRoXTtcbiAgICB2YXIgY29tcG9uZW50ID0gbWF0Y2hlZCAmJiBtYXRjaGVkLmNvbXBvbmVudHNbbmFtZV07XG5cbiAgICAvLyByZW5kZXIgZW1wdHkgbm9kZSBpZiBubyBtYXRjaGVkIHJvdXRlIG9yIG5vIGNvbmZpZyBjb21wb25lbnRcbiAgICBpZiAoIW1hdGNoZWQgfHwgIWNvbXBvbmVudCkge1xuICAgICAgY2FjaGVbbmFtZV0gPSBudWxsO1xuICAgICAgcmV0dXJuIGgoKVxuICAgIH1cblxuICAgIC8vIGNhY2hlIGNvbXBvbmVudFxuICAgIGNhY2hlW25hbWVdID0geyBjb21wb25lbnQ6IGNvbXBvbmVudCB9O1xuXG4gICAgLy8gYXR0YWNoIGluc3RhbmNlIHJlZ2lzdHJhdGlvbiBob29rXG4gICAgLy8gdGhpcyB3aWxsIGJlIGNhbGxlZCBpbiB0aGUgaW5zdGFuY2UncyBpbmplY3RlZCBsaWZlY3ljbGUgaG9va3NcbiAgICBkYXRhLnJlZ2lzdGVyUm91dGVJbnN0YW5jZSA9IGZ1bmN0aW9uICh2bSwgdmFsKSB7XG4gICAgICAvLyB2YWwgY291bGQgYmUgdW5kZWZpbmVkIGZvciB1bnJlZ2lzdHJhdGlvblxuICAgICAgdmFyIGN1cnJlbnQgPSBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXTtcbiAgICAgIGlmIChcbiAgICAgICAgKHZhbCAmJiBjdXJyZW50ICE9PSB2bSkgfHxcbiAgICAgICAgKCF2YWwgJiYgY3VycmVudCA9PT0gdm0pXG4gICAgICApIHtcbiAgICAgICAgbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWxzbyByZWdpc3RlciBpbnN0YW5jZSBpbiBwcmVwYXRjaCBob29rXG4gICAgLy8gaW4gY2FzZSB0aGUgc2FtZSBjb21wb25lbnQgaW5zdGFuY2UgaXMgcmV1c2VkIGFjcm9zcyBkaWZmZXJlbnQgcm91dGVzXG4gICAgOyhkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KSkucHJlcGF0Y2ggPSBmdW5jdGlvbiAoXywgdm5vZGUpIHtcbiAgICAgIG1hdGNoZWQuaW5zdGFuY2VzW25hbWVdID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgfTtcblxuICAgIC8vIHJlZ2lzdGVyIGluc3RhbmNlIGluIGluaXQgaG9va1xuICAgIC8vIGluIGNhc2Uga2VwdC1hbGl2ZSBjb21wb25lbnQgYmUgYWN0aXZlZCB3aGVuIHJvdXRlcyBjaGFuZ2VkXG4gICAgZGF0YS5ob29rLmluaXQgPSBmdW5jdGlvbiAodm5vZGUpIHtcbiAgICAgIGlmICh2bm9kZS5kYXRhLmtlZXBBbGl2ZSAmJlxuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAhPT0gbWF0Y2hlZC5pbnN0YW5jZXNbbmFtZV1cbiAgICAgICkge1xuICAgICAgICBtYXRjaGVkLmluc3RhbmNlc1tuYW1lXSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgfVxuXG4gICAgICAvLyBpZiB0aGUgcm91dGUgdHJhbnNpdGlvbiBoYXMgYWxyZWFkeSBiZWVuIGNvbmZpcm1lZCB0aGVuIHdlIHdlcmVuJ3RcbiAgICAgIC8vIGFibGUgdG8gY2FsbCB0aGUgY2JzIGR1cmluZyBjb25maXJtYXRpb24gYXMgdGhlIGNvbXBvbmVudCB3YXMgbm90XG4gICAgICAvLyByZWdpc3RlcmVkIHlldCwgc28gd2UgY2FsbCBpdCBoZXJlLlxuICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTtcbiAgICB9O1xuXG4gICAgdmFyIGNvbmZpZ1Byb3BzID0gbWF0Y2hlZC5wcm9wcyAmJiBtYXRjaGVkLnByb3BzW25hbWVdO1xuICAgIC8vIHNhdmUgcm91dGUgYW5kIGNvbmZpZ1Byb3BzIGluIGNhY2hlXG4gICAgaWYgKGNvbmZpZ1Byb3BzKSB7XG4gICAgICBleHRlbmQoY2FjaGVbbmFtZV0sIHtcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBjb25maWdQcm9wczogY29uZmlnUHJvcHNcbiAgICAgIH0pO1xuICAgICAgZmlsbFByb3BzaW5EYXRhKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaChjb21wb25lbnQsIGRhdGEsIGNoaWxkcmVuKVxuICB9XG59O1xuXG5mdW5jdGlvbiBmaWxsUHJvcHNpbkRhdGEgKGNvbXBvbmVudCwgZGF0YSwgcm91dGUsIGNvbmZpZ1Byb3BzKSB7XG4gIC8vIHJlc29sdmUgcHJvcHNcbiAgdmFyIHByb3BzVG9QYXNzID0gZGF0YS5wcm9wcyA9IHJlc29sdmVQcm9wcyhyb3V0ZSwgY29uZmlnUHJvcHMpO1xuICBpZiAocHJvcHNUb1Bhc3MpIHtcbiAgICAvLyBjbG9uZSB0byBwcmV2ZW50IG11dGF0aW9uXG4gICAgcHJvcHNUb1Bhc3MgPSBkYXRhLnByb3BzID0gZXh0ZW5kKHt9LCBwcm9wc1RvUGFzcyk7XG4gICAgLy8gcGFzcyBub24tZGVjbGFyZWQgcHJvcHMgYXMgYXR0cnNcbiAgICB2YXIgYXR0cnMgPSBkYXRhLmF0dHJzID0gZGF0YS5hdHRycyB8fCB7fTtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcHNUb1Bhc3MpIHtcbiAgICAgIGlmICghY29tcG9uZW50LnByb3BzIHx8ICEoa2V5IGluIGNvbXBvbmVudC5wcm9wcykpIHtcbiAgICAgICAgYXR0cnNba2V5XSA9IHByb3BzVG9QYXNzW2tleV07XG4gICAgICAgIGRlbGV0ZSBwcm9wc1RvUGFzc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUHJvcHMgKHJvdXRlLCBjb25maWcpIHtcbiAgc3dpdGNoICh0eXBlb2YgY29uZmlnKSB7XG4gICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgIHJldHVyblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gY29uZmlnXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIGNvbmZpZyhyb3V0ZSlcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBjb25maWcgPyByb3V0ZS5wYXJhbXMgOiB1bmRlZmluZWRcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICBcInByb3BzIGluIFxcXCJcIiArIChyb3V0ZS5wYXRoKSArIFwiXFxcIiBpcyBhIFwiICsgKHR5cGVvZiBjb25maWcpICsgXCIsIFwiICtcbiAgICAgICAgICBcImV4cGVjdGluZyBhbiBvYmplY3QsIGZ1bmN0aW9uIG9yIGJvb2xlYW4uXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGggKFxuICByZWxhdGl2ZSxcbiAgYmFzZSxcbiAgYXBwZW5kXG4pIHtcbiAgdmFyIGZpcnN0Q2hhciA9IHJlbGF0aXZlLmNoYXJBdCgwKTtcbiAgaWYgKGZpcnN0Q2hhciA9PT0gJy8nKSB7XG4gICAgcmV0dXJuIHJlbGF0aXZlXG4gIH1cblxuICBpZiAoZmlyc3RDaGFyID09PSAnPycgfHwgZmlyc3RDaGFyID09PSAnIycpIHtcbiAgICByZXR1cm4gYmFzZSArIHJlbGF0aXZlXG4gIH1cblxuICB2YXIgc3RhY2sgPSBiYXNlLnNwbGl0KCcvJyk7XG5cbiAgLy8gcmVtb3ZlIHRyYWlsaW5nIHNlZ21lbnQgaWY6XG4gIC8vIC0gbm90IGFwcGVuZGluZ1xuICAvLyAtIGFwcGVuZGluZyB0byB0cmFpbGluZyBzbGFzaCAobGFzdCBzZWdtZW50IGlzIGVtcHR5KVxuICBpZiAoIWFwcGVuZCB8fCAhc3RhY2tbc3RhY2subGVuZ3RoIC0gMV0pIHtcbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIC8vIHJlc29sdmUgcmVsYXRpdmUgcGF0aFxuICB2YXIgc2VnbWVudHMgPSByZWxhdGl2ZS5yZXBsYWNlKC9eXFwvLywgJycpLnNwbGl0KCcvJyk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGlmIChzZWdtZW50ID09PSAnLi4nKSB7XG4gICAgICBzdGFjay5wb3AoKTtcbiAgICB9IGVsc2UgaWYgKHNlZ21lbnQgIT09ICcuJykge1xuICAgICAgc3RhY2sucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH1cblxuICAvLyBlbnN1cmUgbGVhZGluZyBzbGFzaFxuICBpZiAoc3RhY2tbMF0gIT09ICcnKSB7XG4gICAgc3RhY2sudW5zaGlmdCgnJyk7XG4gIH1cblxuICByZXR1cm4gc3RhY2suam9pbignLycpXG59XG5cbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICB2YXIgaGFzaCA9ICcnO1xuICB2YXIgcXVlcnkgPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggPj0gMCkge1xuICAgIGhhc2ggPSBwYXRoLnNsaWNlKGhhc2hJbmRleCk7XG4gICAgcGF0aCA9IHBhdGguc2xpY2UoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBxdWVyeUluZGV4ID0gcGF0aC5pbmRleE9mKCc/Jyk7XG4gIGlmIChxdWVyeUluZGV4ID49IDApIHtcbiAgICBxdWVyeSA9IHBhdGguc2xpY2UocXVlcnlJbmRleCArIDEpO1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKDAsIHF1ZXJ5SW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLFxuICAgIHF1ZXJ5OiBxdWVyeSxcbiAgICBoYXNoOiBoYXNoXG4gIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5QYXRoIChwYXRoKSB7XG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1xcL1xcLy9nLCAnLycpXG59XG5cbnZhciBpc2FycmF5ID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbnZhciBwYXRoVG9SZWdleHBfMSA9IHBhdGhUb1JlZ2V4cDtcbnZhciBwYXJzZV8xID0gcGFyc2U7XG52YXIgY29tcGlsZV8xID0gY29tcGlsZTtcbnZhciB0b2tlbnNUb0Z1bmN0aW9uXzEgPSB0b2tlbnNUb0Z1bmN0aW9uO1xudmFyIHRva2Vuc1RvUmVnRXhwXzEgPSB0b2tlbnNUb1JlZ0V4cDtcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdO1xuICB2YXIga2V5ID0gMDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIHBhdGggPSAnJztcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJztcbiAgdmFyIHJlcztcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdO1xuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdO1xuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXg7XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldCk7XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aDtcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV07XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XTtcbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdO1xuICAgIHZhciBuYW1lID0gcmVzWzNdO1xuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdO1xuICAgIHZhciBncm91cCA9IHJlc1s1XTtcbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl07XG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddO1xuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gICAgICBwYXRoID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4O1xuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKic7XG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonO1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlcjtcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXA7XG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pO1xuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aCk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aCk7XG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJywgZmxhZ3Mob3B0aW9ucykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJztcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fTtcbiAgICB2YXIgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlbjtcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdO1xuICAgICAgdmFyIHNlZ21lbnQ7XG5cbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICAgIGlmICh0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pO1xuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIHNlZ21lbnQgPSB0b2tlbi5hc3RlcmlzayA/IGVuY29kZUFzdGVyaXNrKHZhbHVlKSA6IGVuY29kZSh2YWx1ZSk7XG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXM7XG4gIHJldHVybiByZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZmxhZ3MgZm9yIGEgcmVnZXhwIGZyb20gdGhlIG9wdGlvbnMuXG4gKlxuICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGZsYWdzIChvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zICYmIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpO1xuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSk7XG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpO1xuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucyk7XG4gICAga2V5cyA9IFtdO1xuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0O1xuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlO1xuICB2YXIgcm91dGUgPSAnJztcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeCk7XG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJztcblxuICAgICAga2V5cy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKic7XG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJztcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJyk7XG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyO1xuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nO1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJztcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknO1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpO1xuICAgIGtleXMgPSBbXTtcbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbnBhdGhUb1JlZ2V4cF8xLnBhcnNlID0gcGFyc2VfMTtcbnBhdGhUb1JlZ2V4cF8xLmNvbXBpbGUgPSBjb21waWxlXzE7XG5wYXRoVG9SZWdleHBfMS50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvbl8xO1xucGF0aFRvUmVnZXhwXzEudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cF8xO1xuXG4vKiAgKi9cblxuLy8gJGZsb3ctZGlzYWJsZS1saW5lXG52YXIgcmVnZXhwQ29tcGlsZUNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gZmlsbFBhcmFtcyAoXG4gIHBhdGgsXG4gIHBhcmFtcyxcbiAgcm91dGVNc2dcbikge1xuICBwYXJhbXMgPSBwYXJhbXMgfHwge307XG4gIHRyeSB7XG4gICAgdmFyIGZpbGxlciA9XG4gICAgICByZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gfHxcbiAgICAgIChyZWdleHBDb21waWxlQ2FjaGVbcGF0aF0gPSBwYXRoVG9SZWdleHBfMS5jb21waWxlKHBhdGgpKTtcblxuICAgIC8vIEZpeCAjMjUwNSByZXNvbHZpbmcgYXN0ZXJpc2sgcm91dGVzIHsgbmFtZTogJ25vdC1mb3VuZCcsIHBhcmFtczogeyBwYXRoTWF0Y2g6ICcvbm90LWZvdW5kJyB9fVxuICAgIC8vIGFuZCBmaXggIzMxMDYgc28gdGhhdCB5b3UgY2FuIHdvcmsgd2l0aCBsb2NhdGlvbiBkZXNjcmlwdG9yIG9iamVjdCBoYXZpbmcgcGFyYW1zLnBhdGhNYXRjaCBlcXVhbCB0byBlbXB0eSBzdHJpbmdcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5wYXRoTWF0Y2ggPT09ICdzdHJpbmcnKSB7IHBhcmFtc1swXSA9IHBhcmFtcy5wYXRoTWF0Y2g7IH1cblxuICAgIHJldHVybiBmaWxsZXIocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIC8vIEZpeCAjMzA3MiBubyB3YXJuIGlmIGBwYXRoTWF0Y2hgIGlzIHN0cmluZ1xuICAgICAgd2Fybih0eXBlb2YgcGFyYW1zLnBhdGhNYXRjaCA9PT0gJ3N0cmluZycsIChcIm1pc3NpbmcgcGFyYW0gZm9yIFwiICsgcm91dGVNc2cgKyBcIjogXCIgKyAoZS5tZXNzYWdlKSkpO1xuICAgIH1cbiAgICByZXR1cm4gJydcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBkZWxldGUgdGhlIDAgaWYgaXQgd2FzIGFkZGVkXG4gICAgZGVsZXRlIHBhcmFtc1swXTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24gKFxuICByYXcsXG4gIGN1cnJlbnQsXG4gIGFwcGVuZCxcbiAgcm91dGVyXG4pIHtcbiAgdmFyIG5leHQgPSB0eXBlb2YgcmF3ID09PSAnc3RyaW5nJyA/IHsgcGF0aDogcmF3IH0gOiByYXc7XG4gIC8vIG5hbWVkIHRhcmdldFxuICBpZiAobmV4dC5fbm9ybWFsaXplZCkge1xuICAgIHJldHVybiBuZXh0XG4gIH0gZWxzZSBpZiAobmV4dC5uYW1lKSB7XG4gICAgbmV4dCA9IGV4dGVuZCh7fSwgcmF3KTtcbiAgICB2YXIgcGFyYW1zID0gbmV4dC5wYXJhbXM7XG4gICAgaWYgKHBhcmFtcyAmJiB0eXBlb2YgcGFyYW1zID09PSAnb2JqZWN0Jykge1xuICAgICAgbmV4dC5wYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBuZXh0XG4gIH1cblxuICAvLyByZWxhdGl2ZSBwYXJhbXNcbiAgaWYgKCFuZXh0LnBhdGggJiYgbmV4dC5wYXJhbXMgJiYgY3VycmVudCkge1xuICAgIG5leHQgPSBleHRlbmQoe30sIG5leHQpO1xuICAgIG5leHQuX25vcm1hbGl6ZWQgPSB0cnVlO1xuICAgIHZhciBwYXJhbXMkMSA9IGV4dGVuZChleHRlbmQoe30sIGN1cnJlbnQucGFyYW1zKSwgbmV4dC5wYXJhbXMpO1xuICAgIGlmIChjdXJyZW50Lm5hbWUpIHtcbiAgICAgIG5leHQubmFtZSA9IGN1cnJlbnQubmFtZTtcbiAgICAgIG5leHQucGFyYW1zID0gcGFyYW1zJDE7XG4gICAgfSBlbHNlIGlmIChjdXJyZW50Lm1hdGNoZWQubGVuZ3RoKSB7XG4gICAgICB2YXIgcmF3UGF0aCA9IGN1cnJlbnQubWF0Y2hlZFtjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMV0ucGF0aDtcbiAgICAgIG5leHQucGF0aCA9IGZpbGxQYXJhbXMocmF3UGF0aCwgcGFyYW1zJDEsIChcInBhdGggXCIgKyAoY3VycmVudC5wYXRoKSkpO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgd2FybihmYWxzZSwgXCJyZWxhdGl2ZSBwYXJhbXMgbmF2aWdhdGlvbiByZXF1aXJlcyBhIGN1cnJlbnQgcm91dGUuXCIpO1xuICAgIH1cbiAgICByZXR1cm4gbmV4dFxuICB9XG5cbiAgdmFyIHBhcnNlZFBhdGggPSBwYXJzZVBhdGgobmV4dC5wYXRoIHx8ICcnKTtcbiAgdmFyIGJhc2VQYXRoID0gKGN1cnJlbnQgJiYgY3VycmVudC5wYXRoKSB8fCAnLyc7XG4gIHZhciBwYXRoID0gcGFyc2VkUGF0aC5wYXRoXG4gICAgPyByZXNvbHZlUGF0aChwYXJzZWRQYXRoLnBhdGgsIGJhc2VQYXRoLCBhcHBlbmQgfHwgbmV4dC5hcHBlbmQpXG4gICAgOiBiYXNlUGF0aDtcblxuICB2YXIgcXVlcnkgPSByZXNvbHZlUXVlcnkoXG4gICAgcGFyc2VkUGF0aC5xdWVyeSxcbiAgICBuZXh0LnF1ZXJ5LFxuICAgIHJvdXRlciAmJiByb3V0ZXIub3B0aW9ucy5wYXJzZVF1ZXJ5XG4gICk7XG5cbiAgdmFyIGhhc2ggPSBuZXh0Lmhhc2ggfHwgcGFyc2VkUGF0aC5oYXNoO1xuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSB7XG4gICAgaGFzaCA9IFwiI1wiICsgaGFzaDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgcGF0aDogcGF0aCxcbiAgICBxdWVyeTogcXVlcnksXG4gICAgaGFzaDogaGFzaFxuICB9XG59XG5cbi8qICAqL1xuXG4vLyB3b3JrIGFyb3VuZCB3ZWlyZCBmbG93IGJ1Z1xudmFyIHRvVHlwZXMgPSBbU3RyaW5nLCBPYmplY3RdO1xudmFyIGV2ZW50VHlwZXMgPSBbU3RyaW5nLCBBcnJheV07XG5cbnZhciBub29wID0gZnVuY3Rpb24gKCkge307XG5cbnZhciBMaW5rID0ge1xuICBuYW1lOiAnUm91dGVyTGluaycsXG4gIHByb3BzOiB7XG4gICAgdG86IHtcbiAgICAgIHR5cGU6IHRvVHlwZXMsXG4gICAgICByZXF1aXJlZDogdHJ1ZVxuICAgIH0sXG4gICAgdGFnOiB7XG4gICAgICB0eXBlOiBTdHJpbmcsXG4gICAgICBkZWZhdWx0OiAnYSdcbiAgICB9LFxuICAgIGV4YWN0OiBCb29sZWFuLFxuICAgIGFwcGVuZDogQm9vbGVhbixcbiAgICByZXBsYWNlOiBCb29sZWFuLFxuICAgIGFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgZXhhY3RBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFyaWFDdXJyZW50VmFsdWU6IHtcbiAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgIGRlZmF1bHQ6ICdwYWdlJ1xuICAgIH0sXG4gICAgZXZlbnQ6IHtcbiAgICAgIHR5cGU6IGV2ZW50VHlwZXMsXG4gICAgICBkZWZhdWx0OiAnY2xpY2snXG4gICAgfVxuICB9LFxuICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMuJHJvdXRlcjtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuJHJvdXRlO1xuICAgIHZhciByZWYgPSByb3V0ZXIucmVzb2x2ZShcbiAgICAgIHRoaXMudG8sXG4gICAgICBjdXJyZW50LFxuICAgICAgdGhpcy5hcHBlbmRcbiAgICApO1xuICAgIHZhciBsb2NhdGlvbiA9IHJlZi5sb2NhdGlvbjtcbiAgICB2YXIgcm91dGUgPSByZWYucm91dGU7XG4gICAgdmFyIGhyZWYgPSByZWYuaHJlZjtcblxuICAgIHZhciBjbGFzc2VzID0ge307XG4gICAgdmFyIGdsb2JhbEFjdGl2ZUNsYXNzID0gcm91dGVyLm9wdGlvbnMubGlua0FjdGl2ZUNsYXNzO1xuICAgIHZhciBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzID0gcm91dGVyLm9wdGlvbnMubGlua0V4YWN0QWN0aXZlQ2xhc3M7XG4gICAgLy8gU3VwcG9ydCBnbG9iYWwgZW1wdHkgYWN0aXZlIGNsYXNzXG4gICAgdmFyIGFjdGl2ZUNsYXNzRmFsbGJhY2sgPVxuICAgICAgZ2xvYmFsQWN0aXZlQ2xhc3MgPT0gbnVsbCA/ICdyb3V0ZXItbGluay1hY3RpdmUnIDogZ2xvYmFsQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGV4YWN0QWN0aXZlQ2xhc3NGYWxsYmFjayA9XG4gICAgICBnbG9iYWxFeGFjdEFjdGl2ZUNsYXNzID09IG51bGxcbiAgICAgICAgPyAncm91dGVyLWxpbmstZXhhY3QtYWN0aXZlJ1xuICAgICAgICA6IGdsb2JhbEV4YWN0QWN0aXZlQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID1cbiAgICAgIHRoaXMuYWN0aXZlQ2xhc3MgPT0gbnVsbCA/IGFjdGl2ZUNsYXNzRmFsbGJhY2sgOiB0aGlzLmFjdGl2ZUNsYXNzO1xuICAgIHZhciBleGFjdEFjdGl2ZUNsYXNzID1cbiAgICAgIHRoaXMuZXhhY3RBY3RpdmVDbGFzcyA9PSBudWxsXG4gICAgICAgID8gZXhhY3RBY3RpdmVDbGFzc0ZhbGxiYWNrXG4gICAgICAgIDogdGhpcy5leGFjdEFjdGl2ZUNsYXNzO1xuXG4gICAgdmFyIGNvbXBhcmVUYXJnZXQgPSByb3V0ZS5yZWRpcmVjdGVkRnJvbVxuICAgICAgPyBjcmVhdGVSb3V0ZShudWxsLCBub3JtYWxpemVMb2NhdGlvbihyb3V0ZS5yZWRpcmVjdGVkRnJvbSksIG51bGwsIHJvdXRlcilcbiAgICAgIDogcm91dGU7XG5cbiAgICBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdID0gaXNTYW1lUm91dGUoY3VycmVudCwgY29tcGFyZVRhcmdldCk7XG4gICAgY2xhc3Nlc1thY3RpdmVDbGFzc10gPSB0aGlzLmV4YWN0XG4gICAgICA/IGNsYXNzZXNbZXhhY3RBY3RpdmVDbGFzc11cbiAgICAgIDogaXNJbmNsdWRlZFJvdXRlKGN1cnJlbnQsIGNvbXBhcmVUYXJnZXQpO1xuXG4gICAgdmFyIGFyaWFDdXJyZW50VmFsdWUgPSBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdID8gdGhpcy5hcmlhQ3VycmVudFZhbHVlIDogbnVsbDtcblxuICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmIChndWFyZEV2ZW50KGUpKSB7XG4gICAgICAgIGlmICh0aGlzJDEucmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlci5yZXBsYWNlKGxvY2F0aW9uLCBub29wKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXIucHVzaChsb2NhdGlvbiwgbm9vcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdmFyIG9uID0geyBjbGljazogZ3VhcmRFdmVudCB9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuZXZlbnQpKSB7XG4gICAgICB0aGlzLmV2ZW50LmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgb25bZV0gPSBoYW5kbGVyO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9uW3RoaXMuZXZlbnRdID0gaGFuZGxlcjtcbiAgICB9XG5cbiAgICB2YXIgZGF0YSA9IHsgY2xhc3M6IGNsYXNzZXMgfTtcblxuICAgIHZhciBzY29wZWRTbG90ID1cbiAgICAgICF0aGlzLiRzY29wZWRTbG90cy4kaGFzTm9ybWFsICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0ICYmXG4gICAgICB0aGlzLiRzY29wZWRTbG90cy5kZWZhdWx0KHtcbiAgICAgICAgaHJlZjogaHJlZixcbiAgICAgICAgcm91dGU6IHJvdXRlLFxuICAgICAgICBuYXZpZ2F0ZTogaGFuZGxlcixcbiAgICAgICAgaXNBY3RpdmU6IGNsYXNzZXNbYWN0aXZlQ2xhc3NdLFxuICAgICAgICBpc0V4YWN0QWN0aXZlOiBjbGFzc2VzW2V4YWN0QWN0aXZlQ2xhc3NdXG4gICAgICB9KTtcblxuICAgIGlmIChzY29wZWRTbG90KSB7XG4gICAgICBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHNjb3BlZFNsb3RbMF1cbiAgICAgIH0gZWxzZSBpZiAoc2NvcGVkU2xvdC5sZW5ndGggPiAxIHx8ICFzY29wZWRTbG90Lmxlbmd0aCkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIChcIlJvdXRlckxpbmsgd2l0aCB0bz1cXFwiXCIgKyAodGhpcy50bykgKyBcIlxcXCIgaXMgdHJ5aW5nIHRvIHVzZSBhIHNjb3BlZCBzbG90IGJ1dCBpdCBkaWRuJ3QgcHJvdmlkZSBleGFjdGx5IG9uZSBjaGlsZC4gV3JhcHBpbmcgdGhlIGNvbnRlbnQgd2l0aCBhIHNwYW4gZWxlbWVudC5cIilcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzY29wZWRTbG90Lmxlbmd0aCA9PT0gMCA/IGgoKSA6IGgoJ3NwYW4nLCB7fSwgc2NvcGVkU2xvdClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy50YWcgPT09ICdhJykge1xuICAgICAgZGF0YS5vbiA9IG9uO1xuICAgICAgZGF0YS5hdHRycyA9IHsgaHJlZjogaHJlZiwgJ2FyaWEtY3VycmVudCc6IGFyaWFDdXJyZW50VmFsdWUgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZmluZCB0aGUgZmlyc3QgPGE+IGNoaWxkIGFuZCBhcHBseSBsaXN0ZW5lciBhbmQgaHJlZlxuICAgICAgdmFyIGEgPSBmaW5kQW5jaG9yKHRoaXMuJHNsb3RzLmRlZmF1bHQpO1xuICAgICAgaWYgKGEpIHtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgPGE+IGlzIGEgc3RhdGljIG5vZGVcbiAgICAgICAgYS5pc1N0YXRpYyA9IGZhbHNlO1xuICAgICAgICB2YXIgYURhdGEgPSAoYS5kYXRhID0gZXh0ZW5kKHt9LCBhLmRhdGEpKTtcbiAgICAgICAgYURhdGEub24gPSBhRGF0YS5vbiB8fCB7fTtcbiAgICAgICAgLy8gdHJhbnNmb3JtIGV4aXN0aW5nIGV2ZW50cyBpbiBib3RoIG9iamVjdHMgaW50byBhcnJheXMgc28gd2UgY2FuIHB1c2ggbGF0ZXJcbiAgICAgICAgZm9yICh2YXIgZXZlbnQgaW4gYURhdGEub24pIHtcbiAgICAgICAgICB2YXIgaGFuZGxlciQxID0gYURhdGEub25bZXZlbnRdO1xuICAgICAgICAgIGlmIChldmVudCBpbiBvbikge1xuICAgICAgICAgICAgYURhdGEub25bZXZlbnRdID0gQXJyYXkuaXNBcnJheShoYW5kbGVyJDEpID8gaGFuZGxlciQxIDogW2hhbmRsZXIkMV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIGFwcGVuZCBuZXcgbGlzdGVuZXJzIGZvciByb3V0ZXItbGlua1xuICAgICAgICBmb3IgKHZhciBldmVudCQxIGluIG9uKSB7XG4gICAgICAgICAgaWYgKGV2ZW50JDEgaW4gYURhdGEub24pIHtcbiAgICAgICAgICAgIC8vIG9uW2V2ZW50XSBpcyBhbHdheXMgYSBmdW5jdGlvblxuICAgICAgICAgICAgYURhdGEub25bZXZlbnQkMV0ucHVzaChvbltldmVudCQxXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFEYXRhLm9uW2V2ZW50JDFdID0gaGFuZGxlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYUF0dHJzID0gKGEuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYS5kYXRhLmF0dHJzKSk7XG4gICAgICAgIGFBdHRycy5ocmVmID0gaHJlZjtcbiAgICAgICAgYUF0dHJzWydhcmlhLWN1cnJlbnQnXSA9IGFyaWFDdXJyZW50VmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkb2Vzbid0IGhhdmUgPGE+IGNoaWxkLCBhcHBseSBsaXN0ZW5lciB0byBzZWxmXG4gICAgICAgIGRhdGEub24gPSBvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaCh0aGlzLnRhZywgZGF0YSwgdGhpcy4kc2xvdHMuZGVmYXVsdClcbiAgfVxufTtcblxuZnVuY3Rpb24gZ3VhcmRFdmVudCAoZSkge1xuICAvLyBkb24ndCByZWRpcmVjdCB3aXRoIGNvbnRyb2wga2V5c1xuICBpZiAoZS5tZXRhS2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLnNoaWZ0S2V5KSB7IHJldHVybiB9XG4gIC8vIGRvbid0IHJlZGlyZWN0IHdoZW4gcHJldmVudERlZmF1bHQgY2FsbGVkXG4gIGlmIChlLmRlZmF1bHRQcmV2ZW50ZWQpIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3Qgb24gcmlnaHQgY2xpY2tcbiAgaWYgKGUuYnV0dG9uICE9PSB1bmRlZmluZWQgJiYgZS5idXR0b24gIT09IDApIHsgcmV0dXJuIH1cbiAgLy8gZG9uJ3QgcmVkaXJlY3QgaWYgYHRhcmdldD1cIl9ibGFua1wiYFxuICBpZiAoZS5jdXJyZW50VGFyZ2V0ICYmIGUuY3VycmVudFRhcmdldC5nZXRBdHRyaWJ1dGUpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZS5jdXJyZW50VGFyZ2V0LmdldEF0dHJpYnV0ZSgndGFyZ2V0Jyk7XG4gICAgaWYgKC9cXGJfYmxhbmtcXGIvaS50ZXN0KHRhcmdldCkpIHsgcmV0dXJuIH1cbiAgfVxuICAvLyB0aGlzIG1heSBiZSBhIFdlZXggZXZlbnQgd2hpY2ggZG9lc24ndCBoYXZlIHRoaXMgbWV0aG9kXG4gIGlmIChlLnByZXZlbnREZWZhdWx0KSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB9XG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIGZpbmRBbmNob3IgKGNoaWxkcmVuKSB7XG4gIGlmIChjaGlsZHJlbikge1xuICAgIHZhciBjaGlsZDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ2EnKSB7XG4gICAgICAgIHJldHVybiBjaGlsZFxuICAgICAgfVxuICAgICAgaWYgKGNoaWxkLmNoaWxkcmVuICYmIChjaGlsZCA9IGZpbmRBbmNob3IoY2hpbGQuY2hpbGRyZW4pKSkge1xuICAgICAgICByZXR1cm4gY2hpbGRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIF9WdWU7XG5cbmZ1bmN0aW9uIGluc3RhbGwgKFZ1ZSkge1xuICBpZiAoaW5zdGFsbC5pbnN0YWxsZWQgJiYgX1Z1ZSA9PT0gVnVlKSB7IHJldHVybiB9XG4gIGluc3RhbGwuaW5zdGFsbGVkID0gdHJ1ZTtcblxuICBfVnVlID0gVnVlO1xuXG4gIHZhciBpc0RlZiA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiB2ICE9PSB1bmRlZmluZWQ7IH07XG5cbiAgdmFyIHJlZ2lzdGVySW5zdGFuY2UgPSBmdW5jdGlvbiAodm0sIGNhbGxWYWwpIHtcbiAgICB2YXIgaSA9IHZtLiRvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgICBpZiAoaXNEZWYoaSkgJiYgaXNEZWYoaSA9IGkuZGF0YSkgJiYgaXNEZWYoaSA9IGkucmVnaXN0ZXJSb3V0ZUluc3RhbmNlKSkge1xuICAgICAgaSh2bSwgY2FsbFZhbCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5taXhpbih7XG4gICAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUgKCkge1xuICAgICAgaWYgKGlzRGVmKHRoaXMuJG9wdGlvbnMucm91dGVyKSkge1xuICAgICAgICB0aGlzLl9yb3V0ZXJSb290ID0gdGhpcztcbiAgICAgICAgdGhpcy5fcm91dGVyID0gdGhpcy4kb3B0aW9ucy5yb3V0ZXI7XG4gICAgICAgIHRoaXMuX3JvdXRlci5pbml0KHRoaXMpO1xuICAgICAgICBWdWUudXRpbC5kZWZpbmVSZWFjdGl2ZSh0aGlzLCAnX3JvdXRlJywgdGhpcy5fcm91dGVyLmhpc3RvcnkuY3VycmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9yb3V0ZXJSb290ID0gKHRoaXMuJHBhcmVudCAmJiB0aGlzLiRwYXJlbnQuX3JvdXRlclJvb3QpIHx8IHRoaXM7XG4gICAgICB9XG4gICAgICByZWdpc3Rlckluc3RhbmNlKHRoaXMsIHRoaXMpO1xuICAgIH0sXG4gICAgZGVzdHJveWVkOiBmdW5jdGlvbiBkZXN0cm95ZWQgKCkge1xuICAgICAgcmVnaXN0ZXJJbnN0YW5jZSh0aGlzKTtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHJvdXRlcicsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7IHJldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZXIgfVxuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRyb3V0ZScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7IHJldHVybiB0aGlzLl9yb3V0ZXJSb290Ll9yb3V0ZSB9XG4gIH0pO1xuXG4gIFZ1ZS5jb21wb25lbnQoJ1JvdXRlclZpZXcnLCBWaWV3KTtcbiAgVnVlLmNvbXBvbmVudCgnUm91dGVyTGluaycsIExpbmspO1xuXG4gIHZhciBzdHJhdHMgPSBWdWUuY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcbiAgLy8gdXNlIHRoZSBzYW1lIGhvb2sgbWVyZ2luZyBzdHJhdGVneSBmb3Igcm91dGUgaG9va3NcbiAgc3RyYXRzLmJlZm9yZVJvdXRlRW50ZXIgPSBzdHJhdHMuYmVmb3JlUm91dGVMZWF2ZSA9IHN0cmF0cy5iZWZvcmVSb3V0ZVVwZGF0ZSA9IHN0cmF0cy5jcmVhdGVkO1xufVxuXG4vKiAgKi9cblxudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gY3JlYXRlUm91dGVNYXAgKFxuICByb3V0ZXMsXG4gIG9sZFBhdGhMaXN0LFxuICBvbGRQYXRoTWFwLFxuICBvbGROYW1lTWFwXG4pIHtcbiAgLy8gdGhlIHBhdGggbGlzdCBpcyB1c2VkIHRvIGNvbnRyb2wgcGF0aCBtYXRjaGluZyBwcmlvcml0eVxuICB2YXIgcGF0aExpc3QgPSBvbGRQYXRoTGlzdCB8fCBbXTtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciBwYXRoTWFwID0gb2xkUGF0aE1hcCB8fCBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgdmFyIG5hbWVNYXAgPSBvbGROYW1lTWFwIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgcm91dGVzLmZvckVhY2goZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgYWRkUm91dGVSZWNvcmQocGF0aExpc3QsIHBhdGhNYXAsIG5hbWVNYXAsIHJvdXRlKTtcbiAgfSk7XG5cbiAgLy8gZW5zdXJlIHdpbGRjYXJkIHJvdXRlcyBhcmUgYWx3YXlzIGF0IHRoZSBlbmRcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBwYXRoTGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAocGF0aExpc3RbaV0gPT09ICcqJykge1xuICAgICAgcGF0aExpc3QucHVzaChwYXRoTGlzdC5zcGxpY2UoaSwgMSlbMF0pO1xuICAgICAgbC0tO1xuICAgICAgaS0tO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ2RldmVsb3BtZW50Jykge1xuICAgIC8vIHdhcm4gaWYgcm91dGVzIGRvIG5vdCBpbmNsdWRlIGxlYWRpbmcgc2xhc2hlc1xuICAgIHZhciBmb3VuZCA9IHBhdGhMaXN0XG4gICAgLy8gY2hlY2sgZm9yIG1pc3NpbmcgbGVhZGluZyBzbGFzaFxuICAgICAgLmZpbHRlcihmdW5jdGlvbiAocGF0aCkgeyByZXR1cm4gcGF0aCAmJiBwYXRoLmNoYXJBdCgwKSAhPT0gJyonICYmIHBhdGguY2hhckF0KDApICE9PSAnLyc7IH0pO1xuXG4gICAgaWYgKGZvdW5kLmxlbmd0aCA+IDApIHtcbiAgICAgIHZhciBwYXRoTmFtZXMgPSBmb3VuZC5tYXAoZnVuY3Rpb24gKHBhdGgpIHsgcmV0dXJuIChcIi0gXCIgKyBwYXRoKTsgfSkuam9pbignXFxuJyk7XG4gICAgICB3YXJuKGZhbHNlLCAoXCJOb24tbmVzdGVkIHJvdXRlcyBtdXN0IGluY2x1ZGUgYSBsZWFkaW5nIHNsYXNoIGNoYXJhY3Rlci4gRml4IHRoZSBmb2xsb3dpbmcgcm91dGVzOiBcXG5cIiArIHBhdGhOYW1lcykpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aExpc3Q6IHBhdGhMaXN0LFxuICAgIHBhdGhNYXA6IHBhdGhNYXAsXG4gICAgbmFtZU1hcDogbmFtZU1hcFxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZFJvdXRlUmVjb3JkIChcbiAgcGF0aExpc3QsXG4gIHBhdGhNYXAsXG4gIG5hbWVNYXAsXG4gIHJvdXRlLFxuICBwYXJlbnQsXG4gIG1hdGNoQXNcbikge1xuICB2YXIgcGF0aCA9IHJvdXRlLnBhdGg7XG4gIHZhciBuYW1lID0gcm91dGUubmFtZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBhc3NlcnQocGF0aCAhPSBudWxsLCBcIlxcXCJwYXRoXFxcIiBpcyByZXF1aXJlZCBpbiBhIHJvdXRlIGNvbmZpZ3VyYXRpb24uXCIpO1xuICAgIGFzc2VydChcbiAgICAgIHR5cGVvZiByb3V0ZS5jb21wb25lbnQgIT09ICdzdHJpbmcnLFxuICAgICAgXCJyb3V0ZSBjb25maWcgXFxcImNvbXBvbmVudFxcXCIgZm9yIHBhdGg6IFwiICsgKFN0cmluZyhcbiAgICAgICAgcGF0aCB8fCBuYW1lXG4gICAgICApKSArIFwiIGNhbm5vdCBiZSBhIFwiICsgXCJzdHJpbmcgaWQuIFVzZSBhbiBhY3R1YWwgY29tcG9uZW50IGluc3RlYWQuXCJcbiAgICApO1xuXG4gICAgd2FybihcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250cm9sLXJlZ2V4XG4gICAgICAhL1teXFx1MDAwMC1cXHUwMDdGXSsvLnRlc3QocGF0aCksXG4gICAgICBcIlJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIGNvbnRhaW5zIHVuZW5jb2RlZCBjaGFyYWN0ZXJzLCBtYWtlIHN1cmUgXCIgK1xuICAgICAgICBcInlvdXIgcGF0aCBpcyBjb3JyZWN0bHkgZW5jb2RlZCBiZWZvcmUgcGFzc2luZyBpdCB0byB0aGUgcm91dGVyLiBVc2UgXCIgK1xuICAgICAgICBcImVuY29kZVVSSSB0byBlbmNvZGUgc3RhdGljIHNlZ21lbnRzIG9mIHlvdXIgcGF0aC5cIlxuICAgICk7XG4gIH1cblxuICB2YXIgcGF0aFRvUmVnZXhwT3B0aW9ucyA9XG4gICAgcm91dGUucGF0aFRvUmVnZXhwT3B0aW9ucyB8fCB7fTtcbiAgdmFyIG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplUGF0aChwYXRoLCBwYXJlbnQsIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc3RyaWN0KTtcblxuICBpZiAodHlwZW9mIHJvdXRlLmNhc2VTZW5zaXRpdmUgPT09ICdib29sZWFuJykge1xuICAgIHBhdGhUb1JlZ2V4cE9wdGlvbnMuc2Vuc2l0aXZlID0gcm91dGUuY2FzZVNlbnNpdGl2ZTtcbiAgfVxuXG4gIHZhciByZWNvcmQgPSB7XG4gICAgcGF0aDogbm9ybWFsaXplZFBhdGgsXG4gICAgcmVnZXg6IGNvbXBpbGVSb3V0ZVJlZ2V4KG5vcm1hbGl6ZWRQYXRoLCBwYXRoVG9SZWdleHBPcHRpb25zKSxcbiAgICBjb21wb25lbnRzOiByb3V0ZS5jb21wb25lbnRzIHx8IHsgZGVmYXVsdDogcm91dGUuY29tcG9uZW50IH0sXG4gICAgaW5zdGFuY2VzOiB7fSxcbiAgICBlbnRlcmVkQ2JzOiB7fSxcbiAgICBuYW1lOiBuYW1lLFxuICAgIHBhcmVudDogcGFyZW50LFxuICAgIG1hdGNoQXM6IG1hdGNoQXMsXG4gICAgcmVkaXJlY3Q6IHJvdXRlLnJlZGlyZWN0LFxuICAgIGJlZm9yZUVudGVyOiByb3V0ZS5iZWZvcmVFbnRlcixcbiAgICBtZXRhOiByb3V0ZS5tZXRhIHx8IHt9LFxuICAgIHByb3BzOlxuICAgICAgcm91dGUucHJvcHMgPT0gbnVsbFxuICAgICAgICA/IHt9XG4gICAgICAgIDogcm91dGUuY29tcG9uZW50c1xuICAgICAgICAgID8gcm91dGUucHJvcHNcbiAgICAgICAgICA6IHsgZGVmYXVsdDogcm91dGUucHJvcHMgfVxuICB9O1xuXG4gIGlmIChyb3V0ZS5jaGlsZHJlbikge1xuICAgIC8vIFdhcm4gaWYgcm91dGUgaXMgbmFtZWQsIGRvZXMgbm90IHJlZGlyZWN0IGFuZCBoYXMgYSBkZWZhdWx0IGNoaWxkIHJvdXRlLlxuICAgIC8vIElmIHVzZXJzIG5hdmlnYXRlIHRvIHRoaXMgcm91dGUgYnkgbmFtZSwgdGhlIGRlZmF1bHQgY2hpbGQgd2lsbFxuICAgIC8vIG5vdCBiZSByZW5kZXJlZCAoR0ggSXNzdWUgIzYyOSlcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKFxuICAgICAgICByb3V0ZS5uYW1lICYmXG4gICAgICAgICFyb3V0ZS5yZWRpcmVjdCAmJlxuICAgICAgICByb3V0ZS5jaGlsZHJlbi5zb21lKGZ1bmN0aW9uIChjaGlsZCkgeyByZXR1cm4gL15cXC8/JC8udGVzdChjaGlsZC5wYXRoKTsgfSlcbiAgICAgICkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIFwiTmFtZWQgUm91dGUgJ1wiICsgKHJvdXRlLm5hbWUpICsgXCInIGhhcyBhIGRlZmF1bHQgY2hpbGQgcm91dGUuIFwiICtcbiAgICAgICAgICAgIFwiV2hlbiBuYXZpZ2F0aW5nIHRvIHRoaXMgbmFtZWQgcm91dGUgKDp0bz1cXFwie25hbWU6ICdcIiArIChyb3V0ZS5uYW1lKSArIFwiJ1xcXCIpLCBcIiArXG4gICAgICAgICAgICBcInRoZSBkZWZhdWx0IGNoaWxkIHJvdXRlIHdpbGwgbm90IGJlIHJlbmRlcmVkLiBSZW1vdmUgdGhlIG5hbWUgZnJvbSBcIiArXG4gICAgICAgICAgICBcInRoaXMgcm91dGUgYW5kIHVzZSB0aGUgbmFtZSBvZiB0aGUgZGVmYXVsdCBjaGlsZCByb3V0ZSBmb3IgbmFtZWQgXCIgK1xuICAgICAgICAgICAgXCJsaW5rcyBpbnN0ZWFkLlwiXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJvdXRlLmNoaWxkcmVuLmZvckVhY2goZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICB2YXIgY2hpbGRNYXRjaEFzID0gbWF0Y2hBc1xuICAgICAgICA/IGNsZWFuUGF0aCgobWF0Y2hBcyArIFwiL1wiICsgKGNoaWxkLnBhdGgpKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBhZGRSb3V0ZVJlY29yZChwYXRoTGlzdCwgcGF0aE1hcCwgbmFtZU1hcCwgY2hpbGQsIHJlY29yZCwgY2hpbGRNYXRjaEFzKTtcbiAgICB9KTtcbiAgfVxuXG4gIGlmICghcGF0aE1hcFtyZWNvcmQucGF0aF0pIHtcbiAgICBwYXRoTGlzdC5wdXNoKHJlY29yZC5wYXRoKTtcbiAgICBwYXRoTWFwW3JlY29yZC5wYXRoXSA9IHJlY29yZDtcbiAgfVxuXG4gIGlmIChyb3V0ZS5hbGlhcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGFsaWFzZXMgPSBBcnJheS5pc0FycmF5KHJvdXRlLmFsaWFzKSA/IHJvdXRlLmFsaWFzIDogW3JvdXRlLmFsaWFzXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsaWFzZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBhbGlhcyA9IGFsaWFzZXNbaV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBhbGlhcyA9PT0gcGF0aCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgIChcIkZvdW5kIGFuIGFsaWFzIHdpdGggdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCIuIFlvdSBoYXZlIHRvIHJlbW92ZSB0aGF0IGFsaWFzLiBJdCB3aWxsIGJlIGlnbm9yZWQgaW4gZGV2ZWxvcG1lbnQuXCIpXG4gICAgICAgICk7XG4gICAgICAgIC8vIHNraXAgaW4gZGV2IHRvIG1ha2UgaXQgd29ya1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgYWxpYXNSb3V0ZSA9IHtcbiAgICAgICAgcGF0aDogYWxpYXMsXG4gICAgICAgIGNoaWxkcmVuOiByb3V0ZS5jaGlsZHJlblxuICAgICAgfTtcbiAgICAgIGFkZFJvdXRlUmVjb3JkKFxuICAgICAgICBwYXRoTGlzdCxcbiAgICAgICAgcGF0aE1hcCxcbiAgICAgICAgbmFtZU1hcCxcbiAgICAgICAgYWxpYXNSb3V0ZSxcbiAgICAgICAgcGFyZW50LFxuICAgICAgICByZWNvcmQucGF0aCB8fCAnLycgLy8gbWF0Y2hBc1xuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBpZiAobmFtZSkge1xuICAgIGlmICghbmFtZU1hcFtuYW1lXSkge1xuICAgICAgbmFtZU1hcFtuYW1lXSA9IHJlY29yZDtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIW1hdGNoQXMpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGZhbHNlLFxuICAgICAgICBcIkR1cGxpY2F0ZSBuYW1lZCByb3V0ZXMgZGVmaW5pdGlvbjogXCIgK1xuICAgICAgICAgIFwieyBuYW1lOiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLCBwYXRoOiBcXFwiXCIgKyAocmVjb3JkLnBhdGgpICsgXCJcXFwiIH1cIlxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tcGlsZVJvdXRlUmVnZXggKFxuICBwYXRoLFxuICBwYXRoVG9SZWdleHBPcHRpb25zXG4pIHtcbiAgdmFyIHJlZ2V4ID0gcGF0aFRvUmVnZXhwXzEocGF0aCwgW10sIHBhdGhUb1JlZ2V4cE9wdGlvbnMpO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICByZWdleC5rZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgd2FybihcbiAgICAgICAgIWtleXNba2V5Lm5hbWVdLFxuICAgICAgICAoXCJEdXBsaWNhdGUgcGFyYW0ga2V5cyBpbiByb3V0ZSB3aXRoIHBhdGg6IFxcXCJcIiArIHBhdGggKyBcIlxcXCJcIilcbiAgICAgICk7XG4gICAgICBrZXlzW2tleS5uYW1lXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHJlZ2V4XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGggKFxuICBwYXRoLFxuICBwYXJlbnQsXG4gIHN0cmljdFxuKSB7XG4gIGlmICghc3RyaWN0KSB7IHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcLyQvLCAnJyk7IH1cbiAgaWYgKHBhdGhbMF0gPT09ICcvJykgeyByZXR1cm4gcGF0aCB9XG4gIGlmIChwYXJlbnQgPT0gbnVsbCkgeyByZXR1cm4gcGF0aCB9XG4gIHJldHVybiBjbGVhblBhdGgoKChwYXJlbnQucGF0aCkgKyBcIi9cIiArIHBhdGgpKVxufVxuXG4vKiAgKi9cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZU1hdGNoZXIgKFxuICByb3V0ZXMsXG4gIHJvdXRlclxuKSB7XG4gIHZhciByZWYgPSBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMpO1xuICB2YXIgcGF0aExpc3QgPSByZWYucGF0aExpc3Q7XG4gIHZhciBwYXRoTWFwID0gcmVmLnBhdGhNYXA7XG4gIHZhciBuYW1lTWFwID0gcmVmLm5hbWVNYXA7XG5cbiAgZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgICBjcmVhdGVSb3V0ZU1hcChyb3V0ZXMsIHBhdGhMaXN0LCBwYXRoTWFwLCBuYW1lTWFwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hdGNoIChcbiAgICByYXcsXG4gICAgY3VycmVudFJvdXRlLFxuICAgIHJlZGlyZWN0ZWRGcm9tXG4gICkge1xuICAgIHZhciBsb2NhdGlvbiA9IG5vcm1hbGl6ZUxvY2F0aW9uKHJhdywgY3VycmVudFJvdXRlLCBmYWxzZSwgcm91dGVyKTtcbiAgICB2YXIgbmFtZSA9IGxvY2F0aW9uLm5hbWU7XG5cbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFyIHJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKHJlY29yZCwgKFwiUm91dGUgd2l0aCBuYW1lICdcIiArIG5hbWUgKyBcIicgZG9lcyBub3QgZXhpc3RcIikpO1xuICAgICAgfVxuICAgICAgaWYgKCFyZWNvcmQpIHsgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbikgfVxuICAgICAgdmFyIHBhcmFtTmFtZXMgPSByZWNvcmQucmVnZXgua2V5c1xuICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuICFrZXkub3B0aW9uYWw7IH0pXG4gICAgICAgIC5tYXAoZnVuY3Rpb24gKGtleSkgeyByZXR1cm4ga2V5Lm5hbWU7IH0pO1xuXG4gICAgICBpZiAodHlwZW9mIGxvY2F0aW9uLnBhcmFtcyAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbG9jYXRpb24ucGFyYW1zID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmIChjdXJyZW50Um91dGUgJiYgdHlwZW9mIGN1cnJlbnRSb3V0ZS5wYXJhbXMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50Um91dGUucGFyYW1zKSB7XG4gICAgICAgICAgaWYgKCEoa2V5IGluIGxvY2F0aW9uLnBhcmFtcykgJiYgcGFyYW1OYW1lcy5pbmRleE9mKGtleSkgPiAtMSkge1xuICAgICAgICAgICAgbG9jYXRpb24ucGFyYW1zW2tleV0gPSBjdXJyZW50Um91dGUucGFyYW1zW2tleV07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxvY2F0aW9uLnBhdGggPSBmaWxsUGFyYW1zKHJlY29yZC5wYXRoLCBsb2NhdGlvbi5wYXJhbXMsIChcIm5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCJcIikpO1xuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShyZWNvcmQsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGgpIHtcbiAgICAgIGxvY2F0aW9uLnBhcmFtcyA9IHt9O1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgcGF0aCA9IHBhdGhMaXN0W2ldO1xuICAgICAgICB2YXIgcmVjb3JkJDEgPSBwYXRoTWFwW3BhdGhdO1xuICAgICAgICBpZiAobWF0Y2hSb3V0ZShyZWNvcmQkMS5yZWdleCwgbG9jYXRpb24ucGF0aCwgbG9jYXRpb24ucGFyYW1zKSkge1xuICAgICAgICAgIHJldHVybiBfY3JlYXRlUm91dGUocmVjb3JkJDEsIGxvY2F0aW9uLCByZWRpcmVjdGVkRnJvbSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBubyBtYXRjaFxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiByZWRpcmVjdCAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uXG4gICkge1xuICAgIHZhciBvcmlnaW5hbFJlZGlyZWN0ID0gcmVjb3JkLnJlZGlyZWN0O1xuICAgIHZhciByZWRpcmVjdCA9IHR5cGVvZiBvcmlnaW5hbFJlZGlyZWN0ID09PSAnZnVuY3Rpb24nXG4gICAgICA/IG9yaWdpbmFsUmVkaXJlY3QoY3JlYXRlUm91dGUocmVjb3JkLCBsb2NhdGlvbiwgbnVsbCwgcm91dGVyKSlcbiAgICAgIDogb3JpZ2luYWxSZWRpcmVjdDtcblxuICAgIGlmICh0eXBlb2YgcmVkaXJlY3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZWRpcmVjdCA9IHsgcGF0aDogcmVkaXJlY3QgfTtcbiAgICB9XG5cbiAgICBpZiAoIXJlZGlyZWN0IHx8IHR5cGVvZiByZWRpcmVjdCAhPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgZmFsc2UsIChcImludmFsaWQgcmVkaXJlY3Qgb3B0aW9uOiBcIiArIChKU09OLnN0cmluZ2lmeShyZWRpcmVjdCkpKVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG5cbiAgICB2YXIgcmUgPSByZWRpcmVjdDtcbiAgICB2YXIgbmFtZSA9IHJlLm5hbWU7XG4gICAgdmFyIHBhdGggPSByZS5wYXRoO1xuICAgIHZhciBxdWVyeSA9IGxvY2F0aW9uLnF1ZXJ5O1xuICAgIHZhciBoYXNoID0gbG9jYXRpb24uaGFzaDtcbiAgICB2YXIgcGFyYW1zID0gbG9jYXRpb24ucGFyYW1zO1xuICAgIHF1ZXJ5ID0gcmUuaGFzT3duUHJvcGVydHkoJ3F1ZXJ5JykgPyByZS5xdWVyeSA6IHF1ZXJ5O1xuICAgIGhhc2ggPSByZS5oYXNPd25Qcm9wZXJ0eSgnaGFzaCcpID8gcmUuaGFzaCA6IGhhc2g7XG4gICAgcGFyYW1zID0gcmUuaGFzT3duUHJvcGVydHkoJ3BhcmFtcycpID8gcmUucGFyYW1zIDogcGFyYW1zO1xuXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIC8vIHJlc29sdmVkIG5hbWVkIGRpcmVjdFxuICAgICAgdmFyIHRhcmdldFJlY29yZCA9IG5hbWVNYXBbbmFtZV07XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQodGFyZ2V0UmVjb3JkLCAoXCJyZWRpcmVjdCBmYWlsZWQ6IG5hbWVkIHJvdXRlIFxcXCJcIiArIG5hbWUgKyBcIlxcXCIgbm90IGZvdW5kLlwiKSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWF0Y2goe1xuICAgICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoLFxuICAgICAgICBwYXJhbXM6IHBhcmFtc1xuICAgICAgfSwgdW5kZWZpbmVkLCBsb2NhdGlvbilcbiAgICB9IGVsc2UgaWYgKHBhdGgpIHtcbiAgICAgIC8vIDEuIHJlc29sdmUgcmVsYXRpdmUgcmVkaXJlY3RcbiAgICAgIHZhciByYXdQYXRoID0gcmVzb2x2ZVJlY29yZFBhdGgocGF0aCwgcmVjb3JkKTtcbiAgICAgIC8vIDIuIHJlc29sdmUgcGFyYW1zXG4gICAgICB2YXIgcmVzb2x2ZWRQYXRoID0gZmlsbFBhcmFtcyhyYXdQYXRoLCBwYXJhbXMsIChcInJlZGlyZWN0IHJvdXRlIHdpdGggcGF0aCBcXFwiXCIgKyByYXdQYXRoICsgXCJcXFwiXCIpKTtcbiAgICAgIC8vIDMuIHJlbWF0Y2ggd2l0aCBleGlzdGluZyBxdWVyeSBhbmQgaGFzaFxuICAgICAgcmV0dXJuIG1hdGNoKHtcbiAgICAgICAgX25vcm1hbGl6ZWQ6IHRydWUsXG4gICAgICAgIHBhdGg6IHJlc29sdmVkUGF0aCxcbiAgICAgICAgcXVlcnk6IHF1ZXJ5LFxuICAgICAgICBoYXNoOiBoYXNoXG4gICAgICB9LCB1bmRlZmluZWQsIGxvY2F0aW9uKVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICB3YXJuKGZhbHNlLCAoXCJpbnZhbGlkIHJlZGlyZWN0IG9wdGlvbjogXCIgKyAoSlNPTi5zdHJpbmdpZnkocmVkaXJlY3QpKSkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9jcmVhdGVSb3V0ZShudWxsLCBsb2NhdGlvbilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhbGlhcyAoXG4gICAgcmVjb3JkLFxuICAgIGxvY2F0aW9uLFxuICAgIG1hdGNoQXNcbiAgKSB7XG4gICAgdmFyIGFsaWFzZWRQYXRoID0gZmlsbFBhcmFtcyhtYXRjaEFzLCBsb2NhdGlvbi5wYXJhbXMsIChcImFsaWFzZWQgcm91dGUgd2l0aCBwYXRoIFxcXCJcIiArIG1hdGNoQXMgKyBcIlxcXCJcIikpO1xuICAgIHZhciBhbGlhc2VkTWF0Y2ggPSBtYXRjaCh7XG4gICAgICBfbm9ybWFsaXplZDogdHJ1ZSxcbiAgICAgIHBhdGg6IGFsaWFzZWRQYXRoXG4gICAgfSk7XG4gICAgaWYgKGFsaWFzZWRNYXRjaCkge1xuICAgICAgdmFyIG1hdGNoZWQgPSBhbGlhc2VkTWF0Y2gubWF0Y2hlZDtcbiAgICAgIHZhciBhbGlhc2VkUmVjb3JkID0gbWF0Y2hlZFttYXRjaGVkLmxlbmd0aCAtIDFdO1xuICAgICAgbG9jYXRpb24ucGFyYW1zID0gYWxpYXNlZE1hdGNoLnBhcmFtcztcbiAgICAgIHJldHVybiBfY3JlYXRlUm91dGUoYWxpYXNlZFJlY29yZCwgbG9jYXRpb24pXG4gICAgfVxuICAgIHJldHVybiBfY3JlYXRlUm91dGUobnVsbCwgbG9jYXRpb24pXG4gIH1cblxuICBmdW5jdGlvbiBfY3JlYXRlUm91dGUgKFxuICAgIHJlY29yZCxcbiAgICBsb2NhdGlvbixcbiAgICByZWRpcmVjdGVkRnJvbVxuICApIHtcbiAgICBpZiAocmVjb3JkICYmIHJlY29yZC5yZWRpcmVjdCkge1xuICAgICAgcmV0dXJuIHJlZGlyZWN0KHJlY29yZCwgcmVkaXJlY3RlZEZyb20gfHwgbG9jYXRpb24pXG4gICAgfVxuICAgIGlmIChyZWNvcmQgJiYgcmVjb3JkLm1hdGNoQXMpIHtcbiAgICAgIHJldHVybiBhbGlhcyhyZWNvcmQsIGxvY2F0aW9uLCByZWNvcmQubWF0Y2hBcylcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZVJvdXRlKHJlY29yZCwgbG9jYXRpb24sIHJlZGlyZWN0ZWRGcm9tLCByb3V0ZXIpXG4gIH1cblxuICByZXR1cm4ge1xuICAgIG1hdGNoOiBtYXRjaCxcbiAgICBhZGRSb3V0ZXM6IGFkZFJvdXRlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGUgKFxuICByZWdleCxcbiAgcGF0aCxcbiAgcGFyYW1zXG4pIHtcbiAgdmFyIG0gPSBwYXRoLm1hdGNoKHJlZ2V4KTtcblxuICBpZiAoIW0pIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfSBlbHNlIGlmICghcGFyYW1zKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAxLCBsZW4gPSBtLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gICAgdmFyIGtleSA9IHJlZ2V4LmtleXNbaSAtIDFdO1xuICAgIGlmIChrZXkpIHtcbiAgICAgIC8vIEZpeCAjMTk5NDogdXNpbmcgKiB3aXRoIHByb3BzOiB0cnVlIGdlbmVyYXRlcyBhIHBhcmFtIG5hbWVkIDBcbiAgICAgIHBhcmFtc1trZXkubmFtZSB8fCAncGF0aE1hdGNoJ10gPSB0eXBlb2YgbVtpXSA9PT0gJ3N0cmluZycgPyBkZWNvZGUobVtpXSkgOiBtW2ldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVSZWNvcmRQYXRoIChwYXRoLCByZWNvcmQpIHtcbiAgcmV0dXJuIHJlc29sdmVQYXRoKHBhdGgsIHJlY29yZC5wYXJlbnQgPyByZWNvcmQucGFyZW50LnBhdGggOiAnLycsIHRydWUpXG59XG5cbi8qICAqL1xuXG4vLyB1c2UgVXNlciBUaW1pbmcgYXBpIChpZiBwcmVzZW50KSBmb3IgbW9yZSBhY2N1cmF0ZSBrZXkgcHJlY2lzaW9uXG52YXIgVGltZSA9XG4gIGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2UgJiYgd2luZG93LnBlcmZvcm1hbmNlLm5vd1xuICAgID8gd2luZG93LnBlcmZvcm1hbmNlXG4gICAgOiBEYXRlO1xuXG5mdW5jdGlvbiBnZW5TdGF0ZUtleSAoKSB7XG4gIHJldHVybiBUaW1lLm5vdygpLnRvRml4ZWQoMylcbn1cblxudmFyIF9rZXkgPSBnZW5TdGF0ZUtleSgpO1xuXG5mdW5jdGlvbiBnZXRTdGF0ZUtleSAoKSB7XG4gIHJldHVybiBfa2V5XG59XG5cbmZ1bmN0aW9uIHNldFN0YXRlS2V5IChrZXkpIHtcbiAgcmV0dXJuIChfa2V5ID0ga2V5KVxufVxuXG4vKiAgKi9cblxudmFyIHBvc2l0aW9uU3RvcmUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBzZXR1cFNjcm9sbCAoKSB7XG4gIC8vIFByZXZlbnQgYnJvd3NlciBzY3JvbGwgYmVoYXZpb3Igb24gSGlzdG9yeSBwb3BzdGF0ZVxuICBpZiAoJ3Njcm9sbFJlc3RvcmF0aW9uJyBpbiB3aW5kb3cuaGlzdG9yeSkge1xuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gJ21hbnVhbCc7XG4gIH1cbiAgLy8gRml4IGZvciAjMTU4NSBmb3IgRmlyZWZveFxuICAvLyBGaXggZm9yICMyMTk1IEFkZCBvcHRpb25hbCB0aGlyZCBhdHRyaWJ1dGUgdG8gd29ya2Fyb3VuZCBhIGJ1ZyBpbiBzYWZhcmkgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE4MjY3OFxuICAvLyBGaXggZm9yICMyNzc0IFN1cHBvcnQgZm9yIGFwcHMgbG9hZGVkIGZyb20gV2luZG93cyBmaWxlIHNoYXJlcyBub3QgbWFwcGVkIHRvIG5ldHdvcmsgZHJpdmVzOiByZXBsYWNlZCBsb2NhdGlvbi5vcmlnaW4gd2l0aFxuICAvLyB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3RcbiAgLy8gbG9jYXRpb24uaG9zdCBjb250YWlucyB0aGUgcG9ydCBhbmQgbG9jYXRpb24uaG9zdG5hbWUgZG9lc24ndFxuICB2YXIgcHJvdG9jb2xBbmRQYXRoID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0O1xuICB2YXIgYWJzb2x1dGVQYXRoID0gd2luZG93LmxvY2F0aW9uLmhyZWYucmVwbGFjZShwcm90b2NvbEFuZFBhdGgsICcnKTtcbiAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgdmFyIHN0YXRlQ29weSA9IGV4dGVuZCh7fSwgd2luZG93Lmhpc3Rvcnkuc3RhdGUpO1xuICBzdGF0ZUNvcHkua2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKHN0YXRlQ29weSwgJycsIGFic29sdXRlUGF0aCk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVBvcFN0YXRlKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVQb3BTdGF0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlU2Nyb2xsIChcbiAgcm91dGVyLFxuICB0byxcbiAgZnJvbSxcbiAgaXNQb3Bcbikge1xuICBpZiAoIXJvdXRlci5hcHApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiZWhhdmlvciA9IHJvdXRlci5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICBpZiAoIWJlaGF2aW9yKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydCh0eXBlb2YgYmVoYXZpb3IgPT09ICdmdW5jdGlvbicsIFwic2Nyb2xsQmVoYXZpb3IgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO1xuICB9XG5cbiAgLy8gd2FpdCB1bnRpbCByZS1yZW5kZXIgZmluaXNoZXMgYmVmb3JlIHNjcm9sbGluZ1xuICByb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHBvc2l0aW9uID0gZ2V0U2Nyb2xsUG9zaXRpb24oKTtcbiAgICB2YXIgc2hvdWxkU2Nyb2xsID0gYmVoYXZpb3IuY2FsbChcbiAgICAgIHJvdXRlcixcbiAgICAgIHRvLFxuICAgICAgZnJvbSxcbiAgICAgIGlzUG9wID8gcG9zaXRpb24gOiBudWxsXG4gICAgKTtcblxuICAgIGlmICghc2hvdWxkU2Nyb2xsKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHNob3VsZFNjcm9sbC50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzaG91bGRTY3JvbGxcbiAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHNob3VsZFNjcm9sbCkge1xuICAgICAgICAgIHNjcm9sbFRvUG9zaXRpb24oKHNob3VsZFNjcm9sbCksIHBvc2l0aW9uKTtcbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBlcnIudG9TdHJpbmcoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2Nyb2xsVG9Qb3NpdGlvbihzaG91bGRTY3JvbGwsIHBvc2l0aW9uKTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24gKCkge1xuICB2YXIga2V5ID0gZ2V0U3RhdGVLZXkoKTtcbiAgaWYgKGtleSkge1xuICAgIHBvc2l0aW9uU3RvcmVba2V5XSA9IHtcbiAgICAgIHg6IHdpbmRvdy5wYWdlWE9mZnNldCxcbiAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUgKGUpIHtcbiAgc2F2ZVNjcm9sbFBvc2l0aW9uKCk7XG4gIGlmIChlLnN0YXRlICYmIGUuc3RhdGUua2V5KSB7XG4gICAgc2V0U3RhdGVLZXkoZS5zdGF0ZS5rZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNjcm9sbFBvc2l0aW9uICgpIHtcbiAgdmFyIGtleSA9IGdldFN0YXRlS2V5KCk7XG4gIGlmIChrZXkpIHtcbiAgICByZXR1cm4gcG9zaXRpb25TdG9yZVtrZXldXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RWxlbWVudFBvc2l0aW9uIChlbCwgb2Zmc2V0KSB7XG4gIHZhciBkb2NFbCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcbiAgdmFyIGRvY1JlY3QgPSBkb2NFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgdmFyIGVsUmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHg6IGVsUmVjdC5sZWZ0IC0gZG9jUmVjdC5sZWZ0IC0gb2Zmc2V0LngsXG4gICAgeTogZWxSZWN0LnRvcCAtIGRvY1JlY3QudG9wIC0gb2Zmc2V0LnlcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUG9zaXRpb24gKG9iaikge1xuICByZXR1cm4gaXNOdW1iZXIob2JqLngpIHx8IGlzTnVtYmVyKG9iai55KVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVQb3NpdGlvbiAob2JqKSB7XG4gIHJldHVybiB7XG4gICAgeDogaXNOdW1iZXIob2JqLngpID8gb2JqLnggOiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgeTogaXNOdW1iZXIob2JqLnkpID8gb2JqLnkgOiB3aW5kb3cucGFnZVlPZmZzZXRcbiAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQgKG9iaikge1xuICByZXR1cm4ge1xuICAgIHg6IGlzTnVtYmVyKG9iai54KSA/IG9iai54IDogMCxcbiAgICB5OiBpc051bWJlcihvYmoueSkgPyBvYmoueSA6IDBcbiAgfVxufVxuXG5mdW5jdGlvbiBpc051bWJlciAodikge1xuICByZXR1cm4gdHlwZW9mIHYgPT09ICdudW1iZXInXG59XG5cbnZhciBoYXNoU3RhcnRzV2l0aE51bWJlclJFID0gL14jXFxkLztcblxuZnVuY3Rpb24gc2Nyb2xsVG9Qb3NpdGlvbiAoc2hvdWxkU2Nyb2xsLCBwb3NpdGlvbikge1xuICB2YXIgaXNPYmplY3QgPSB0eXBlb2Ygc2hvdWxkU2Nyb2xsID09PSAnb2JqZWN0JztcbiAgaWYgKGlzT2JqZWN0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwuc2VsZWN0b3IgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZ2V0RWxlbWVudEJ5SWQgd291bGQgc3RpbGwgZmFpbCBpZiB0aGUgc2VsZWN0b3IgY29udGFpbnMgYSBtb3JlIGNvbXBsaWNhdGVkIHF1ZXJ5IGxpa2UgI21haW5bZGF0YS1hdHRyXVxuICAgIC8vIGJ1dCBhdCB0aGUgc2FtZSB0aW1lLCBpdCBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBzZWxlY3QgYW4gZWxlbWVudCB3aXRoIGFuIGlkIGFuZCBhbiBleHRyYSBzZWxlY3RvclxuICAgIHZhciBlbCA9IGhhc2hTdGFydHNXaXRoTnVtYmVyUkUudGVzdChzaG91bGRTY3JvbGwuc2VsZWN0b3IpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgPyBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChzaG91bGRTY3JvbGwuc2VsZWN0b3Iuc2xpY2UoMSkpIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgOiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHNob3VsZFNjcm9sbC5zZWxlY3Rvcik7XG5cbiAgICBpZiAoZWwpIHtcbiAgICAgIHZhciBvZmZzZXQgPVxuICAgICAgICBzaG91bGRTY3JvbGwub2Zmc2V0ICYmIHR5cGVvZiBzaG91bGRTY3JvbGwub2Zmc2V0ID09PSAnb2JqZWN0J1xuICAgICAgICAgID8gc2hvdWxkU2Nyb2xsLm9mZnNldFxuICAgICAgICAgIDoge307XG4gICAgICBvZmZzZXQgPSBub3JtYWxpemVPZmZzZXQob2Zmc2V0KTtcbiAgICAgIHBvc2l0aW9uID0gZ2V0RWxlbWVudFBvc2l0aW9uKGVsLCBvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICAgIHBvc2l0aW9uID0gbm9ybWFsaXplUG9zaXRpb24oc2hvdWxkU2Nyb2xsKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNPYmplY3QgJiYgaXNWYWxpZFBvc2l0aW9uKHNob3VsZFNjcm9sbCkpIHtcbiAgICBwb3NpdGlvbiA9IG5vcm1hbGl6ZVBvc2l0aW9uKHNob3VsZFNjcm9sbCk7XG4gIH1cblxuICBpZiAocG9zaXRpb24pIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBpZiAoJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUpIHtcbiAgICAgIHdpbmRvdy5zY3JvbGxUbyh7XG4gICAgICAgIGxlZnQ6IHBvc2l0aW9uLngsXG4gICAgICAgIHRvcDogcG9zaXRpb24ueSxcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIGJlaGF2aW9yOiBzaG91bGRTY3JvbGwuYmVoYXZpb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsVG8ocG9zaXRpb24ueCwgcG9zaXRpb24ueSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG52YXIgc3VwcG9ydHNQdXNoU3RhdGUgPVxuICBpbkJyb3dzZXIgJiZcbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICAgIGlmIChcbiAgICAgICh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJlxuICAgICAgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJlxuICAgICAgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmXG4gICAgICB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgdHlwZW9mIHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSA9PT0gJ2Z1bmN0aW9uJ1xuICB9KSgpO1xuXG5mdW5jdGlvbiBwdXNoU3RhdGUgKHVybCwgcmVwbGFjZSkge1xuICBzYXZlU2Nyb2xsUG9zaXRpb24oKTtcbiAgLy8gdHJ5Li4uY2F0Y2ggdGhlIHB1c2hTdGF0ZSBjYWxsIHRvIGdldCBhcm91bmQgU2FmYXJpXG4gIC8vIERPTSBFeGNlcHRpb24gMTggd2hlcmUgaXQgbGltaXRzIHRvIDEwMCBwdXNoU3RhdGUgY2FsbHNcbiAgdmFyIGhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdHJ5IHtcbiAgICBpZiAocmVwbGFjZSkge1xuICAgICAgLy8gcHJlc2VydmUgZXhpc3RpbmcgaGlzdG9yeSBzdGF0ZSBhcyBpdCBjb3VsZCBiZSBvdmVycmlkZW4gYnkgdGhlIHVzZXJcbiAgICAgIHZhciBzdGF0ZUNvcHkgPSBleHRlbmQoe30sIGhpc3Rvcnkuc3RhdGUpO1xuICAgICAgc3RhdGVDb3B5LmtleSA9IGdldFN0YXRlS2V5KCk7XG4gICAgICBoaXN0b3J5LnJlcGxhY2VTdGF0ZShzdGF0ZUNvcHksICcnLCB1cmwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBoaXN0b3J5LnB1c2hTdGF0ZSh7IGtleTogc2V0U3RhdGVLZXkoZ2VuU3RhdGVLZXkoKSkgfSwgJycsIHVybCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgd2luZG93LmxvY2F0aW9uW3JlcGxhY2UgPyAncmVwbGFjZScgOiAnYXNzaWduJ10odXJsKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXBsYWNlU3RhdGUgKHVybCkge1xuICBwdXNoU3RhdGUodXJsLCB0cnVlKTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJ1blF1ZXVlIChxdWV1ZSwgZm4sIGNiKSB7XG4gIHZhciBzdGVwID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgaWYgKGluZGV4ID49IHF1ZXVlLmxlbmd0aCkge1xuICAgICAgY2IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHF1ZXVlW2luZGV4XSkge1xuICAgICAgICBmbihxdWV1ZVtpbmRleF0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBzdGVwKGluZGV4ICsgMSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RlcChpbmRleCArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc3RlcCgwKTtcbn1cblxuLy8gV2hlbiBjaGFuZ2luZyB0aGluZywgYWxzbyBlZGl0IHJvdXRlci5kLnRzXG52YXIgTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0ge1xuICByZWRpcmVjdGVkOiAyLFxuICBhYm9ydGVkOiA0LFxuICBjYW5jZWxsZWQ6IDgsXG4gIGR1cGxpY2F0ZWQ6IDE2XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uUmVkaXJlY3RlZEVycm9yIChmcm9tLCB0bykge1xuICByZXR1cm4gY3JlYXRlUm91dGVyRXJyb3IoXG4gICAgZnJvbSxcbiAgICB0byxcbiAgICBOYXZpZ2F0aW9uRmFpbHVyZVR5cGUucmVkaXJlY3RlZCxcbiAgICAoXCJSZWRpcmVjdGVkIHdoZW4gZ29pbmcgZnJvbSBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIgdG8gXFxcIlwiICsgKHN0cmluZ2lmeVJvdXRlKFxuICAgICAgdG9cbiAgICApKSArIFwiXFxcIiB2aWEgYSBuYXZpZ2F0aW9uIGd1YXJkLlwiKVxuICApXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5hdmlnYXRpb25EdXBsaWNhdGVkRXJyb3IgKGZyb20sIHRvKSB7XG4gIHZhciBlcnJvciA9IGNyZWF0ZVJvdXRlckVycm9yKFxuICAgIGZyb20sXG4gICAgdG8sXG4gICAgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQsXG4gICAgKFwiQXZvaWRlZCByZWR1bmRhbnQgbmF2aWdhdGlvbiB0byBjdXJyZW50IGxvY2F0aW9uOiBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIuXCIpXG4gICk7XG4gIC8vIGJhY2t3YXJkcyBjb21wYXRpYmxlIHdpdGggdGhlIGZpcnN0IGludHJvZHVjdGlvbiBvZiBFcnJvcnNcbiAgZXJyb3IubmFtZSA9ICdOYXZpZ2F0aW9uRHVwbGljYXRlZCc7XG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IgKGZyb20sIHRvKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXJFcnJvcihcbiAgICBmcm9tLFxuICAgIHRvLFxuICAgIE5hdmlnYXRpb25GYWlsdXJlVHlwZS5jYW5jZWxsZWQsXG4gICAgKFwiTmF2aWdhdGlvbiBjYW5jZWxsZWQgZnJvbSBcXFwiXCIgKyAoZnJvbS5mdWxsUGF0aCkgKyBcIlxcXCIgdG8gXFxcIlwiICsgKHRvLmZ1bGxQYXRoKSArIFwiXFxcIiB3aXRoIGEgbmV3IG5hdmlnYXRpb24uXCIpXG4gIClcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmF2aWdhdGlvbkFib3J0ZWRFcnJvciAoZnJvbSwgdG8pIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlckVycm9yKFxuICAgIGZyb20sXG4gICAgdG8sXG4gICAgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmFib3J0ZWQsXG4gICAgKFwiTmF2aWdhdGlvbiBhYm9ydGVkIGZyb20gXFxcIlwiICsgKGZyb20uZnVsbFBhdGgpICsgXCJcXFwiIHRvIFxcXCJcIiArICh0by5mdWxsUGF0aCkgKyBcIlxcXCIgdmlhIGEgbmF2aWdhdGlvbiBndWFyZC5cIilcbiAgKVxufVxuXG5mdW5jdGlvbiBjcmVhdGVSb3V0ZXJFcnJvciAoZnJvbSwgdG8sIHR5cGUsIG1lc3NhZ2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICBlcnJvci5faXNSb3V0ZXIgPSB0cnVlO1xuICBlcnJvci5mcm9tID0gZnJvbTtcbiAgZXJyb3IudG8gPSB0bztcbiAgZXJyb3IudHlwZSA9IHR5cGU7XG5cbiAgcmV0dXJuIGVycm9yXG59XG5cbnZhciBwcm9wZXJ0aWVzVG9Mb2cgPSBbJ3BhcmFtcycsICdxdWVyeScsICdoYXNoJ107XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVJvdXRlICh0bykge1xuICBpZiAodHlwZW9mIHRvID09PSAnc3RyaW5nJykgeyByZXR1cm4gdG8gfVxuICBpZiAoJ3BhdGgnIGluIHRvKSB7IHJldHVybiB0by5wYXRoIH1cbiAgdmFyIGxvY2F0aW9uID0ge307XG4gIHByb3BlcnRpZXNUb0xvZy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5IGluIHRvKSB7IGxvY2F0aW9uW2tleV0gPSB0b1trZXldOyB9XG4gIH0pO1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkobG9jYXRpb24sIG51bGwsIDIpXG59XG5cbmZ1bmN0aW9uIGlzRXJyb3IgKGVycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGVycikuaW5kZXhPZignRXJyb3InKSA+IC0xXG59XG5cbmZ1bmN0aW9uIGlzTmF2aWdhdGlvbkZhaWx1cmUgKGVyciwgZXJyb3JUeXBlKSB7XG4gIHJldHVybiAoXG4gICAgaXNFcnJvcihlcnIpICYmXG4gICAgZXJyLl9pc1JvdXRlciAmJlxuICAgIChlcnJvclR5cGUgPT0gbnVsbCB8fCBlcnIudHlwZSA9PT0gZXJyb3JUeXBlKVxuICApXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnRzIChtYXRjaGVkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAodG8sIGZyb20sIG5leHQpIHtcbiAgICB2YXIgaGFzQXN5bmMgPSBmYWxzZTtcbiAgICB2YXIgcGVuZGluZyA9IDA7XG4gICAgdmFyIGVycm9yID0gbnVsbDtcblxuICAgIGZsYXRNYXBDb21wb25lbnRzKG1hdGNoZWQsIGZ1bmN0aW9uIChkZWYsIF8sIG1hdGNoLCBrZXkpIHtcbiAgICAgIC8vIGlmIGl0J3MgYSBmdW5jdGlvbiBhbmQgZG9lc24ndCBoYXZlIGNpZCBhdHRhY2hlZCxcbiAgICAgIC8vIGFzc3VtZSBpdCdzIGFuIGFzeW5jIGNvbXBvbmVudCByZXNvbHZlIGZ1bmN0aW9uLlxuICAgICAgLy8gd2UgYXJlIG5vdCB1c2luZyBWdWUncyBkZWZhdWx0IGFzeW5jIHJlc29sdmluZyBtZWNoYW5pc20gYmVjYXVzZVxuICAgICAgLy8gd2Ugd2FudCB0byBoYWx0IHRoZSBuYXZpZ2F0aW9uIHVudGlsIHRoZSBpbmNvbWluZyBjb21wb25lbnQgaGFzIGJlZW5cbiAgICAgIC8vIHJlc29sdmVkLlxuICAgICAgaWYgKHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZGVmLmNpZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGhhc0FzeW5jID0gdHJ1ZTtcbiAgICAgICAgcGVuZGluZysrO1xuXG4gICAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzb2x2ZWREZWYpIHtcbiAgICAgICAgICBpZiAoaXNFU01vZHVsZShyZXNvbHZlZERlZikpIHtcbiAgICAgICAgICAgIHJlc29sdmVkRGVmID0gcmVzb2x2ZWREZWYuZGVmYXVsdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gc2F2ZSByZXNvbHZlZCBvbiBhc3luYyBmYWN0b3J5IGluIGNhc2UgaXQncyB1c2VkIGVsc2V3aGVyZVxuICAgICAgICAgIGRlZi5yZXNvbHZlZCA9IHR5cGVvZiByZXNvbHZlZERlZiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyByZXNvbHZlZERlZlxuICAgICAgICAgICAgOiBfVnVlLmV4dGVuZChyZXNvbHZlZERlZik7XG4gICAgICAgICAgbWF0Y2guY29tcG9uZW50c1trZXldID0gcmVzb2x2ZWREZWY7XG4gICAgICAgICAgcGVuZGluZy0tO1xuICAgICAgICAgIGlmIChwZW5kaW5nIDw9IDApIHtcbiAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgICB2YXIgbXNnID0gXCJGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQgXCIgKyBrZXkgKyBcIjogXCIgKyByZWFzb247XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKGZhbHNlLCBtc2cpO1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGVycm9yID0gaXNFcnJvcihyZWFzb24pXG4gICAgICAgICAgICAgID8gcmVhc29uXG4gICAgICAgICAgICAgIDogbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICBuZXh0KGVycm9yKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHZhciByZXM7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gZGVmKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJlcykge1xuICAgICAgICAgIGlmICh0eXBlb2YgcmVzLnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG5ldyBzeW50YXggaW4gVnVlIDIuM1xuICAgICAgICAgICAgdmFyIGNvbXAgPSByZXMuY29tcG9uZW50O1xuICAgICAgICAgICAgaWYgKGNvbXAgJiYgdHlwZW9mIGNvbXAudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBjb21wLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmICghaGFzQXN5bmMpIHsgbmV4dCgpOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmxhdE1hcENvbXBvbmVudHMgKFxuICBtYXRjaGVkLFxuICBmblxuKSB7XG4gIHJldHVybiBmbGF0dGVuKG1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG0uY29tcG9uZW50cykubWFwKGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGZuKFxuICAgICAgbS5jb21wb25lbnRzW2tleV0sXG4gICAgICBtLmluc3RhbmNlc1trZXldLFxuICAgICAgbSwga2V5XG4gICAgKTsgfSlcbiAgfSkpXG59XG5cbmZ1bmN0aW9uIGZsYXR0ZW4gKGFycikge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKVxufVxuXG52YXIgaGFzU3ltYm9sID1cbiAgdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJlxuICB0eXBlb2YgU3ltYm9sLnRvU3RyaW5nVGFnID09PSAnc3ltYm9sJztcblxuZnVuY3Rpb24gaXNFU01vZHVsZSAob2JqKSB7XG4gIHJldHVybiBvYmouX19lc01vZHVsZSB8fCAoaGFzU3ltYm9sICYmIG9ialtTeW1ib2wudG9TdHJpbmdUYWddID09PSAnTW9kdWxlJylcbn1cblxuLy8gaW4gV2VicGFjayAyLCByZXF1aXJlLmVuc3VyZSBub3cgYWxzbyByZXR1cm5zIGEgUHJvbWlzZVxuLy8gc28gdGhlIHJlc29sdmUvcmVqZWN0IGZ1bmN0aW9ucyBtYXkgZ2V0IGNhbGxlZCBhbiBleHRyYSB0aW1lXG4vLyBpZiB0aGUgdXNlciB1c2VzIGFuIGFycm93IGZ1bmN0aW9uIHNob3J0aGFuZCB0aGF0IGhhcHBlbnMgdG9cbi8vIHJldHVybiB0aGF0IFByb21pc2UuXG5mdW5jdGlvbiBvbmNlIChmbikge1xuICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gICAgaWYgKGNhbGxlZCkgeyByZXR1cm4gfVxuICAgIGNhbGxlZCA9IHRydWU7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIaXN0b3J5ID0gZnVuY3Rpb24gSGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gIHRoaXMucm91dGVyID0gcm91dGVyO1xuICB0aGlzLmJhc2UgPSBub3JtYWxpemVCYXNlKGJhc2UpO1xuICAvLyBzdGFydCB3aXRoIGEgcm91dGUgb2JqZWN0IHRoYXQgc3RhbmRzIGZvciBcIm5vd2hlcmVcIlxuICB0aGlzLmN1cnJlbnQgPSBTVEFSVDtcbiAgdGhpcy5wZW5kaW5nID0gbnVsbDtcbiAgdGhpcy5yZWFkeSA9IGZhbHNlO1xuICB0aGlzLnJlYWR5Q2JzID0gW107XG4gIHRoaXMucmVhZHlFcnJvckNicyA9IFtdO1xuICB0aGlzLmVycm9yQ2JzID0gW107XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4gKGNiKSB7XG4gIHRoaXMuY2IgPSBjYjtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICBpZiAodGhpcy5yZWFkeSkge1xuICAgIGNiKCk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5yZWFkeUNicy5wdXNoKGNiKTtcbiAgICBpZiAoZXJyb3JDYikge1xuICAgICAgdGhpcy5yZWFkeUVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG4gICAgfVxuICB9XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gb25FcnJvciAoZXJyb3JDYikge1xuICB0aGlzLmVycm9yQ2JzLnB1c2goZXJyb3JDYik7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS50cmFuc2l0aW9uVG8gPSBmdW5jdGlvbiB0cmFuc2l0aW9uVG8gKFxuICBsb2NhdGlvbixcbiAgb25Db21wbGV0ZSxcbiAgb25BYm9ydFxuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIHJvdXRlO1xuICAvLyBjYXRjaCByZWRpcmVjdCBvcHRpb24gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMDFcbiAgdHJ5IHtcbiAgICByb3V0ZSA9IHRoaXMucm91dGVyLm1hdGNoKGxvY2F0aW9uLCB0aGlzLmN1cnJlbnQpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5lcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgY2IoZSk7XG4gICAgfSk7XG4gICAgLy8gRXhjZXB0aW9uIHNob3VsZCBzdGlsbCBiZSB0aHJvd25cbiAgICB0aHJvdyBlXG4gIH1cbiAgdmFyIHByZXYgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMuY29uZmlybVRyYW5zaXRpb24oXG4gICAgcm91dGUsXG4gICAgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB0aGlzJDEuZW5zdXJlVVJMKCk7XG4gICAgICB0aGlzJDEucm91dGVyLmFmdGVySG9va3MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICAgICAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIGZpcmUgcmVhZHkgY2JzIG9uY2VcbiAgICAgIGlmICghdGhpcyQxLnJlYWR5KSB7XG4gICAgICAgIHRoaXMkMS5yZWFkeSA9IHRydWU7XG4gICAgICAgIHRoaXMkMS5yZWFkeUNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgIGNiKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAob25BYm9ydCkge1xuICAgICAgICBvbkFib3J0KGVycik7XG4gICAgICB9XG4gICAgICBpZiAoZXJyICYmICF0aGlzJDEucmVhZHkpIHtcbiAgICAgICAgLy8gSW5pdGlhbCByZWRpcmVjdGlvbiBzaG91bGQgbm90IG1hcmsgdGhlIGhpc3RvcnkgYXMgcmVhZHkgeWV0XG4gICAgICAgIC8vIGJlY2F1c2UgaXQncyB0cmlnZ2VyZWQgYnkgdGhlIHJlZGlyZWN0aW9uIGluc3RlYWRcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMyMjVcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1yb3V0ZXIvaXNzdWVzLzMzMzFcbiAgICAgICAgaWYgKCFpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLnJlZGlyZWN0ZWQpIHx8IHByZXYgIT09IFNUQVJUKSB7XG4gICAgICAgICAgdGhpcyQxLnJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzJDEucmVhZHlFcnJvckNicy5mb3JFYWNoKGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgKTtcbn07XG5cbkhpc3RvcnkucHJvdG90eXBlLmNvbmZpcm1UcmFuc2l0aW9uID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb24gKHJvdXRlLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7XG4gIHRoaXMucGVuZGluZyA9IHJvdXRlO1xuICB2YXIgYWJvcnQgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgLy8gY2hhbmdlZCBhZnRlciBhZGRpbmcgZXJyb3JzIHdpdGhcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9wdWxsLzMwNDcgYmVmb3JlIHRoYXQgY2hhbmdlLFxuICAgIC8vIHJlZGlyZWN0IGFuZCBhYm9ydGVkIG5hdmlnYXRpb24gd291bGQgcHJvZHVjZSBhbiBlcnIgPT0gbnVsbFxuICAgIGlmICghaXNOYXZpZ2F0aW9uRmFpbHVyZShlcnIpICYmIGlzRXJyb3IoZXJyKSkge1xuICAgICAgaWYgKHRoaXMkMS5lcnJvckNicy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcyQxLmVycm9yQ2JzLmZvckVhY2goZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKGZhbHNlLCAndW5jYXVnaHQgZXJyb3IgZHVyaW5nIHJvdXRlIG5hdmlnYXRpb246Jyk7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgb25BYm9ydCAmJiBvbkFib3J0KGVycik7XG4gIH07XG4gIHZhciBsYXN0Um91dGVJbmRleCA9IHJvdXRlLm1hdGNoZWQubGVuZ3RoIC0gMTtcbiAgdmFyIGxhc3RDdXJyZW50SW5kZXggPSBjdXJyZW50Lm1hdGNoZWQubGVuZ3RoIC0gMTtcbiAgaWYgKFxuICAgIGlzU2FtZVJvdXRlKHJvdXRlLCBjdXJyZW50KSAmJlxuICAgIC8vIGluIHRoZSBjYXNlIHRoZSByb3V0ZSBtYXAgaGFzIGJlZW4gZHluYW1pY2FsbHkgYXBwZW5kZWQgdG9cbiAgICBsYXN0Um91dGVJbmRleCA9PT0gbGFzdEN1cnJlbnRJbmRleCAmJlxuICAgIHJvdXRlLm1hdGNoZWRbbGFzdFJvdXRlSW5kZXhdID09PSBjdXJyZW50Lm1hdGNoZWRbbGFzdEN1cnJlbnRJbmRleF1cbiAgKSB7XG4gICAgdGhpcy5lbnN1cmVVUkwoKTtcbiAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkR1cGxpY2F0ZWRFcnJvcihjdXJyZW50LCByb3V0ZSkpXG4gIH1cblxuICB2YXIgcmVmID0gcmVzb2x2ZVF1ZXVlKFxuICAgIHRoaXMuY3VycmVudC5tYXRjaGVkLFxuICAgIHJvdXRlLm1hdGNoZWRcbiAgKTtcbiAgICB2YXIgdXBkYXRlZCA9IHJlZi51cGRhdGVkO1xuICAgIHZhciBkZWFjdGl2YXRlZCA9IHJlZi5kZWFjdGl2YXRlZDtcbiAgICB2YXIgYWN0aXZhdGVkID0gcmVmLmFjdGl2YXRlZDtcblxuICB2YXIgcXVldWUgPSBbXS5jb25jYXQoXG4gICAgLy8gaW4tY29tcG9uZW50IGxlYXZlIGd1YXJkc1xuICAgIGV4dHJhY3RMZWF2ZUd1YXJkcyhkZWFjdGl2YXRlZCksXG4gICAgLy8gZ2xvYmFsIGJlZm9yZSBob29rc1xuICAgIHRoaXMucm91dGVyLmJlZm9yZUhvb2tzLFxuICAgIC8vIGluLWNvbXBvbmVudCB1cGRhdGUgaG9va3NcbiAgICBleHRyYWN0VXBkYXRlSG9va3ModXBkYXRlZCksXG4gICAgLy8gaW4tY29uZmlnIGVudGVyIGd1YXJkc1xuICAgIGFjdGl2YXRlZC5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0uYmVmb3JlRW50ZXI7IH0pLFxuICAgIC8vIGFzeW5jIGNvbXBvbmVudHNcbiAgICByZXNvbHZlQXN5bmNDb21wb25lbnRzKGFjdGl2YXRlZClcbiAgKTtcblxuICB2YXIgaXRlcmF0b3IgPSBmdW5jdGlvbiAoaG9vaywgbmV4dCkge1xuICAgIGlmICh0aGlzJDEucGVuZGluZyAhPT0gcm91dGUpIHtcbiAgICAgIHJldHVybiBhYm9ydChjcmVhdGVOYXZpZ2F0aW9uQ2FuY2VsbGVkRXJyb3IoY3VycmVudCwgcm91dGUpKVxuICAgIH1cbiAgICB0cnkge1xuICAgICAgaG9vayhyb3V0ZSwgY3VycmVudCwgZnVuY3Rpb24gKHRvKSB7XG4gICAgICAgIGlmICh0byA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAvLyBuZXh0KGZhbHNlKSAtPiBhYm9ydCBuYXZpZ2F0aW9uLCBlbnN1cmUgY3VycmVudCBVUkxcbiAgICAgICAgICB0aGlzJDEuZW5zdXJlVVJMKHRydWUpO1xuICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25BYm9ydGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0Vycm9yKHRvKSkge1xuICAgICAgICAgIHRoaXMkMS5lbnN1cmVVUkwodHJ1ZSk7XG4gICAgICAgICAgYWJvcnQodG8pO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgIHR5cGVvZiB0byA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAgICAgKHR5cGVvZiB0by5wYXRoID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdG8ubmFtZSA9PT0gJ3N0cmluZycpKVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBuZXh0KCcvJykgb3IgbmV4dCh7IHBhdGg6ICcvJyB9KSAtPiByZWRpcmVjdFxuICAgICAgICAgIGFib3J0KGNyZWF0ZU5hdmlnYXRpb25SZWRpcmVjdGVkRXJyb3IoY3VycmVudCwgcm91dGUpKTtcbiAgICAgICAgICBpZiAodHlwZW9mIHRvID09PSAnb2JqZWN0JyAmJiB0by5yZXBsYWNlKSB7XG4gICAgICAgICAgICB0aGlzJDEucmVwbGFjZSh0byk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMkMS5wdXNoKHRvKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gY29uZmlybSB0cmFuc2l0aW9uIGFuZCBwYXNzIG9uIHRoZSB2YWx1ZVxuICAgICAgICAgIG5leHQodG8pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBhYm9ydChlKTtcbiAgICB9XG4gIH07XG5cbiAgcnVuUXVldWUocXVldWUsIGl0ZXJhdG9yLCBmdW5jdGlvbiAoKSB7XG4gICAgLy8gd2FpdCB1bnRpbCBhc3luYyBjb21wb25lbnRzIGFyZSByZXNvbHZlZCBiZWZvcmVcbiAgICAvLyBleHRyYWN0aW5nIGluLWNvbXBvbmVudCBlbnRlciBndWFyZHNcbiAgICB2YXIgZW50ZXJHdWFyZHMgPSBleHRyYWN0RW50ZXJHdWFyZHMoYWN0aXZhdGVkKTtcbiAgICB2YXIgcXVldWUgPSBlbnRlckd1YXJkcy5jb25jYXQodGhpcyQxLnJvdXRlci5yZXNvbHZlSG9va3MpO1xuICAgIHJ1blF1ZXVlKHF1ZXVlLCBpdGVyYXRvciwgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMkMS5wZW5kaW5nICE9PSByb3V0ZSkge1xuICAgICAgICByZXR1cm4gYWJvcnQoY3JlYXRlTmF2aWdhdGlvbkNhbmNlbGxlZEVycm9yKGN1cnJlbnQsIHJvdXRlKSlcbiAgICAgIH1cbiAgICAgIHRoaXMkMS5wZW5kaW5nID0gbnVsbDtcbiAgICAgIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgaWYgKHRoaXMkMS5yb3V0ZXIuYXBwKSB7XG4gICAgICAgIHRoaXMkMS5yb3V0ZXIuYXBwLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaGFuZGxlUm91dGVFbnRlcmVkKHJvdXRlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudXBkYXRlUm91dGUgPSBmdW5jdGlvbiB1cGRhdGVSb3V0ZSAocm91dGUpIHtcbiAgdGhpcy5jdXJyZW50ID0gcm91dGU7XG4gIHRoaXMuY2IgJiYgdGhpcy5jYihyb3V0ZSk7XG59O1xuXG5IaXN0b3J5LnByb3RvdHlwZS5zZXR1cExpc3RlbmVycyA9IGZ1bmN0aW9uIHNldHVwTGlzdGVuZXJzICgpIHtcbiAgLy8gRGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBpcyBlbXB0eVxufTtcblxuSGlzdG9yeS5wcm90b3R5cGUudGVhcmRvd24gPSBmdW5jdGlvbiB0ZWFyZG93biAoKSB7XG4gIC8vIGNsZWFuIHVwIGV2ZW50IGxpc3RlbmVyc1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjM0MVxuICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKGZ1bmN0aW9uIChjbGVhbnVwTGlzdGVuZXIpIHtcbiAgICBjbGVhbnVwTGlzdGVuZXIoKTtcbiAgfSk7XG4gIHRoaXMubGlzdGVuZXJzID0gW107XG5cbiAgLy8gcmVzZXQgY3VycmVudCBoaXN0b3J5IHJvdXRlXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtcm91dGVyL2lzc3Vlcy8zMjk0XG4gIHRoaXMuY3VycmVudCA9IFNUQVJUO1xuICB0aGlzLnBlbmRpbmcgPSBudWxsO1xufTtcblxuZnVuY3Rpb24gbm9ybWFsaXplQmFzZSAoYmFzZSkge1xuICBpZiAoIWJhc2UpIHtcbiAgICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgICAvLyByZXNwZWN0IDxiYXNlPiB0YWdcbiAgICAgIHZhciBiYXNlRWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgICBiYXNlID0gKGJhc2VFbCAmJiBiYXNlRWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIHx8ICcvJztcbiAgICAgIC8vIHN0cmlwIGZ1bGwgVVJMIG9yaWdpblxuICAgICAgYmFzZSA9IGJhc2UucmVwbGFjZSgvXmh0dHBzPzpcXC9cXC9bXlxcL10rLywgJycpO1xuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlID0gJy8nO1xuICAgIH1cbiAgfVxuICAvLyBtYWtlIHN1cmUgdGhlcmUncyB0aGUgc3RhcnRpbmcgc2xhc2hcbiAgaWYgKGJhc2UuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICBiYXNlID0gJy8nICsgYmFzZTtcbiAgfVxuICAvLyByZW1vdmUgdHJhaWxpbmcgc2xhc2hcbiAgcmV0dXJuIGJhc2UucmVwbGFjZSgvXFwvJC8sICcnKVxufVxuXG5mdW5jdGlvbiByZXNvbHZlUXVldWUgKFxuICBjdXJyZW50LFxuICBuZXh0XG4pIHtcbiAgdmFyIGk7XG4gIHZhciBtYXggPSBNYXRoLm1heChjdXJyZW50Lmxlbmd0aCwgbmV4dC5sZW5ndGgpO1xuICBmb3IgKGkgPSAwOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoY3VycmVudFtpXSAhPT0gbmV4dFtpXSkge1xuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB1cGRhdGVkOiBuZXh0LnNsaWNlKDAsIGkpLFxuICAgIGFjdGl2YXRlZDogbmV4dC5zbGljZShpKSxcbiAgICBkZWFjdGl2YXRlZDogY3VycmVudC5zbGljZShpKVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZHMgKFxuICByZWNvcmRzLFxuICBuYW1lLFxuICBiaW5kLFxuICByZXZlcnNlXG4pIHtcbiAgdmFyIGd1YXJkcyA9IGZsYXRNYXBDb21wb25lbnRzKHJlY29yZHMsIGZ1bmN0aW9uIChkZWYsIGluc3RhbmNlLCBtYXRjaCwga2V5KSB7XG4gICAgdmFyIGd1YXJkID0gZXh0cmFjdEd1YXJkKGRlZiwgbmFtZSk7XG4gICAgaWYgKGd1YXJkKSB7XG4gICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShndWFyZClcbiAgICAgICAgPyBndWFyZC5tYXAoZnVuY3Rpb24gKGd1YXJkKSB7IHJldHVybiBiaW5kKGd1YXJkLCBpbnN0YW5jZSwgbWF0Y2gsIGtleSk7IH0pXG4gICAgICAgIDogYmluZChndWFyZCwgaW5zdGFuY2UsIG1hdGNoLCBrZXkpXG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGZsYXR0ZW4ocmV2ZXJzZSA/IGd1YXJkcy5yZXZlcnNlKCkgOiBndWFyZHMpXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RHdWFyZCAoXG4gIGRlZixcbiAga2V5XG4pIHtcbiAgaWYgKHR5cGVvZiBkZWYgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBleHRlbmQgbm93IHNvIHRoYXQgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZC5cbiAgICBkZWYgPSBfVnVlLmV4dGVuZChkZWYpO1xuICB9XG4gIHJldHVybiBkZWYub3B0aW9uc1trZXldXG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RMZWF2ZUd1YXJkcyAoZGVhY3RpdmF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHMoZGVhY3RpdmF0ZWQsICdiZWZvcmVSb3V0ZUxlYXZlJywgYmluZEd1YXJkLCB0cnVlKVxufVxuXG5mdW5jdGlvbiBleHRyYWN0VXBkYXRlSG9va3MgKHVwZGF0ZWQpIHtcbiAgcmV0dXJuIGV4dHJhY3RHdWFyZHModXBkYXRlZCwgJ2JlZm9yZVJvdXRlVXBkYXRlJywgYmluZEd1YXJkKVxufVxuXG5mdW5jdGlvbiBiaW5kR3VhcmQgKGd1YXJkLCBpbnN0YW5jZSkge1xuICBpZiAoaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRSb3V0ZUd1YXJkICgpIHtcbiAgICAgIHJldHVybiBndWFyZC5hcHBseShpbnN0YW5jZSwgYXJndW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBleHRyYWN0RW50ZXJHdWFyZHMgKFxuICBhY3RpdmF0ZWRcbikge1xuICByZXR1cm4gZXh0cmFjdEd1YXJkcyhcbiAgICBhY3RpdmF0ZWQsXG4gICAgJ2JlZm9yZVJvdXRlRW50ZXInLFxuICAgIGZ1bmN0aW9uIChndWFyZCwgXywgbWF0Y2gsIGtleSkge1xuICAgICAgcmV0dXJuIGJpbmRFbnRlckd1YXJkKGd1YXJkLCBtYXRjaCwga2V5KVxuICAgIH1cbiAgKVxufVxuXG5mdW5jdGlvbiBiaW5kRW50ZXJHdWFyZCAoXG4gIGd1YXJkLFxuICBtYXRjaCxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHJvdXRlRW50ZXJHdWFyZCAodG8sIGZyb20sIG5leHQpIHtcbiAgICByZXR1cm4gZ3VhcmQodG8sIGZyb20sIGZ1bmN0aW9uIChjYikge1xuICAgICAgaWYgKHR5cGVvZiBjYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpZiAoIW1hdGNoLmVudGVyZWRDYnNba2V5XSkge1xuICAgICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIG1hdGNoLmVudGVyZWRDYnNba2V5XS5wdXNoKGNiKTtcbiAgICAgIH1cbiAgICAgIG5leHQoY2IpO1xuICAgIH0pXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBIVE1MNUhpc3RvcnkgPSAvKkBfX1BVUkVfXyovKGZ1bmN0aW9uIChIaXN0b3J5KSB7XG4gIGZ1bmN0aW9uIEhUTUw1SGlzdG9yeSAocm91dGVyLCBiYXNlKSB7XG4gICAgSGlzdG9yeS5jYWxsKHRoaXMsIHJvdXRlciwgYmFzZSk7XG5cbiAgICB0aGlzLl9zdGFydExvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcy5iYXNlKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhUTUw1SGlzdG9yeS5fX3Byb3RvX18gPSBIaXN0b3J5O1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggSGlzdG9yeSAmJiBIaXN0b3J5LnByb3RvdHlwZSApO1xuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSFRNTDVIaXN0b3J5O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG5cbiAgICAgIC8vIEF2b2lkaW5nIGZpcnN0IGBwb3BzdGF0ZWAgZXZlbnQgZGlzcGF0Y2hlZCBpbiBzb21lIGJyb3dzZXJzIGJ1dCBmaXJzdFxuICAgICAgLy8gaGlzdG9yeSByb3V0ZSBub3QgdXBkYXRlZCBzaW5jZSBhc3luYyBndWFyZCBhdCB0aGUgc2FtZSB0aW1lLlxuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24odGhpcyQxLmJhc2UpO1xuICAgICAgaWYgKHRoaXMkMS5jdXJyZW50ID09PSBTVEFSVCAmJiBsb2NhdGlvbiA9PT0gdGhpcyQxLl9zdGFydExvY2F0aW9uKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgaWYgKHN1cHBvcnRzU2Nyb2xsKSB7XG4gICAgICAgICAgaGFuZGxlU2Nyb2xsKHJvdXRlciwgcm91dGUsIGN1cnJlbnQsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIGhhbmRsZVJvdXRpbmdFdmVudCk7XG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBoYW5kbGVSb3V0aW5nRXZlbnQpO1xuICAgIH0pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICAgIHdpbmRvdy5oaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIEhUTUw1SGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8obG9jYXRpb24sIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgcHVzaFN0YXRlKGNsZWFuUGF0aCh0aGlzJDEuYmFzZSArIHJvdXRlLmZ1bGxQYXRoKSk7XG4gICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgb25Db21wbGV0ZSAmJiBvbkNvbXBsZXRlKHJvdXRlKTtcbiAgICB9LCBvbkFib3J0KTtcbiAgfTtcblxuICBIVE1MNUhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKGxvY2F0aW9uLCBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgIHJlcGxhY2VTdGF0ZShjbGVhblBhdGgodGhpcyQxLmJhc2UgKyByb3V0ZS5mdWxsUGF0aCkpO1xuICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMS5yb3V0ZXIsIHJvdXRlLCBmcm9tUm91dGUsIGZhbHNlKTtcbiAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgfSwgb25BYm9ydCk7XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5lbnN1cmVVUkwgPSBmdW5jdGlvbiBlbnN1cmVVUkwgKHB1c2gpIHtcbiAgICBpZiAoZ2V0TG9jYXRpb24odGhpcy5iYXNlKSAhPT0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGNsZWFuUGF0aCh0aGlzLmJhc2UgKyB0aGlzLmN1cnJlbnQuZnVsbFBhdGgpO1xuICAgICAgcHVzaCA/IHB1c2hTdGF0ZShjdXJyZW50KSA6IHJlcGxhY2VTdGF0ZShjdXJyZW50KTtcbiAgICB9XG4gIH07XG5cbiAgSFRNTDVIaXN0b3J5LnByb3RvdHlwZS5nZXRDdXJyZW50TG9jYXRpb24gPSBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24gKCkge1xuICAgIHJldHVybiBnZXRMb2NhdGlvbih0aGlzLmJhc2UpXG4gIH07XG5cbiAgcmV0dXJuIEhUTUw1SGlzdG9yeTtcbn0oSGlzdG9yeSkpO1xuXG5mdW5jdGlvbiBnZXRMb2NhdGlvbiAoYmFzZSkge1xuICB2YXIgcGF0aCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZTtcbiAgaWYgKGJhc2UgJiYgcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YoYmFzZS50b0xvd2VyQ2FzZSgpKSA9PT0gMCkge1xuICAgIHBhdGggPSBwYXRoLnNsaWNlKGJhc2UubGVuZ3RoKTtcbiAgfVxuICByZXR1cm4gKHBhdGggfHwgJy8nKSArIHdpbmRvdy5sb2NhdGlvbi5zZWFyY2ggKyB3aW5kb3cubG9jYXRpb24uaGFzaFxufVxuXG4vKiAgKi9cblxudmFyIEhhc2hIaXN0b3J5ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoSGlzdG9yeSkge1xuICBmdW5jdGlvbiBIYXNoSGlzdG9yeSAocm91dGVyLCBiYXNlLCBmYWxsYmFjaykge1xuICAgIEhpc3RvcnkuY2FsbCh0aGlzLCByb3V0ZXIsIGJhc2UpO1xuICAgIC8vIGNoZWNrIGhpc3RvcnkgZmFsbGJhY2sgZGVlcGxpbmtpbmdcbiAgICBpZiAoZmFsbGJhY2sgJiYgY2hlY2tGYWxsYmFjayh0aGlzLmJhc2UpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZW5zdXJlU2xhc2goKTtcbiAgfVxuXG4gIGlmICggSGlzdG9yeSApIEhhc2hIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIEhpc3RvcnkgJiYgSGlzdG9yeS5wcm90b3R5cGUgKTtcbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gSGFzaEhpc3Rvcnk7XG5cbiAgLy8gdGhpcyBpcyBkZWxheWVkIHVudGlsIHRoZSBhcHAgbW91bnRzXG4gIC8vIHRvIGF2b2lkIHRoZSBoYXNoY2hhbmdlIGxpc3RlbmVyIGJlaW5nIGZpcmVkIHRvbyBlYXJseVxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiBzZXR1cExpc3RlbmVycyAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5saXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIHJvdXRlciA9IHRoaXMucm91dGVyO1xuICAgIHZhciBleHBlY3RTY3JvbGwgPSByb3V0ZXIub3B0aW9ucy5zY3JvbGxCZWhhdmlvcjtcbiAgICB2YXIgc3VwcG9ydHNTY3JvbGwgPSBzdXBwb3J0c1B1c2hTdGF0ZSAmJiBleHBlY3RTY3JvbGw7XG5cbiAgICBpZiAoc3VwcG9ydHNTY3JvbGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2goc2V0dXBTY3JvbGwoKSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZVJvdXRpbmdFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gdGhpcyQxLmN1cnJlbnQ7XG4gICAgICBpZiAoIWVuc3VyZVNsYXNoKCkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICB0aGlzJDEudHJhbnNpdGlvblRvKGdldEhhc2goKSwgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIGlmIChzdXBwb3J0c1Njcm9sbCkge1xuICAgICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgY3VycmVudCwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzdXBwb3J0c1B1c2hTdGF0ZSkge1xuICAgICAgICAgIHJlcGxhY2VIYXNoKHJvdXRlLmZ1bGxQYXRoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICB2YXIgZXZlbnRUeXBlID0gc3VwcG9ydHNQdXNoU3RhdGUgPyAncG9wc3RhdGUnIDogJ2hhc2hjaGFuZ2UnO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgZXZlbnRUeXBlLFxuICAgICAgaGFuZGxlUm91dGluZ0V2ZW50XG4gICAgKTtcbiAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGZ1bmN0aW9uICgpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgaGFuZGxlUm91dGluZ0V2ZW50KTtcbiAgICB9KTtcbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIHB1c2ggKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgZnJvbVJvdXRlID0gcmVmLmN1cnJlbnQ7XG4gICAgdGhpcy50cmFuc2l0aW9uVG8oXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgICAgICBwdXNoSGFzaChyb3V0ZS5mdWxsUGF0aCk7XG4gICAgICAgIGhhbmRsZVNjcm9sbCh0aGlzJDEucm91dGVyLCByb3V0ZSwgZnJvbVJvdXRlLCBmYWxzZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGZyb21Sb3V0ZSA9IHJlZi5jdXJyZW50O1xuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgcmVwbGFjZUhhc2gocm91dGUuZnVsbFBhdGgpO1xuICAgICAgICBoYW5kbGVTY3JvbGwodGhpcyQxLnJvdXRlciwgcm91dGUsIGZyb21Sb3V0ZSwgZmFsc2UpO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEhhc2hIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgd2luZG93Lmhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgSGFzaEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAocHVzaCkge1xuICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50LmZ1bGxQYXRoO1xuICAgIGlmIChnZXRIYXNoKCkgIT09IGN1cnJlbnQpIHtcbiAgICAgIHB1c2ggPyBwdXNoSGFzaChjdXJyZW50KSA6IHJlcGxhY2VIYXNoKGN1cnJlbnQpO1xuICAgIH1cbiAgfTtcblxuICBIYXNoSGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SGFzaCgpXG4gIH07XG5cbiAgcmV0dXJuIEhhc2hIaXN0b3J5O1xufShIaXN0b3J5KSk7XG5cbmZ1bmN0aW9uIGNoZWNrRmFsbGJhY2sgKGJhc2UpIHtcbiAgdmFyIGxvY2F0aW9uID0gZ2V0TG9jYXRpb24oYmFzZSk7XG4gIGlmICghL15cXC8jLy50ZXN0KGxvY2F0aW9uKSkge1xuICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGNsZWFuUGF0aChiYXNlICsgJy8jJyArIGxvY2F0aW9uKSk7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxufVxuXG5mdW5jdGlvbiBlbnN1cmVTbGFzaCAoKSB7XG4gIHZhciBwYXRoID0gZ2V0SGFzaCgpO1xuICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIHJldHVybiB0cnVlXG4gIH1cbiAgcmVwbGFjZUhhc2goJy8nICsgcGF0aCk7XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBnZXRIYXNoICgpIHtcbiAgLy8gV2UgY2FuJ3QgdXNlIHdpbmRvdy5sb2NhdGlvbi5oYXNoIGhlcmUgYmVjYXVzZSBpdCdzIG5vdFxuICAvLyBjb25zaXN0ZW50IGFjcm9zcyBicm93c2VycyAtIEZpcmVmb3ggd2lsbCBwcmUtZGVjb2RlIGl0IVxuICB2YXIgaHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICB2YXIgaW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgLy8gZW1wdHkgcGF0aFxuICBpZiAoaW5kZXggPCAwKSB7IHJldHVybiAnJyB9XG5cbiAgaHJlZiA9IGhyZWYuc2xpY2UoaW5kZXggKyAxKTtcblxuICByZXR1cm4gaHJlZlxufVxuXG5mdW5jdGlvbiBnZXRVcmwgKHBhdGgpIHtcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGkgPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgdmFyIGJhc2UgPSBpID49IDAgPyBocmVmLnNsaWNlKDAsIGkpIDogaHJlZjtcbiAgcmV0dXJuIChiYXNlICsgXCIjXCIgKyBwYXRoKVxufVxuXG5mdW5jdGlvbiBwdXNoSGFzaCAocGF0aCkge1xuICBpZiAoc3VwcG9ydHNQdXNoU3RhdGUpIHtcbiAgICBwdXNoU3RhdGUoZ2V0VXJsKHBhdGgpKTtcbiAgfSBlbHNlIHtcbiAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVwbGFjZUhhc2ggKHBhdGgpIHtcbiAgaWYgKHN1cHBvcnRzUHVzaFN0YXRlKSB7XG4gICAgcmVwbGFjZVN0YXRlKGdldFVybChwYXRoKSk7XG4gIH0gZWxzZSB7XG4gICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoZ2V0VXJsKHBhdGgpKTtcbiAgfVxufVxuXG4vKiAgKi9cblxudmFyIEFic3RyYWN0SGlzdG9yeSA9IC8qQF9fUFVSRV9fKi8oZnVuY3Rpb24gKEhpc3RvcnkpIHtcbiAgZnVuY3Rpb24gQWJzdHJhY3RIaXN0b3J5IChyb3V0ZXIsIGJhc2UpIHtcbiAgICBIaXN0b3J5LmNhbGwodGhpcywgcm91dGVyLCBiYXNlKTtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5pbmRleCA9IC0xO1xuICB9XG5cbiAgaWYgKCBIaXN0b3J5ICkgQWJzdHJhY3RIaXN0b3J5Ll9fcHJvdG9fXyA9IEhpc3Rvcnk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBIaXN0b3J5ICYmIEhpc3RvcnkucHJvdG90eXBlICk7XG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBBYnN0cmFjdEhpc3Rvcnk7XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHRoaXMudHJhbnNpdGlvblRvKFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmdW5jdGlvbiAocm91dGUpIHtcbiAgICAgICAgdGhpcyQxLnN0YWNrID0gdGhpcyQxLnN0YWNrLnNsaWNlKDAsIHRoaXMkMS5pbmRleCArIDEpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIHRoaXMkMS5pbmRleCsrO1xuICAgICAgICBvbkNvbXBsZXRlICYmIG9uQ29tcGxldGUocm91dGUpO1xuICAgICAgfSxcbiAgICAgIG9uQWJvcnRcbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UgKGxvY2F0aW9uLCBvbkNvbXBsZXRlLCBvbkFib3J0KSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLnRyYW5zaXRpb25UbyhcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZnVuY3Rpb24gKHJvdXRlKSB7XG4gICAgICAgIHRoaXMkMS5zdGFjayA9IHRoaXMkMS5zdGFjay5zbGljZSgwLCB0aGlzJDEuaW5kZXgpLmNvbmNhdChyb3V0ZSk7XG4gICAgICAgIG9uQ29tcGxldGUgJiYgb25Db21wbGV0ZShyb3V0ZSk7XG4gICAgICB9LFxuICAgICAgb25BYm9ydFxuICAgICk7XG4gIH07XG5cbiAgQWJzdHJhY3RIaXN0b3J5LnByb3RvdHlwZS5nbyA9IGZ1bmN0aW9uIGdvIChuKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdGFyZ2V0SW5kZXggPSB0aGlzLmluZGV4ICsgbjtcbiAgICBpZiAodGFyZ2V0SW5kZXggPCAwIHx8IHRhcmdldEluZGV4ID49IHRoaXMuc3RhY2subGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHJvdXRlID0gdGhpcy5zdGFja1t0YXJnZXRJbmRleF07XG4gICAgdGhpcy5jb25maXJtVHJhbnNpdGlvbihcbiAgICAgIHJvdXRlLFxuICAgICAgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcHJldiA9IHRoaXMkMS5jdXJyZW50O1xuICAgICAgICB0aGlzJDEuaW5kZXggPSB0YXJnZXRJbmRleDtcbiAgICAgICAgdGhpcyQxLnVwZGF0ZVJvdXRlKHJvdXRlKTtcbiAgICAgICAgdGhpcyQxLnJvdXRlci5hZnRlckhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGhvb2spIHtcbiAgICAgICAgICBob29rICYmIGhvb2socm91dGUsIHByZXYpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmIChpc05hdmlnYXRpb25GYWlsdXJlKGVyciwgTmF2aWdhdGlvbkZhaWx1cmVUeXBlLmR1cGxpY2F0ZWQpKSB7XG4gICAgICAgICAgdGhpcyQxLmluZGV4ID0gdGFyZ2V0SW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICB9O1xuXG4gIEFic3RyYWN0SGlzdG9yeS5wcm90b3R5cGUuZ2V0Q3VycmVudExvY2F0aW9uID0gZnVuY3Rpb24gZ2V0Q3VycmVudExvY2F0aW9uICgpIHtcbiAgICB2YXIgY3VycmVudCA9IHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXTtcbiAgICByZXR1cm4gY3VycmVudCA/IGN1cnJlbnQuZnVsbFBhdGggOiAnLydcbiAgfTtcblxuICBBYnN0cmFjdEhpc3RvcnkucHJvdG90eXBlLmVuc3VyZVVSTCA9IGZ1bmN0aW9uIGVuc3VyZVVSTCAoKSB7XG4gICAgLy8gbm9vcFxuICB9O1xuXG4gIHJldHVybiBBYnN0cmFjdEhpc3Rvcnk7XG59KEhpc3RvcnkpKTtcblxuLyogICovXG5cbnZhciBWdWVSb3V0ZXIgPSBmdW5jdGlvbiBWdWVSb3V0ZXIgKG9wdGlvbnMpIHtcbiAgaWYgKCBvcHRpb25zID09PSB2b2lkIDAgKSBvcHRpb25zID0ge307XG5cbiAgdGhpcy5hcHAgPSBudWxsO1xuICB0aGlzLmFwcHMgPSBbXTtcbiAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgdGhpcy5iZWZvcmVIb29rcyA9IFtdO1xuICB0aGlzLnJlc29sdmVIb29rcyA9IFtdO1xuICB0aGlzLmFmdGVySG9va3MgPSBbXTtcbiAgdGhpcy5tYXRjaGVyID0gY3JlYXRlTWF0Y2hlcihvcHRpb25zLnJvdXRlcyB8fCBbXSwgdGhpcyk7XG5cbiAgdmFyIG1vZGUgPSBvcHRpb25zLm1vZGUgfHwgJ2hhc2gnO1xuICB0aGlzLmZhbGxiYWNrID1cbiAgICBtb2RlID09PSAnaGlzdG9yeScgJiYgIXN1cHBvcnRzUHVzaFN0YXRlICYmIG9wdGlvbnMuZmFsbGJhY2sgIT09IGZhbHNlO1xuICBpZiAodGhpcy5mYWxsYmFjaykge1xuICAgIG1vZGUgPSAnaGFzaCc7XG4gIH1cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICBtb2RlID0gJ2Fic3RyYWN0JztcbiAgfVxuICB0aGlzLm1vZGUgPSBtb2RlO1xuXG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2hpc3RvcnknOlxuICAgICAgdGhpcy5oaXN0b3J5ID0gbmV3IEhUTUw1SGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UpO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdoYXNoJzpcbiAgICAgIHRoaXMuaGlzdG9yeSA9IG5ldyBIYXNoSGlzdG9yeSh0aGlzLCBvcHRpb25zLmJhc2UsIHRoaXMuZmFsbGJhY2spO1xuICAgICAgYnJlYWtcbiAgICBjYXNlICdhYnN0cmFjdCc6XG4gICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgQWJzdHJhY3RIaXN0b3J5KHRoaXMsIG9wdGlvbnMuYmFzZSk7XG4gICAgICBicmVha1xuICAgIGRlZmF1bHQ6XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBhc3NlcnQoZmFsc2UsIChcImludmFsaWQgbW9kZTogXCIgKyBtb2RlKSk7XG4gICAgICB9XG4gIH1cbn07XG5cbnZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGN1cnJlbnRSb3V0ZTogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm1hdGNoID0gZnVuY3Rpb24gbWF0Y2ggKHJhdywgY3VycmVudCwgcmVkaXJlY3RlZEZyb20pIHtcbiAgcmV0dXJuIHRoaXMubWF0Y2hlci5tYXRjaChyYXcsIGN1cnJlbnQsIHJlZGlyZWN0ZWRGcm9tKVxufTtcblxucHJvdG90eXBlQWNjZXNzb3JzLmN1cnJlbnRSb3V0ZS5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmhpc3RvcnkgJiYgdGhpcy5oaXN0b3J5LmN1cnJlbnRcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIGluaXQgKGFwcCAvKiBWdWUgY29tcG9uZW50IGluc3RhbmNlICovKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgIGFzc2VydChcbiAgICAgIGluc3RhbGwuaW5zdGFsbGVkLFxuICAgICAgXCJub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gY2FsbCBgVnVlLnVzZShWdWVSb3V0ZXIpYCBcIiArXG4gICAgICAgIFwiYmVmb3JlIGNyZWF0aW5nIHJvb3QgaW5zdGFuY2UuXCJcbiAgICApO1xuXG4gIHRoaXMuYXBwcy5wdXNoKGFwcCk7XG5cbiAgLy8gc2V0IHVwIGFwcCBkZXN0cm95ZWQgaGFuZGxlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLXJvdXRlci9pc3N1ZXMvMjYzOVxuICBhcHAuJG9uY2UoJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkge1xuICAgIC8vIGNsZWFuIG91dCBhcHAgZnJvbSB0aGlzLmFwcHMgYXJyYXkgb25jZSBkZXN0cm95ZWRcbiAgICB2YXIgaW5kZXggPSB0aGlzJDEuYXBwcy5pbmRleE9mKGFwcCk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHsgdGhpcyQxLmFwcHMuc3BsaWNlKGluZGV4LCAxKTsgfVxuICAgIC8vIGVuc3VyZSB3ZSBzdGlsbCBoYXZlIGEgbWFpbiBhcHAgb3IgbnVsbCBpZiBubyBhcHBzXG4gICAgLy8gd2UgZG8gbm90IHJlbGVhc2UgdGhlIHJvdXRlciBzbyBpdCBjYW4gYmUgcmV1c2VkXG4gICAgaWYgKHRoaXMkMS5hcHAgPT09IGFwcCkgeyB0aGlzJDEuYXBwID0gdGhpcyQxLmFwcHNbMF0gfHwgbnVsbDsgfVxuXG4gICAgaWYgKCF0aGlzJDEuYXBwKSB7IHRoaXMkMS5oaXN0b3J5LnRlYXJkb3duKCk7IH1cbiAgfSk7XG5cbiAgLy8gbWFpbiBhcHAgcHJldmlvdXNseSBpbml0aWFsaXplZFxuICAvLyByZXR1cm4gYXMgd2UgZG9uJ3QgbmVlZCB0byBzZXQgdXAgbmV3IGhpc3RvcnkgbGlzdGVuZXJcbiAgaWYgKHRoaXMuYXBwKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB0aGlzLmFwcCA9IGFwcDtcblxuICB2YXIgaGlzdG9yeSA9IHRoaXMuaGlzdG9yeTtcblxuICBpZiAoaGlzdG9yeSBpbnN0YW5jZW9mIEhUTUw1SGlzdG9yeSB8fCBoaXN0b3J5IGluc3RhbmNlb2YgSGFzaEhpc3RvcnkpIHtcbiAgICB2YXIgaGFuZGxlSW5pdGlhbFNjcm9sbCA9IGZ1bmN0aW9uIChyb3V0ZU9yRXJyb3IpIHtcbiAgICAgIHZhciBmcm9tID0gaGlzdG9yeS5jdXJyZW50O1xuICAgICAgdmFyIGV4cGVjdFNjcm9sbCA9IHRoaXMkMS5vcHRpb25zLnNjcm9sbEJlaGF2aW9yO1xuICAgICAgdmFyIHN1cHBvcnRzU2Nyb2xsID0gc3VwcG9ydHNQdXNoU3RhdGUgJiYgZXhwZWN0U2Nyb2xsO1xuXG4gICAgICBpZiAoc3VwcG9ydHNTY3JvbGwgJiYgJ2Z1bGxQYXRoJyBpbiByb3V0ZU9yRXJyb3IpIHtcbiAgICAgICAgaGFuZGxlU2Nyb2xsKHRoaXMkMSwgcm91dGVPckVycm9yLCBmcm9tLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgc2V0dXBMaXN0ZW5lcnMgPSBmdW5jdGlvbiAocm91dGVPckVycm9yKSB7XG4gICAgICBoaXN0b3J5LnNldHVwTGlzdGVuZXJzKCk7XG4gICAgICBoYW5kbGVJbml0aWFsU2Nyb2xsKHJvdXRlT3JFcnJvcik7XG4gICAgfTtcbiAgICBoaXN0b3J5LnRyYW5zaXRpb25UbyhcbiAgICAgIGhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCksXG4gICAgICBzZXR1cExpc3RlbmVycyxcbiAgICAgIHNldHVwTGlzdGVuZXJzXG4gICAgKTtcbiAgfVxuXG4gIGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChyb3V0ZSkge1xuICAgIHRoaXMkMS5hcHBzLmZvckVhY2goZnVuY3Rpb24gKGFwcCkge1xuICAgICAgYXBwLl9yb3V0ZSA9IHJvdXRlO1xuICAgIH0pO1xuICB9KTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYmVmb3JlRWFjaCA9IGZ1bmN0aW9uIGJlZm9yZUVhY2ggKGZuKSB7XG4gIHJldHVybiByZWdpc3Rlckhvb2sodGhpcy5iZWZvcmVIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJlZm9yZVJlc29sdmUgPSBmdW5jdGlvbiBiZWZvcmVSZXNvbHZlIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMucmVzb2x2ZUhvb2tzLCBmbilcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWZ0ZXJFYWNoID0gZnVuY3Rpb24gYWZ0ZXJFYWNoIChmbikge1xuICByZXR1cm4gcmVnaXN0ZXJIb29rKHRoaXMuYWZ0ZXJIb29rcywgZm4pXG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uUmVhZHkgPSBmdW5jdGlvbiBvblJlYWR5IChjYiwgZXJyb3JDYikge1xuICB0aGlzLmhpc3Rvcnkub25SZWFkeShjYiwgZXJyb3JDYik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yIChlcnJvckNiKSB7XG4gIHRoaXMuaGlzdG9yeS5vbkVycm9yKGVycm9yQ2IpO1xufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gcHVzaCAobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFvbkNvbXBsZXRlICYmICFvbkFib3J0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB0aGlzJDEuaGlzdG9yeS5wdXNoKGxvY2F0aW9uLCByZXNvbHZlLCByZWplY3QpO1xuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5oaXN0b3J5LnB1c2gobG9jYXRpb24sIG9uQ29tcGxldGUsIG9uQWJvcnQpO1xuICB9XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLnJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlIChsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIW9uQ29tcGxldGUgJiYgIW9uQWJvcnQgJiYgdHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHRoaXMkMS5oaXN0b3J5LnJlcGxhY2UobG9jYXRpb24sIHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgb25Db21wbGV0ZSwgb25BYm9ydCk7XG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ28gPSBmdW5jdGlvbiBnbyAobikge1xuICB0aGlzLmhpc3RvcnkuZ28obik7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmJhY2sgPSBmdW5jdGlvbiBiYWNrICgpIHtcbiAgdGhpcy5nbygtMSk7XG59O1xuXG5WdWVSb3V0ZXIucHJvdG90eXBlLmZvcndhcmQgPSBmdW5jdGlvbiBmb3J3YXJkICgpIHtcbiAgdGhpcy5nbygxKTtcbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuZ2V0TWF0Y2hlZENvbXBvbmVudHMgPSBmdW5jdGlvbiBnZXRNYXRjaGVkQ29tcG9uZW50cyAodG8pIHtcbiAgdmFyIHJvdXRlID0gdG9cbiAgICA/IHRvLm1hdGNoZWRcbiAgICAgID8gdG9cbiAgICAgIDogdGhpcy5yZXNvbHZlKHRvKS5yb3V0ZVxuICAgIDogdGhpcy5jdXJyZW50Um91dGU7XG4gIGlmICghcm91dGUpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuICByZXR1cm4gW10uY29uY2F0LmFwcGx5KFxuICAgIFtdLFxuICAgIHJvdXRlLm1hdGNoZWQubWFwKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMobS5jb21wb25lbnRzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4gbS5jb21wb25lbnRzW2tleV1cbiAgICAgIH0pXG4gICAgfSlcbiAgKVxufTtcblxuVnVlUm91dGVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSAoXG4gIHRvLFxuICBjdXJyZW50LFxuICBhcHBlbmRcbikge1xuICBjdXJyZW50ID0gY3VycmVudCB8fCB0aGlzLmhpc3RvcnkuY3VycmVudDtcbiAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplTG9jYXRpb24odG8sIGN1cnJlbnQsIGFwcGVuZCwgdGhpcyk7XG4gIHZhciByb3V0ZSA9IHRoaXMubWF0Y2gobG9jYXRpb24sIGN1cnJlbnQpO1xuICB2YXIgZnVsbFBhdGggPSByb3V0ZS5yZWRpcmVjdGVkRnJvbSB8fCByb3V0ZS5mdWxsUGF0aDtcbiAgdmFyIGJhc2UgPSB0aGlzLmhpc3RvcnkuYmFzZTtcbiAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGJhc2UsIGZ1bGxQYXRoLCB0aGlzLm1vZGUpO1xuICByZXR1cm4ge1xuICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICByb3V0ZTogcm91dGUsXG4gICAgaHJlZjogaHJlZixcbiAgICAvLyBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIG5vcm1hbGl6ZWRUbzogbG9jYXRpb24sXG4gICAgcmVzb2x2ZWQ6IHJvdXRlXG4gIH1cbn07XG5cblZ1ZVJvdXRlci5wcm90b3R5cGUuYWRkUm91dGVzID0gZnVuY3Rpb24gYWRkUm91dGVzIChyb3V0ZXMpIHtcbiAgdGhpcy5tYXRjaGVyLmFkZFJvdXRlcyhyb3V0ZXMpO1xuICBpZiAodGhpcy5oaXN0b3J5LmN1cnJlbnQgIT09IFNUQVJUKSB7XG4gICAgdGhpcy5oaXN0b3J5LnRyYW5zaXRpb25Ubyh0aGlzLmhpc3RvcnkuZ2V0Q3VycmVudExvY2F0aW9uKCkpO1xuICB9XG59O1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyggVnVlUm91dGVyLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySG9vayAobGlzdCwgZm4pIHtcbiAgbGlzdC5wdXNoKGZuKTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaSA9IGxpc3QuaW5kZXhPZihmbik7XG4gICAgaWYgKGkgPiAtMSkgeyBsaXN0LnNwbGljZShpLCAxKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUhyZWYgKGJhc2UsIGZ1bGxQYXRoLCBtb2RlKSB7XG4gIHZhciBwYXRoID0gbW9kZSA9PT0gJ2hhc2gnID8gJyMnICsgZnVsbFBhdGggOiBmdWxsUGF0aDtcbiAgcmV0dXJuIGJhc2UgPyBjbGVhblBhdGgoYmFzZSArICcvJyArIHBhdGgpIDogcGF0aFxufVxuXG5WdWVSb3V0ZXIuaW5zdGFsbCA9IGluc3RhbGw7XG5WdWVSb3V0ZXIudmVyc2lvbiA9ICczLjQuOSc7XG5WdWVSb3V0ZXIuaXNOYXZpZ2F0aW9uRmFpbHVyZSA9IGlzTmF2aWdhdGlvbkZhaWx1cmU7XG5WdWVSb3V0ZXIuTmF2aWdhdGlvbkZhaWx1cmVUeXBlID0gTmF2aWdhdGlvbkZhaWx1cmVUeXBlO1xuXG5pZiAoaW5Ccm93c2VyICYmIHdpbmRvdy5WdWUpIHtcbiAgd2luZG93LlZ1ZS51c2UoVnVlUm91dGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgVnVlUm91dGVyO1xuIiwiLyohXG4gKiBWdWUuanMgdjIuNi4xMlxuICogKGMpIDIwMTQtMjAyMCBFdmFuIFlvdVxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLlxuICovXG4vKiAgKi9cblxudmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbi8vIFRoZXNlIGhlbHBlcnMgcHJvZHVjZSBiZXR0ZXIgVk0gY29kZSBpbiBKUyBlbmdpbmVzIGR1ZSB0byB0aGVpclxuLy8gZXhwbGljaXRuZXNzIGFuZCBmdW5jdGlvbiBpbmxpbmluZy5cbmZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSBudWxsXG59XG5cbmZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gIHJldHVybiB2ICE9PSB1bmRlZmluZWQgJiYgdiAhPT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgcmV0dXJuIHYgPT09IHRydWVcbn1cblxuZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICByZXR1cm4gdiA9PT0gZmFsc2Vcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB2YWx1ZSBpcyBwcmltaXRpdmUuXG4gKi9cbmZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdHlwZW9mIHZhbHVlID09PSAnc3ltYm9sJyB8fFxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gIClcbn1cblxuLyoqXG4gKiBRdWljayBvYmplY3QgY2hlY2sgLSB0aGlzIGlzIHByaW1hcmlseSB1c2VkIHRvIHRlbGxcbiAqIE9iamVjdHMgZnJvbSBwcmltaXRpdmUgdmFsdWVzIHdoZW4gd2Uga25vdyB0aGUgdmFsdWVcbiAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QgKG9iaikge1xuICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG59XG5cbi8qKlxuICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICovXG52YXIgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIHZhciBuID0gcGFyc2VGbG9hdChTdHJpbmcodmFsKSk7XG4gIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG59XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZSAodmFsKSB7XG4gIHJldHVybiAoXG4gICAgaXNEZWYodmFsKSAmJlxuICAgIHR5cGVvZiB2YWwudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgKVxufVxuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSB0byBhIHN0cmluZyB0aGF0IGlzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICovXG5mdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbFxuICAgID8gJydcbiAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWwsIG51bGwsIDIpXG4gICAgICA6IFN0cmluZyh2YWwpXG59XG5cbi8qKlxuICogQ29udmVydCBhbiBpbnB1dCB2YWx1ZSB0byBhIG51bWJlciBmb3IgcGVyc2lzdGVuY2UuXG4gKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIgKHZhbCkge1xuICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgcmV0dXJuIGlzTmFOKG4pID8gdmFsIDogblxufVxuXG4vKipcbiAqIE1ha2UgYSBtYXAgYW5kIHJldHVybiBhIGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhIGtleVxuICogaXMgaW4gdGhhdCBtYXAuXG4gKi9cbmZ1bmN0aW9uIG1ha2VNYXAgKFxuICBzdHIsXG4gIGV4cGVjdHNMb3dlckNhc2Vcbikge1xuICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgbWFwW2xpc3RbaV1dID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZXhwZWN0c0xvd2VyQ2FzZVxuICAgID8gZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXTsgfVxuICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAqL1xudmFyIGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG52YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbi8qKlxuICogUmVtb3ZlIGFuIGl0ZW0gZnJvbSBhbiBhcnJheS5cbiAqL1xuZnVuY3Rpb24gcmVtb3ZlIChhcnIsIGl0ZW0pIHtcbiAgaWYgKGFyci5sZW5ndGgpIHtcbiAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgcmV0dXJuIGFyci5zcGxpY2UoaW5kZXgsIDEpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQ2hlY2sgd2hldGhlciBhbiBvYmplY3QgaGFzIHRoZSBwcm9wZXJ0eS5cbiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgIHZhciBoaXQgPSBjYWNoZVtzdHJdO1xuICAgIHJldHVybiBoaXQgfHwgKGNhY2hlW3N0cl0gPSBmbihzdHIpKVxuICB9KVxufVxuXG4vKipcbiAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gKi9cbnZhciBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xudmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIGZ1bmN0aW9uIChfLCBjKSB7IHJldHVybiBjID8gYy50b1VwcGVyQ2FzZSgpIDogJyc7IH0pXG59KTtcblxuLyoqXG4gKiBDYXBpdGFsaXplIGEgc3RyaW5nLlxuICovXG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSlcbn0pO1xuXG4vKipcbiAqIEh5cGhlbmF0ZSBhIGNhbWVsQ2FzZSBzdHJpbmcuXG4gKi9cbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGh5cGhlbmF0ZVJFLCAnLSQxJykudG9Mb3dlckNhc2UoKVxufSk7XG5cbi8qKlxuICogU2ltcGxlIGJpbmQgcG9seWZpbGwgZm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBzdXBwb3J0IGl0LFxuICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gKiBzaW5jZSBuYXRpdmUgYmluZCBpcyBub3cgcGVyZm9ybWFudCBlbm91Z2ggaW4gbW9zdCBicm93c2Vycy5cbiAqIEJ1dCByZW1vdmluZyBpdCB3b3VsZCBtZWFuIGJyZWFraW5nIGNvZGUgdGhhdCB3YXMgYWJsZSB0byBydW4gaW5cbiAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICovXG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgZnVuY3Rpb24gYm91bmRGbiAoYSkge1xuICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICByZXR1cm4gbFxuICAgICAgPyBsID4gMVxuICAgICAgICA/IGZuLmFwcGx5KGN0eCwgYXJndW1lbnRzKVxuICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgOiBmbi5jYWxsKGN0eClcbiAgfVxuXG4gIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgcmV0dXJuIGJvdW5kRm5cbn1cblxuZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICByZXR1cm4gZm4uYmluZChjdHgpXG59XG5cbnZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIHZhciBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgd2hpbGUgKGktLSkge1xuICAgIHJldFtpXSA9IGxpc3RbaSArIHN0YXJ0XTtcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbi8qKlxuICogTWl4IHByb3BlcnRpZXMgaW50byB0YXJnZXQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICBmb3IgKHZhciBrZXkgaW4gX2Zyb20pIHtcbiAgICB0b1trZXldID0gX2Zyb21ba2V5XTtcbiAgfVxuICByZXR1cm4gdG9cbn1cblxuLyoqXG4gKiBNZXJnZSBhbiBBcnJheSBvZiBPYmplY3RzIGludG8gYSBzaW5nbGUgT2JqZWN0LlxuICovXG5mdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG52YXIgbm8gPSBmdW5jdGlvbiAoYSwgYiwgYykgeyByZXR1cm4gZmFsc2U7IH07XG5cbi8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuLyoqXG4gKiBSZXR1cm4gdGhlIHNhbWUgdmFsdWUuXG4gKi9cbnZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4vKipcbiAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICogaWYgdGhleSBhcmUgcGxhaW4gb2JqZWN0cywgZG8gdGhleSBoYXZlIHRoZSBzYW1lIHNoYXBlP1xuICovXG5mdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gIGlmIChpc09iamVjdEEgJiYgaXNPYmplY3RCKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICB2YXIgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMoYik7XG4gICAgICAgIHJldHVybiBrZXlzQS5sZW5ndGggPT09IGtleXNCLmxlbmd0aCAmJiBrZXlzQS5ldmVyeShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9IGVsc2UgaWYgKCFpc09iamVjdEEgJiYgIWlzT2JqZWN0Qikge1xuICAgIHJldHVybiBTdHJpbmcoYSkgPT09IFN0cmluZyhiKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBmaXJzdCBpbmRleCBhdCB3aGljaCBhIGxvb3NlbHkgZXF1YWwgdmFsdWUgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICogY29udGFpbiBhbiBvYmplY3Qgb2YgdGhlIHNhbWUgc2hhcGUpLCBvciAtMSBpZiBpdCBpcyBub3QgcHJlc2VudC5cbiAqL1xuZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xuICAgIGlmIChsb29zZUVxdWFsKGFycltpXSwgdmFsKSkgeyByZXR1cm4gaSB9XG4gIH1cbiAgcmV0dXJuIC0xXG59XG5cbi8qKlxuICogRW5zdXJlIGEgZnVuY3Rpb24gaXMgY2FsbGVkIG9ubHkgb25jZS5cbiAqL1xuZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgdmFyIGNhbGxlZCA9IGZhbHNlO1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmICghY2FsbGVkKSB7XG4gICAgICBjYWxsZWQgPSB0cnVlO1xuICAgICAgZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxudmFyIEFTU0VUX1RZUEVTID0gW1xuICAnY29tcG9uZW50JyxcbiAgJ2RpcmVjdGl2ZScsXG4gICdmaWx0ZXInXG5dO1xuXG52YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAnYmVmb3JlQ3JlYXRlJyxcbiAgJ2NyZWF0ZWQnLFxuICAnYmVmb3JlTW91bnQnLFxuICAnbW91bnRlZCcsXG4gICdiZWZvcmVVcGRhdGUnLFxuICAndXBkYXRlZCcsXG4gICdiZWZvcmVEZXN0cm95JyxcbiAgJ2Rlc3Ryb3llZCcsXG4gICdhY3RpdmF0ZWQnLFxuICAnZGVhY3RpdmF0ZWQnLFxuICAnZXJyb3JDYXB0dXJlZCcsXG4gICdzZXJ2ZXJQcmVmZXRjaCdcbl07XG5cbi8qICAqL1xuXG5cblxudmFyIGNvbmZpZyA9ICh7XG4gIC8qKlxuICAgKiBPcHRpb24gbWVyZ2Ugc3RyYXRlZ2llcyAodXNlZCBpbiBjb3JlL3V0aWwvb3B0aW9ucylcbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBvcHRpb25NZXJnZVN0cmF0ZWdpZXM6IE9iamVjdC5jcmVhdGUobnVsbCksXG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc3VwcHJlc3Mgd2FybmluZ3MuXG4gICAqL1xuICBzaWxlbnQ6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTaG93IHByb2R1Y3Rpb24gbW9kZSB0aXAgbWVzc2FnZSBvbiBib290P1xuICAgKi9cbiAgcHJvZHVjdGlvblRpcDogcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyxcblxuICAvKipcbiAgICogV2hldGhlciB0byBlbmFibGUgZGV2dG9vbHNcbiAgICovXG4gIGRldnRvb2xzOiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xudmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICB2YXIgYyA9IChzdHIgKyAnJykuY2hhckNvZGVBdCgwKTtcbiAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxufVxuXG4vKipcbiAqIERlZmluZSBhIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBkZWYgKG9iaiwga2V5LCB2YWwsIGVudW1lcmFibGUpIHtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgdmFsdWU6IHZhbCxcbiAgICBlbnVtZXJhYmxlOiAhIWVudW1lcmFibGUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG4vKipcbiAqIFBhcnNlIHNpbXBsZSBwYXRoLlxuICovXG52YXIgYmFpbFJFID0gbmV3IFJlZ0V4cCgoXCJbXlwiICsgKHVuaWNvZGVSZWdFeHAuc291cmNlKSArIFwiLiRfXFxcXGRdXCIpKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gIHJldHVybiBmdW5jdGlvbiAob2JqKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWdtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgIG9iaiA9IG9ialtzZWdtZW50c1tpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmpcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gY2FuIHdlIHVzZSBfX3Byb3RvX18/XG52YXIgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xudmFyIGluQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xudmFyIGluV2VleCA9IHR5cGVvZiBXWEVudmlyb25tZW50ICE9PSAndW5kZWZpbmVkJyAmJiAhIVdYRW52aXJvbm1lbnQucGxhdGZvcm07XG52YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbnZhciBVQSA9IGluQnJvd3NlciAmJiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xudmFyIGlzSUUgPSBVQSAmJiAvbXNpZXx0cmlkZW50Ly50ZXN0KFVBKTtcbnZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xudmFyIGlzRWRnZSA9IFVBICYmIFVBLmluZGV4T2YoJ2VkZ2UvJykgPiAwO1xudmFyIGlzQW5kcm9pZCA9IChVQSAmJiBVQS5pbmRleE9mKCdhbmRyb2lkJykgPiAwKSB8fCAod2VleFBsYXRmb3JtID09PSAnYW5kcm9pZCcpO1xudmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbnZhciBpc0Nocm9tZSA9IFVBICYmIC9jaHJvbWVcXC9cXGQrLy50ZXN0KFVBKSAmJiAhaXNFZGdlO1xudmFyIGlzUGhhbnRvbUpTID0gVUEgJiYgL3BoYW50b21qcy8udGVzdChVQSk7XG52YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbnZhciBuYXRpdmVXYXRjaCA9ICh7fSkud2F0Y2g7XG5cbnZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbmlmIChpbkJyb3dzZXIpIHtcbiAgdHJ5IHtcbiAgICB2YXIgb3B0cyA9IHt9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRzLCAncGFzc2l2ZScsICh7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QtcGFzc2l2ZScsIG51bGwsIG9wdHMpO1xuICB9IGNhdGNoIChlKSB7fVxufVxuXG4vLyB0aGlzIG5lZWRzIHRvIGJlIGxhenktZXZhbGVkIGJlY2F1c2UgdnVlIG1heSBiZSByZXF1aXJlZCBiZWZvcmVcbi8vIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgY2FuIHNldCBWVUVfRU5WXG52YXIgX2lzU2VydmVyO1xudmFyIGlzU2VydmVyUmVuZGVyaW5nID0gZnVuY3Rpb24gKCkge1xuICBpZiAoX2lzU2VydmVyID09PSB1bmRlZmluZWQpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3NlciAmJiAhaW5XZWV4ICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBkZXRlY3QgcHJlc2VuY2Ugb2YgdnVlLXNlcnZlci1yZW5kZXJlciBhbmQgYXZvaWRcbiAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgIF9pc1NlcnZlciA9IGdsb2JhbFsncHJvY2VzcyddICYmIGdsb2JhbFsncHJvY2VzcyddLmVudi5WVUVfRU5WID09PSAnc2VydmVyJztcbiAgICB9IGVsc2Uge1xuICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHJldHVybiBfaXNTZXJ2ZXJcbn07XG5cbi8vIGRldGVjdCBkZXZ0b29sc1xudmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbnZhciBoYXNTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gIHR5cGVvZiBSZWZsZWN0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShSZWZsZWN0Lm93bktleXMpO1xuXG52YXIgX1NldDtcbi8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbmlmICh0eXBlb2YgU2V0ICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTZXQpKSB7XG4gIC8vIHVzZSBuYXRpdmUgU2V0IHdoZW4gYXZhaWxhYmxlLlxuICBfU2V0ID0gU2V0O1xufSBlbHNlIHtcbiAgLy8gYSBub24tc3RhbmRhcmQgU2V0IHBvbHlmaWxsIHRoYXQgb25seSB3b3JrcyB3aXRoIHByaW1pdGl2ZSBrZXlzLlxuICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2V0ICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9XG4gICAgU2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9O1xuICAgIFNldC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH07XG4gICAgU2V0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uIGNsZWFyICgpIHtcbiAgICAgIHRoaXMuc2V0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFNldDtcbiAgfSgpKTtcbn1cblxuLyogICovXG5cbnZhciB3YXJuID0gbm9vcDtcbnZhciB0aXAgPSBub29wO1xudmFyIGdlbmVyYXRlQ29tcG9uZW50VHJhY2UgPSAobm9vcCk7IC8vIHdvcmsgYXJvdW5kIGZsb3cgY2hlY2tcbnZhciBmb3JtYXRDb21wb25lbnROYW1lID0gKG5vb3ApO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gIHZhciBjbGFzc2lmeSA9IGZ1bmN0aW9uIChzdHIpIHsgcmV0dXJuIHN0clxuICAgIC5yZXBsYWNlKGNsYXNzaWZ5UkUsIGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRvVXBwZXJDYXNlKCk7IH0pXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gIHdhcm4gPSBmdW5jdGlvbiAobXNnLCB2bSkge1xuICAgIHZhciB0cmFjZSA9IHZtID8gZ2VuZXJhdGVDb21wb25lbnRUcmFjZSh2bSkgOiAnJztcblxuICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgIGNvbmZpZy53YXJuSGFuZGxlci5jYWxsKG51bGwsIG1zZywgdm0sIHRyYWNlKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgfVxuICB9O1xuXG4gIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgaWYgKGhhc0NvbnNvbGUgJiYgKCFjb25maWcuc2lsZW50KSkge1xuICAgICAgY29uc29sZS53YXJuKFwiW1Z1ZSB0aXBdOiBcIiArIG1zZyArIChcbiAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICApKTtcbiAgICB9XG4gIH07XG5cbiAgZm9ybWF0Q29tcG9uZW50TmFtZSA9IGZ1bmN0aW9uICh2bSwgaW5jbHVkZUZpbGUpIHtcbiAgICBpZiAodm0uJHJvb3QgPT09IHZtKSB7XG4gICAgICByZXR1cm4gJzxSb290PidcbiAgICB9XG4gICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygdm0gPT09ICdmdW5jdGlvbicgJiYgdm0uY2lkICE9IG51bGxcbiAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgOiB2bS5faXNWdWVcbiAgICAgICAgPyB2bS4kb3B0aW9ucyB8fCB2bS5jb25zdHJ1Y3Rvci5vcHRpb25zXG4gICAgICAgIDogdm07XG4gICAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUgfHwgb3B0aW9ucy5fY29tcG9uZW50VGFnO1xuICAgIHZhciBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbGUubWF0Y2goLyhbXi9cXFxcXSspXFwudnVlJC8pO1xuICAgICAgbmFtZSA9IG1hdGNoICYmIG1hdGNoWzFdO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICAobmFtZSA/IChcIjxcIiArIChjbGFzc2lmeShuYW1lKSkgKyBcIj5cIikgOiBcIjxBbm9ueW1vdXM+XCIpICtcbiAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgKVxuICB9O1xuXG4gIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgaWYgKG4gPiAxKSB7IHN0ciArPSBzdHI7IH1cbiAgICAgIG4gPj49IDE7XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfTtcblxuICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgaWYgKHZtLl9pc1Z1ZSAmJiB2bS4kcGFyZW50KSB7XG4gICAgICB2YXIgdHJlZSA9IFtdO1xuICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICB3aGlsZSAodm0pIHtcbiAgICAgICAgaWYgKHRyZWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcChmdW5jdGlvbiAodm0sIGkpIHsgcmV0dXJuIChcIlwiICsgKGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKSkgKyAoQXJyYXkuaXNBcnJheSh2bSlcbiAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgOiBmb3JtYXRDb21wb25lbnROYW1lKHZtKSkpOyB9KVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIChcIlxcblxcbihmb3VuZCBpbiBcIiArIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIilcIilcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgdWlkID0gMDtcblxuLyoqXG4gKiBBIGRlcCBpcyBhbiBvYnNlcnZhYmxlIHRoYXQgY2FuIGhhdmUgbXVsdGlwbGVcbiAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gKi9cbnZhciBEZXAgPSBmdW5jdGlvbiBEZXAgKCkge1xuICB0aGlzLmlkID0gdWlkKys7XG4gIHRoaXMuc3VicyA9IFtdO1xufTtcblxuRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICB0aGlzLnN1YnMucHVzaChzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xufTtcblxuRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICBpZiAoRGVwLnRhcmdldCkge1xuICAgIERlcC50YXJnZXQuYWRkRGVwKHRoaXMpO1xuICB9XG59O1xuXG5EZXAucHJvdG90eXBlLm5vdGlmeSA9IGZ1bmN0aW9uIG5vdGlmeSAoKSB7XG4gIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gIHZhciBzdWJzID0gdGhpcy5zdWJzLnNsaWNlKCk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb25maWcuYXN5bmMpIHtcbiAgICAvLyBzdWJzIGFyZW4ndCBzb3J0ZWQgaW4gc2NoZWR1bGVyIGlmIG5vdCBydW5uaW5nIGFzeW5jXG4gICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgIC8vIG9yZGVyXG4gICAgc3Vicy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBzdWJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHN1YnNbaV0udXBkYXRlKCk7XG4gIH1cbn07XG5cbi8vIFRoZSBjdXJyZW50IHRhcmdldCB3YXRjaGVyIGJlaW5nIGV2YWx1YXRlZC5cbi8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuLy8gY2FuIGJlIGV2YWx1YXRlZCBhdCBhIHRpbWUuXG5EZXAudGFyZ2V0ID0gbnVsbDtcbnZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxudmFyIFZOb2RlID0gZnVuY3Rpb24gVk5vZGUgKFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICB0ZXh0LFxuICBlbG0sXG4gIGNvbnRleHQsXG4gIGNvbXBvbmVudE9wdGlvbnMsXG4gIGFzeW5jRmFjdG9yeVxuKSB7XG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMudGV4dCA9IHRleHQ7XG4gIHRoaXMuZWxtID0gZWxtO1xuICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIHRoaXMuZm5TY29wZUlkID0gdW5kZWZpbmVkO1xuICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gIHRoaXMuY29tcG9uZW50SW5zdGFuY2UgPSB1bmRlZmluZWQ7XG4gIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICB0aGlzLnJhdyA9IGZhbHNlO1xuICB0aGlzLmlzU3RhdGljID0gZmFsc2U7XG4gIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgdGhpcy5pc0Nsb25lZCA9IGZhbHNlO1xuICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgdGhpcy5hc3luY01ldGEgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG59O1xuXG52YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBjaGlsZDogeyBjb25maWd1cmFibGU6IHRydWUgfSB9O1xuXG4vLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xucHJvdG90eXBlQWNjZXNzb3JzLmNoaWxkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2Vcbn07XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBWTm9kZS5wcm90b3R5cGUsIHByb3RvdHlwZUFjY2Vzc29ycyApO1xuXG52YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gIGlmICggdGV4dCA9PT0gdm9pZCAwICkgdGV4dCA9ICcnO1xuXG4gIHZhciBub2RlID0gbmV3IFZOb2RlKCk7XG4gIG5vZGUudGV4dCA9IHRleHQ7XG4gIG5vZGUuaXNDb21tZW50ID0gdHJ1ZTtcbiAgcmV0dXJuIG5vZGVcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWTm9kZSAodmFsKSB7XG4gIHJldHVybiBuZXcgVk5vZGUodW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgU3RyaW5nKHZhbCkpXG59XG5cbi8vIG9wdGltaXplZCBzaGFsbG93IGNsb25lXG4vLyB1c2VkIGZvciBzdGF0aWMgbm9kZXMgYW5kIHNsb3Qgbm9kZXMgYmVjYXVzZSB0aGV5IG1heSBiZSByZXVzZWQgYWNyb3NzXG4vLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbi8vIG9uIHRoZWlyIGVsbSByZWZlcmVuY2UuXG5mdW5jdGlvbiBjbG9uZVZOb2RlICh2bm9kZSkge1xuICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xudmFyIGFycmF5TWV0aG9kcyA9IE9iamVjdC5jcmVhdGUoYXJyYXlQcm90byk7XG5cbnZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgdmFyIG9yaWdpbmFsID0gYXJyYXlQcm90b1ttZXRob2RdO1xuICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXztcbiAgICB2YXIgaW5zZXJ0ZWQ7XG4gICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgIGNhc2UgJ3B1c2gnOlxuICAgICAgY2FzZSAndW5zaGlmdCc6XG4gICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgYnJlYWtcbiAgICAgIGNhc2UgJ3NwbGljZSc6XG4gICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbnZhciBhcnJheUtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhcnJheU1ldGhvZHMpO1xuXG4vKipcbiAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICogdXBkYXRlIGNvbXB1dGF0aW9uLlxuICovXG52YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbmZ1bmN0aW9uIHRvZ2dsZU9ic2VydmluZyAodmFsdWUpIHtcbiAgc2hvdWxkT2JzZXJ2ZSA9IHZhbHVlO1xufVxuXG4vKipcbiAqIE9ic2VydmVyIGNsYXNzIHRoYXQgaXMgYXR0YWNoZWQgdG8gZWFjaCBvYnNlcnZlZFxuICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICogb2JqZWN0J3MgcHJvcGVydHkga2V5cyBpbnRvIGdldHRlci9zZXR0ZXJzIHRoYXRcbiAqIGNvbGxlY3QgZGVwZW5kZW5jaWVzIGFuZCBkaXNwYXRjaCB1cGRhdGVzLlxuICovXG52YXIgT2JzZXJ2ZXIgPSBmdW5jdGlvbiBPYnNlcnZlciAodmFsdWUpIHtcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgdGhpcy52bUNvdW50ID0gMDtcbiAgZGVmKHZhbHVlLCAnX19vYl9fJywgdGhpcyk7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIGlmIChoYXNQcm90bykge1xuICAgICAgcHJvdG9BdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3B5QXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzLCBhcnJheUtleXMpO1xuICAgIH1cbiAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy53YWxrKHZhbHVlKTtcbiAgfVxufTtcblxuLyoqXG4gKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gKiBnZXR0ZXIvc2V0dGVycy4gVGhpcyBtZXRob2Qgc2hvdWxkIG9ubHkgYmUgY2FsbGVkIHdoZW5cbiAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICovXG5PYnNlcnZlci5wcm90b3R5cGUud2FsayA9IGZ1bmN0aW9uIHdhbGsgKG9iaikge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKG9iaiwga2V5c1tpXSk7XG4gIH1cbn07XG5cbi8qKlxuICogT2JzZXJ2ZSBhIGxpc3Qgb2YgQXJyYXkgaXRlbXMuXG4gKi9cbk9ic2VydmVyLnByb3RvdHlwZS5vYnNlcnZlQXJyYXkgPSBmdW5jdGlvbiBvYnNlcnZlQXJyYXkgKGl0ZW1zKSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0gaXRlbXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gIH1cbn07XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gIH1cbn1cblxuLyoqXG4gKiBBdHRlbXB0IHRvIGNyZWF0ZSBhbiBvYnNlcnZlciBpbnN0YW5jZSBmb3IgYSB2YWx1ZSxcbiAqIHJldHVybnMgdGhlIG5ldyBvYnNlcnZlciBpZiBzdWNjZXNzZnVsbHkgb2JzZXJ2ZWQsXG4gKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZSAodmFsdWUsIGFzUm9vdERhdGEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYjtcbiAgaWYgKGhhc093bih2YWx1ZSwgJ19fb2JfXycpICYmIHZhbHVlLl9fb2JfXyBpbnN0YW5jZW9mIE9ic2VydmVyKSB7XG4gICAgb2IgPSB2YWx1ZS5fX29iX187XG4gIH0gZWxzZSBpZiAoXG4gICAgc2hvdWxkT2JzZXJ2ZSAmJlxuICAgICFpc1NlcnZlclJlbmRlcmluZygpICYmXG4gICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgIE9iamVjdC5pc0V4dGVuc2libGUodmFsdWUpICYmXG4gICAgIXZhbHVlLl9pc1Z1ZVxuICApIHtcbiAgICBvYiA9IG5ldyBPYnNlcnZlcih2YWx1ZSk7XG4gIH1cbiAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICBvYi52bUNvdW50Kys7XG4gIH1cbiAgcmV0dXJuIG9iXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICovXG5mdW5jdGlvbiBkZWZpbmVSZWFjdGl2ZSQkMSAoXG4gIG9iaixcbiAga2V5LFxuICB2YWwsXG4gIGN1c3RvbVNldHRlcixcbiAgc2hhbGxvd1xuKSB7XG4gIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgdmFyIHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgdmFyIHNldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LnNldDtcbiAgaWYgKCghZ2V0dGVyIHx8IHNldHRlcikgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgIHZhbCA9IG9ialtrZXldO1xuICB9XG5cbiAgdmFyIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKHZhbCk7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAobmV3VmFsID09PSB2YWx1ZSB8fCAobmV3VmFsICE9PSBuZXdWYWwgJiYgdmFsdWUgIT09IHZhbHVlKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8qIGVzbGludC1lbmFibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgeyByZXR1cm4gfVxuICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICBzZXR0ZXIuY2FsbChvYmosIG5ld1ZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICB9XG4gICAgICBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZShuZXdWYWwpO1xuICAgICAgZGVwLm5vdGlmeSgpO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogU2V0IGEgcHJvcGVydHkgb24gYW4gb2JqZWN0LiBBZGRzIHRoZSBuZXcgcHJvcGVydHkgYW5kXG4gKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gKiBhbHJlYWR5IGV4aXN0LlxuICovXG5mdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEsIHZhbCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmIChrZXkgaW4gdGFyZ2V0ICYmICEoa2V5IGluIE9iamVjdC5wcm90b3R5cGUpKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGFkZGluZyByZWFjdGl2ZSBwcm9wZXJ0aWVzIHRvIGEgVnVlIGluc3RhbmNlIG9yIGl0cyByb290ICRkYXRhICcgK1xuICAgICAgJ2F0IHJ1bnRpbWUgLSBkZWNsYXJlIGl0IHVwZnJvbnQgaW4gdGhlIGRhdGEgb3B0aW9uLidcbiAgICApO1xuICAgIHJldHVybiB2YWxcbiAgfVxuICBpZiAoIW9iKSB7XG4gICAgdGFyZ2V0W2tleV0gPSB2YWw7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGRlZmluZVJlYWN0aXZlJCQxKG9iLnZhbHVlLCBrZXksIHZhbCk7XG4gIG9iLmRlcC5ub3RpZnkoKTtcbiAgcmV0dXJuIHZhbFxufVxuXG4vKipcbiAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gKi9cbmZ1bmN0aW9uIGRlbCAodGFyZ2V0LCBrZXkpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldCkpXG4gICkge1xuICAgIHdhcm4oKFwiQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSAmJiBpc1ZhbGlkQXJyYXlJbmRleChrZXkpKSB7XG4gICAgdGFyZ2V0LnNwbGljZShrZXksIDEpO1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvYiA9ICh0YXJnZXQpLl9fb2JfXztcbiAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgJ0F2b2lkIGRlbGV0aW5nIHByb3BlcnRpZXMgb24gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnLSBqdXN0IHNldCBpdCB0byBudWxsLidcbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgIHJldHVyblxuICB9XG4gIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgaWYgKCFvYikge1xuICAgIHJldHVyblxuICB9XG4gIG9iLmRlcC5ub3RpZnkoKTtcbn1cblxuLyoqXG4gKiBDb2xsZWN0IGRlcGVuZGVuY2llcyBvbiBhcnJheSBlbGVtZW50cyB3aGVuIHRoZSBhcnJheSBpcyB0b3VjaGVkLCBzaW5jZVxuICogd2UgY2Fubm90IGludGVyY2VwdCBhcnJheSBlbGVtZW50IGFjY2VzcyBsaWtlIHByb3BlcnR5IGdldHRlcnMuXG4gKi9cbmZ1bmN0aW9uIGRlcGVuZEFycmF5ICh2YWx1ZSkge1xuICBmb3IgKHZhciBlID0gKHZvaWQgMCksIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG52YXIgc3RyYXRzID0gY29uZmlnLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztcblxuLyoqXG4gKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gKi9cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHN0cmF0cy5lbCA9IHN0cmF0cy5wcm9wc0RhdGEgPSBmdW5jdGlvbiAocGFyZW50LCBjaGlsZCwgdm0sIGtleSkge1xuICAgIGlmICghdm0pIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwib3B0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBjYW4gb25seSBiZSB1c2VkIGR1cmluZyBpbnN0YW5jZSBcIiArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgdmFyIGtleSwgdG9WYWwsIGZyb21WYWw7XG5cbiAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgIDogT2JqZWN0LmtleXMoZnJvbSk7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICAvLyBpbiBjYXNlIHRoZSBvYmplY3QgaXMgYWxyZWFkeSBvYnNlcnZlZC4uLlxuICAgIGlmIChrZXkgPT09ICdfX29iX18nKSB7IGNvbnRpbnVlIH1cbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgdmFyIGluc3RhbmNlRGF0YSA9IHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICA6IGNoaWxkVmFsO1xuICAgICAgdmFyIGRlZmF1bHREYXRhID0gdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgOiBwYXJlbnRWYWw7XG4gICAgICBpZiAoaW5zdGFuY2VEYXRhKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0YVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5zdHJhdHMuZGF0YSA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm1cbikge1xuICBpZiAoIXZtKSB7XG4gICAgaWYgKGNoaWxkVmFsICYmIHR5cGVvZiBjaGlsZFZhbCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnVGhlIFwiZGF0YVwiIG9wdGlvbiBzaG91bGQgYmUgYSBmdW5jdGlvbiAnICtcbiAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICdkZWZpbml0aW9ucy4nLFxuICAgICAgICB2bVxuICAgICAgKTtcblxuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICB9XG5cbiAgcmV0dXJuIG1lcmdlRGF0YU9yRm4ocGFyZW50VmFsLCBjaGlsZFZhbCwgdm0pXG59O1xuXG4vKipcbiAqIEhvb2tzIGFuZCBwcm9wcyBhcmUgbWVyZ2VkIGFzIGFycmF5cy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VIb29rIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbFxuKSB7XG4gIHZhciByZXMgPSBjaGlsZFZhbFxuICAgID8gcGFyZW50VmFsXG4gICAgICA/IHBhcmVudFZhbC5jb25jYXQoY2hpbGRWYWwpXG4gICAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRWYWwpXG4gICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgOiBbY2hpbGRWYWxdXG4gICAgOiBwYXJlbnRWYWw7XG4gIHJldHVybiByZXNcbiAgICA/IGRlZHVwZUhvb2tzKHJlcylcbiAgICA6IHJlc1xufVxuXG5mdW5jdGlvbiBkZWR1cGVIb29rcyAoaG9va3MpIHtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChmdW5jdGlvbiAoaG9vaykge1xuICBzdHJhdHNbaG9va10gPSBtZXJnZUhvb2s7XG59KTtcblxuLyoqXG4gKiBBc3NldHNcbiAqXG4gKiBXaGVuIGEgdm0gaXMgcHJlc2VudCAoaW5zdGFuY2UgY3JlYXRpb24pLCB3ZSBuZWVkIHRvIGRvXG4gKiBhIHRocmVlLXdheSBtZXJnZSBiZXR3ZWVuIGNvbnN0cnVjdG9yIG9wdGlvbnMsIGluc3RhbmNlXG4gKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VBc3NldHMgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgdmFyIHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgIHJldHVybiBleHRlbmQocmVzLCBjaGlsZFZhbClcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzXG4gIH1cbn1cblxuQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICBzdHJhdHNbdHlwZSArICdzJ10gPSBtZXJnZUFzc2V0cztcbn0pO1xuXG4vKipcbiAqIFdhdGNoZXJzLlxuICpcbiAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAqIGFub3RoZXIsIHNvIHdlIG1lcmdlIHRoZW0gYXMgYXJyYXlzLlxuICovXG5zdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtLFxuICBrZXlcbikge1xuICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICBpZiAocGFyZW50VmFsID09PSBuYXRpdmVXYXRjaCkgeyBwYXJlbnRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgeyBjaGlsZFZhbCA9IHVuZGVmaW5lZDsgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjaGlsZFZhbCkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbCkgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gIHZhciByZXQgPSB7fTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICB2YXIgcGFyZW50ID0gcmV0W2tleSQxXTtcbiAgICB2YXIgY2hpbGQgPSBjaGlsZFZhbFtrZXkkMV07XG4gICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICBwYXJlbnQgPSBbcGFyZW50XTtcbiAgICB9XG4gICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gIH1cbiAgaWYgKCFwYXJlbnRWYWwpIHsgcmV0dXJuIGNoaWxkVmFsIH1cbiAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGlmIChjaGlsZFZhbCkgeyBleHRlbmQocmV0LCBjaGlsZFZhbCk7IH1cbiAgcmV0dXJuIHJldFxufTtcbnN0cmF0cy5wcm92aWRlID0gbWVyZ2VEYXRhT3JGbjtcblxuLyoqXG4gKiBEZWZhdWx0IHN0cmF0ZWd5LlxuICovXG52YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGtleSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDb21wb25lbnROYW1lIChuYW1lKSB7XG4gIGlmICghbmV3IFJlZ0V4cCgoXCJeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV9cIiArICh1bmljb2RlUmVnRXhwLnNvdXJjZSkgKyBcIl0qJFwiKSkudGVzdChuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBjb21wb25lbnQgbmFtZTogXCInICsgbmFtZSArICdcIi4gQ29tcG9uZW50IG5hbWVzICcgK1xuICAgICAgJ3Nob3VsZCBjb25mb3JtIHRvIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUgaW4gaHRtbDUgc3BlY2lmaWNhdGlvbi4nXG4gICAgKTtcbiAgfVxuICBpZiAoaXNCdWlsdEluVGFnKG5hbWUpIHx8IGNvbmZpZy5pc1Jlc2VydmVkVGFnKG5hbWUpKSB7XG4gICAgd2FybihcbiAgICAgICdEbyBub3QgdXNlIGJ1aWx0LWluIG9yIHJlc2VydmVkIEhUTUwgZWxlbWVudHMgYXMgY29tcG9uZW50ICcgK1xuICAgICAgJ2lkOiAnICsgbmFtZVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBFbnN1cmUgYWxsIHByb3BzIG9wdGlvbiBzeW50YXggYXJlIG5vcm1hbGl6ZWQgaW50byB0aGVcbiAqIE9iamVjdC1iYXNlZCBmb3JtYXQuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BzIChvcHRpb25zLCB2bSkge1xuICB2YXIgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGksIHZhbCwgbmFtZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuYW1lID0gY2FtZWxpemUodmFsKTtcbiAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFsID0gcHJvcHNba2V5XTtcbiAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgcmVzW25hbWVdID0gaXNQbGFpbk9iamVjdCh2YWwpXG4gICAgICAgID8gdmFsXG4gICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwicHJvcHNcXFwiOiBleHBlY3RlZCBhbiBBcnJheSBvciBhbiBPYmplY3QsIFwiICtcbiAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIG9wdGlvbnMucHJvcHMgPSByZXM7XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGFsbCBpbmplY3Rpb25zIGludG8gT2JqZWN0LWJhc2VkIGZvcm1hdFxuICovXG5mdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gIHZhciBpbmplY3QgPSBvcHRpb25zLmluamVjdDtcbiAgaWYgKCFpbmplY3QpIHsgcmV0dXJuIH1cbiAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICBpZiAoQXJyYXkuaXNBcnJheShpbmplY3QpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoaW5qZWN0KSkge1xuICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgIHZhciB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIHdhcm4oXG4gICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICBcImJ1dCBnb3QgXCIgKyAodG9SYXdUeXBlKGluamVjdCkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIHZhciBkaXJzID0gb3B0aW9ucy5kaXJlY3RpdmVzO1xuICBpZiAoZGlycykge1xuICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICB2YXIgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIFwiSW52YWxpZCB2YWx1ZSBmb3Igb3B0aW9uIFxcXCJcIiArIG5hbWUgKyBcIlxcXCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgXCIgK1xuICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2hlY2tDb21wb25lbnRzKGNoaWxkKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGlsZCA9IGNoaWxkLm9wdGlvbnM7XG4gIH1cblxuICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICBub3JtYWxpemVJbmplY3QoY2hpbGQsIHZtKTtcbiAgbm9ybWFsaXplRGlyZWN0aXZlcyhjaGlsZCk7XG5cbiAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAvLyBidXQgb25seSBpZiBpdCBpcyBhIHJhdyBvcHRpb25zIG9iamVjdCB0aGF0IGlzbid0XG4gIC8vIHRoZSByZXN1bHQgb2YgYW5vdGhlciBtZXJnZU9wdGlvbnMgY2FsbC5cbiAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICBpZiAoIWNoaWxkLl9iYXNlKSB7XG4gICAgaWYgKGNoaWxkLmV4dGVuZHMpIHtcbiAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICB9XG4gICAgaWYgKGNoaWxkLm1peGlucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLm1peGluc1tpXSwgdm0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBvcHRpb25zID0ge307XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIHBhcmVudCkge1xuICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgfVxuICBmb3IgKGtleSBpbiBjaGlsZCkge1xuICAgIGlmICghaGFzT3duKHBhcmVudCwga2V5KSkge1xuICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICB2YXIgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgLy8gY2hlY2sgbG9jYWwgcmVnaXN0cmF0aW9uIHZhcmlhdGlvbnMgZmlyc3RcbiAgaWYgKGhhc093bihhc3NldHMsIGlkKSkgeyByZXR1cm4gYXNzZXRzW2lkXSB9XG4gIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgeyByZXR1cm4gYXNzZXRzW2NhbWVsaXplZElkXSB9XG4gIHZhciBQYXNjYWxDYXNlSWQgPSBjYXBpdGFsaXplKGNhbWVsaXplZElkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIHZhciByZXMgPSBhc3NldHNbaWRdIHx8IGFzc2V0c1tjYW1lbGl6ZWRJZF0gfHwgYXNzZXRzW1Bhc2NhbENhc2VJZF07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgdmFyIHByb3AgPSBwcm9wT3B0aW9uc1trZXldO1xuICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gIHZhciB2YWx1ZSA9IHByb3BzRGF0YVtrZXldO1xuICAvLyBib29sZWFuIGNhc3RpbmdcbiAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICB2YXIgc3RyaW5nSW5kZXggPSBnZXRUeXBlSW5kZXgoU3RyaW5nLCBwcm9wLnR5cGUpO1xuICAgICAgaWYgKHN0cmluZ0luZGV4IDwgMCB8fCBib29sZWFuSW5kZXggPCBzdHJpbmdJbmRleCkge1xuICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGNoZWNrIGRlZmF1bHQgdmFsdWVcbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgLy8gc2luY2UgdGhlIGRlZmF1bHQgdmFsdWUgaXMgYSBmcmVzaCBjb3B5LFxuICAgIC8vIG1ha2Ugc3VyZSB0byBvYnNlcnZlIGl0LlxuICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIG9ic2VydmUodmFsdWUpO1xuICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gIH1cbiAgaWYgKFxuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAvLyBza2lwIHZhbGlkYXRpb24gZm9yIHdlZXggcmVjeWNsZS1saXN0IGNoaWxkIGNvbXBvbmVudCBwcm9wc1xuICAgICEoZmFsc2UpXG4gICkge1xuICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogR2V0IHRoZSBkZWZhdWx0IHZhbHVlIG9mIGEgcHJvcC5cbiAqL1xuZnVuY3Rpb24gZ2V0UHJvcERlZmF1bHRWYWx1ZSAodm0sIHByb3AsIGtleSkge1xuICAvLyBubyBkZWZhdWx0LCByZXR1cm4gdW5kZWZpbmVkXG4gIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICByZXR1cm4gdW5kZWZpbmVkXG4gIH1cbiAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBpc09iamVjdChkZWYpKSB7XG4gICAgd2FybihcbiAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICdQcm9wcyB3aXRoIHR5cGUgT2JqZWN0L0FycmF5IG11c3QgdXNlIGEgZmFjdG9yeSBmdW5jdGlvbiAnICtcbiAgICAgICd0byByZXR1cm4gdGhlIGRlZmF1bHQgdmFsdWUuJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAvLyByZXR1cm4gcHJldmlvdXMgZGVmYXVsdCB2YWx1ZSB0byBhdm9pZCB1bm5lY2Vzc2FyeSB3YXRjaGVyIHRyaWdnZXJcbiAgaWYgKHZtICYmIHZtLiRvcHRpb25zLnByb3BzRGF0YSAmJlxuICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICB2bS5fcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICB9XG4gIC8vIGNhbGwgZmFjdG9yeSBmdW5jdGlvbiBmb3Igbm9uLUZ1bmN0aW9uIHR5cGVzXG4gIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgcmV0dXJuIHR5cGVvZiBkZWYgPT09ICdmdW5jdGlvbicgJiYgZ2V0VHlwZShwcm9wLnR5cGUpICE9PSAnRnVuY3Rpb24nXG4gICAgPyBkZWYuY2FsbCh2bSlcbiAgICA6IGRlZlxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gYXNzZXJ0UHJvcCAoXG4gIHByb3AsXG4gIG5hbWUsXG4gIHZhbHVlLFxuICB2bSxcbiAgYWJzZW50XG4pIHtcbiAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgd2FybihcbiAgICAgICdNaXNzaW5nIHJlcXVpcmVkIHByb3A6IFwiJyArIG5hbWUgKyAnXCInLFxuICAgICAgdm1cbiAgICApO1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsICYmICFwcm9wLnJlcXVpcmVkKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHR5cGUgPSBwcm9wLnR5cGU7XG4gIHZhciB2YWxpZCA9ICF0eXBlIHx8IHR5cGUgPT09IHRydWU7XG4gIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSk7XG4gICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICB2YWxpZCA9IGFzc2VydGVkVHlwZS52YWxpZDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXZhbGlkKSB7XG4gICAgd2FybihcbiAgICAgIGdldEludmFsaWRUeXBlTWVzc2FnZShuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcyksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICBpZiAodmFsaWRhdG9yKSB7XG4gICAgaWYgKCF2YWxpZGF0b3IodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnSW52YWxpZCBwcm9wOiBjdXN0b20gdmFsaWRhdG9yIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcIicgKyBuYW1lICsgJ1wiLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIHZhciB2YWxpZDtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGdldFR5cGUodHlwZSk7XG4gIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgIHZhciB0ID0gdHlwZW9mIHZhbHVlO1xuICAgIHZhbGlkID0gdCA9PT0gZXhwZWN0ZWRUeXBlLnRvTG93ZXJDYXNlKCk7XG4gICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICBpZiAoIXZhbGlkICYmIHQgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnT2JqZWN0Jykge1xuICAgIHZhbGlkID0gaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgdmFsaWQgPSBBcnJheS5pc0FycmF5KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHZhbGlkOiB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGU6IGV4cGVjdGVkVHlwZVxuICB9XG59XG5cbi8qKlxuICogVXNlIGZ1bmN0aW9uIHN0cmluZyBuYW1lIHRvIGNoZWNrIGJ1aWx0LWluIHR5cGVzLFxuICogYmVjYXVzZSBhIHNpbXBsZSBlcXVhbGl0eSBjaGVjayB3aWxsIGZhaWwgd2hlbiBydW5uaW5nXG4gKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGdldFR5cGUgKGZuKSB7XG4gIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICBcIiBFeHBlY3RlZCBcIiArIChleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpKTtcbiAgdmFyIGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICB2YXIgZXhwZWN0ZWRWYWx1ZSA9IHN0eWxlVmFsdWUodmFsdWUsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBcIiB3aXRoIHZhbHVlIFwiICsgZXhwZWN0ZWRWYWx1ZTtcbiAgfVxuICBtZXNzYWdlICs9IFwiLCBnb3QgXCIgKyByZWNlaXZlZFR5cGUgKyBcIiBcIjtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IHJlY2VpdmVkIHZhbHVlXG4gIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgIG1lc3NhZ2UgKz0gXCJ3aXRoIHZhbHVlIFwiICsgcmVjZWl2ZWRWYWx1ZSArIFwiLlwiO1xuICB9XG4gIHJldHVybiBtZXNzYWdlXG59XG5cbmZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gIGlmICh0eXBlID09PSAnU3RyaW5nJykge1xuICAgIHJldHVybiAoXCJcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgcmV0dXJuIChcIlwiICsgKE51bWJlcih2YWx1ZSkpKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgdmFyIGV4cGxpY2l0VHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbiddO1xuICByZXR1cm4gZXhwbGljaXRUeXBlcy5zb21lKGZ1bmN0aW9uIChlbGVtKSB7IHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtOyB9KVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICB2YXIgYXJncyA9IFtdLCBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICB3aGlsZSAoIGxlbi0tICkgYXJnc1sgbGVuIF0gPSBhcmd1bWVudHNbIGxlbiBdO1xuXG4gIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgLy8gRGVhY3RpdmF0ZSBkZXBzIHRyYWNraW5nIHdoaWxlIHByb2Nlc3NpbmcgZXJyb3IgaGFuZGxlciB0byBhdm9pZCBwb3NzaWJsZSBpbmZpbml0ZSByZW5kZXJpbmcuXG4gIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZXgvaXNzdWVzLzE1MDVcbiAgcHVzaFRhcmdldCgpO1xuICB0cnkge1xuICAgIGlmICh2bSkge1xuICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgd2hpbGUgKChjdXIgPSBjdXIuJHBhcmVudCkpIHtcbiAgICAgICAgdmFyIGhvb2tzID0gY3VyLiRvcHRpb25zLmVycm9yQ2FwdHVyZWQ7XG4gICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgaWYgKGNhcHR1cmUpIHsgcmV0dXJuIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICB9IGZpbmFsbHkge1xuICAgIHBvcFRhcmdldCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZVdpdGhFcnJvckhhbmRsaW5nIChcbiAgaGFuZGxlcixcbiAgY29udGV4dCxcbiAgYXJncyxcbiAgdm0sXG4gIGluZm9cbikge1xuICB2YXIgcmVzO1xuICB0cnkge1xuICAgIHJlcyA9IGFyZ3MgPyBoYW5kbGVyLmFwcGx5KGNvbnRleHQsIGFyZ3MpIDogaGFuZGxlci5jYWxsKGNvbnRleHQpO1xuICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgcmVzLmNhdGNoKGZ1bmN0aW9uIChlKSB7IHJldHVybiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIFwiIChQcm9taXNlL2FzeW5jKVwiKTsgfSk7XG4gICAgICAvLyBpc3N1ZSAjOTUxMVxuICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgcmVzLl9oYW5kbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyk7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBnbG9iYWxIYW5kbGVFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gY29uZmlnLmVycm9ySGFuZGxlci5jYWxsKG51bGwsIGVyciwgdm0sIGluZm8pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gaWYgdGhlIHVzZXIgaW50ZW50aW9uYWxseSB0aHJvd3MgdGhlIG9yaWdpbmFsIGVycm9yIGluIHRoZSBoYW5kbGVyLFxuICAgICAgLy8gZG8gbm90IGxvZyBpdCB0d2ljZVxuICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICBsb2dFcnJvcihlLCBudWxsLCAnY29uZmlnLmVycm9ySGFuZGxlcicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBsb2dFcnJvcihlcnIsIHZtLCBpbmZvKTtcbn1cblxuZnVuY3Rpb24gbG9nRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB3YXJuKChcIkVycm9yIGluIFwiICsgaW5mbyArIFwiOiBcXFwiXCIgKyAoZXJyLnRvU3RyaW5nKCkpICsgXCJcXFwiXCIpLCB2bSk7XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKChpbkJyb3dzZXIgfHwgaW5XZWV4KSAmJiB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgZXJyXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBpc1VzaW5nTWljcm9UYXNrID0gZmFsc2U7XG5cbnZhciBjYWxsYmFja3MgPSBbXTtcbnZhciBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICB2YXIgY29waWVzID0gY2FsbGJhY2tzLnNsaWNlKDApO1xuICBjYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb3BpZXNbaV0oKTtcbiAgfVxufVxuXG4vLyBIZXJlIHdlIGhhdmUgYXN5bmMgZGVmZXJyaW5nIHdyYXBwZXJzIHVzaW5nIG1pY3JvdGFza3MuXG4vLyBJbiAyLjUgd2UgdXNlZCAobWFjcm8pIHRhc2tzIChpbiBjb21iaW5hdGlvbiB3aXRoIG1pY3JvdGFza3MpLlxuLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbi8vIChlLmcuICM2ODEzLCBvdXQtaW4gdHJhbnNpdGlvbnMpLlxuLy8gQWxzbywgdXNpbmcgKG1hY3JvKSB0YXNrcyBpbiBldmVudCBoYW5kbGVyIHdvdWxkIGNhdXNlIHNvbWUgd2VpcmQgYmVoYXZpb3JzXG4vLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbi8vIFNvIHdlIG5vdyB1c2UgbWljcm90YXNrcyBldmVyeXdoZXJlLCBhZ2Fpbi5cbi8vIEEgbWFqb3IgZHJhd2JhY2sgb2YgdGhpcyB0cmFkZW9mZiBpcyB0aGF0IHRoZXJlIGFyZSBzb21lIHNjZW5hcmlvc1xuLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4vLyBzZXF1ZW50aWFsIGV2ZW50cyAoZS5nLiAjNDUyMSwgIzY2OTAsIHdoaWNoIGhhdmUgd29ya2Fyb3VuZHMpXG4vLyBvciBldmVuIGJldHdlZW4gYnViYmxpbmcgb2YgdGhlIHNhbWUgZXZlbnQgKCM2NTY2KS5cbnZhciB0aW1lckZ1bmM7XG5cbi8vIFRoZSBuZXh0VGljayBiZWhhdmlvciBsZXZlcmFnZXMgdGhlIG1pY3JvdGFzayBxdWV1ZSwgd2hpY2ggY2FuIGJlIGFjY2Vzc2VkXG4vLyB2aWEgZWl0aGVyIG5hdGl2ZSBQcm9taXNlLnRoZW4gb3IgTXV0YXRpb25PYnNlcnZlci5cbi8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuLy8gVUlXZWJWaWV3IGluIGlPUyA+PSA5LjMuMyB3aGVuIHRyaWdnZXJlZCBpbiB0b3VjaCBldmVudCBoYW5kbGVycy4gSXRcbi8vIGNvbXBsZXRlbHkgc3RvcHMgd29ya2luZyBhZnRlciB0cmlnZ2VyaW5nIGEgZmV3IHRpbWVzLi4uIHNvLCBpZiBuYXRpdmVcbi8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0LCAkZmxvdy1kaXNhYmxlLWxpbmUgKi9cbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJvbWlzZSkpIHtcbiAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgdGltZXJGdW5jID0gZnVuY3Rpb24gKCkge1xuICAgIHAudGhlbihmbHVzaENhbGxiYWNrcyk7XG4gICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgLy8gaXQgY2FuIGdldCBzdHVjayBpbiBhIHdlaXJkIHN0YXRlIHdoZXJlIGNhbGxiYWNrcyBhcmUgcHVzaGVkIGludG8gdGhlXG4gICAgLy8gbWljcm90YXNrIHF1ZXVlIGJ1dCB0aGUgcXVldWUgaXNuJ3QgYmVpbmcgZmx1c2hlZCwgdW50aWwgdGhlIGJyb3dzZXJcbiAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAvLyBcImZvcmNlXCIgdGhlIG1pY3JvdGFzayBxdWV1ZSB0byBiZSBmbHVzaGVkIGJ5IGFkZGluZyBhbiBlbXB0eSB0aW1lci5cbiAgICBpZiAoaXNJT1MpIHsgc2V0VGltZW91dChub29wKTsgfVxuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgdmFyIGNvdW50ZXIgPSAxO1xuICB2YXIgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaENhbGxiYWNrcyk7XG4gIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gIG9ic2VydmVyLm9ic2VydmUodGV4dE5vZGUsIHtcbiAgICBjaGFyYWN0ZXJEYXRhOiB0cnVlXG4gIH0pO1xuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY291bnRlciA9IChjb3VudGVyICsgMSkgJSAyO1xuICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gIH07XG4gIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldEltbWVkaWF0ZS5cbiAgLy8gVGVjaG5pY2FsbHkgaXQgbGV2ZXJhZ2VzIHRoZSAobWFjcm8pIHRhc2sgcXVldWUsXG4gIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgc2V0SW1tZWRpYXRlKGZsdXNoQ2FsbGJhY2tzKTtcbiAgfTtcbn0gZWxzZSB7XG4gIC8vIEZhbGxiYWNrIHRvIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICBzZXRUaW1lb3V0KGZsdXNoQ2FsbGJhY2tzLCAwKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gbmV4dFRpY2sgKGNiLCBjdHgpIHtcbiAgdmFyIF9yZXNvbHZlO1xuICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGNiKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIGN0eCwgJ25leHRUaWNrJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChfcmVzb2x2ZSkge1xuICAgICAgX3Jlc29sdmUoY3R4KTtcbiAgICB9XG4gIH0pO1xuICBpZiAoIXBlbmRpbmcpIHtcbiAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICB0aW1lckZ1bmMoKTtcbiAgfVxuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKCFjYiAmJiB0eXBlb2YgUHJvbWlzZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG4vKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGggUHJveHkgKi9cblxudmFyIGluaXRQcm94eTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIGFsbG93ZWRHbG9iYWxzID0gbWFrZU1hcChcbiAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAncGFyc2VGbG9hdCxwYXJzZUludCxkZWNvZGVVUkksZGVjb2RlVVJJQ29tcG9uZW50LGVuY29kZVVSSSxlbmNvZGVVUklDb21wb25lbnQsJyArXG4gICAgJ01hdGgsTnVtYmVyLERhdGUsQXJyYXksT2JqZWN0LEJvb2xlYW4sU3RyaW5nLFJlZ0V4cCxNYXAsU2V0LEpTT04sSW50bCwnICtcbiAgICAncmVxdWlyZScgLy8gZm9yIFdlYnBhY2svQnJvd3NlcmlmeVxuICApO1xuXG4gIHZhciB3YXJuTm9uUHJlc2VudCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIHdhcm5SZXNlcnZlZFByZWZpeCA9IGZ1bmN0aW9uICh0YXJnZXQsIGtleSkge1xuICAgIHdhcm4oXG4gICAgICBcIlByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBtdXN0IGJlIGFjY2Vzc2VkIHdpdGggXFxcIiRkYXRhLlwiICsga2V5ICsgXCJcXFwiIGJlY2F1c2UgXCIgK1xuICAgICAgJ3Byb3BlcnRpZXMgc3RhcnRpbmcgd2l0aCBcIiRcIiBvciBcIl9cIiBhcmUgbm90IHByb3hpZWQgaW4gdGhlIFZ1ZSBpbnN0YW5jZSB0byAnICtcbiAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgdmFyIGhhc1Byb3h5ID1cbiAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICBpZiAoaGFzUHJveHkpIHtcbiAgICB2YXIgaXNCdWlsdEluTW9kaWZpZXIgPSBtYWtlTWFwKCdzdG9wLHByZXZlbnQsc2VsZixjdHJsLHNoaWZ0LGFsdCxtZXRhLGV4YWN0Jyk7XG4gICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCdWlsdEluTW9kaWZpZXIoa2V5KSkge1xuICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHZhciBoYXNIYW5kbGVyID0ge1xuICAgIGhhczogZnVuY3Rpb24gaGFzICh0YXJnZXQsIGtleSkge1xuICAgICAgdmFyIGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5LmNoYXJBdCgwKSA9PT0gJ18nICYmICEoa2V5IGluIHRhcmdldC4kZGF0YSkpO1xuICAgICAgaWYgKCFoYXMgJiYgIWlzQWxsb3dlZCkge1xuICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIGVsc2UgeyB3YXJuTm9uUHJlc2VudCh0YXJnZXQsIGtleSk7IH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgfVxuICB9O1xuXG4gIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICBpZiAoaGFzUHJveHkpIHtcbiAgICAgIC8vIGRldGVybWluZSB3aGljaCBwcm94eSBoYW5kbGVyIHRvIHVzZVxuICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIHZhciBoYW5kbGVycyA9IG9wdGlvbnMucmVuZGVyICYmIG9wdGlvbnMucmVuZGVyLl93aXRoU3RyaXBwZWRcbiAgICAgICAgPyBnZXRIYW5kbGVyXG4gICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IG5ldyBQcm94eSh2bSwgaGFuZGxlcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICB9XG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgc2Vlbk9iamVjdHMgPSBuZXcgX1NldCgpO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFuIG9iamVjdCB0byBldm9rZSBhbGwgY29udmVydGVkXG4gKiBnZXR0ZXJzLCBzbyB0aGF0IGV2ZXJ5IG5lc3RlZCBwcm9wZXJ0eSBpbnNpZGUgdGhlIG9iamVjdFxuICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAqL1xuZnVuY3Rpb24gdHJhdmVyc2UgKHZhbCkge1xuICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gIHNlZW5PYmplY3RzLmNsZWFyKCk7XG59XG5cbmZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gIHZhciBpLCBrZXlzO1xuICB2YXIgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICB2YXIgZGVwSWQgPSB2YWwuX19vYl9fLmRlcC5pZDtcbiAgICBpZiAoc2Vlbi5oYXMoZGVwSWQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgc2Vlbi5hZGQoZGVwSWQpO1xuICB9XG4gIGlmIChpc0EpIHtcbiAgICBpID0gdmFsLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gIH0gZWxzZSB7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHsgX3RyYXZlcnNlKHZhbFtrZXlzW2ldXSwgc2Vlbik7IH1cbiAgfVxufVxuXG52YXIgbWFyaztcbnZhciBtZWFzdXJlO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoXG4gICAgcGVyZiAmJlxuICAgIHBlcmYubWFyayAmJlxuICAgIHBlcmYubWVhc3VyZSAmJlxuICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgIHBlcmYuY2xlYXJNZWFzdXJlc1xuICApIHtcbiAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgbWVhc3VyZSA9IGZ1bmN0aW9uIChuYW1lLCBzdGFydFRhZywgZW5kVGFnKSB7XG4gICAgICBwZXJmLm1lYXN1cmUobmFtZSwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgcGVyZi5jbGVhck1hcmtzKGVuZFRhZyk7XG4gICAgICAvLyBwZXJmLmNsZWFyTWVhc3VyZXMobmFtZSlcbiAgICB9O1xuICB9XG59XG5cbi8qICAqL1xuXG52YXIgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoZnVuY3Rpb24gKG5hbWUpIHtcbiAgdmFyIHBhc3NpdmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyYnO1xuICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICB2YXIgb25jZSQkMSA9IG5hbWUuY2hhckF0KDApID09PSAnfic7IC8vIFByZWZpeGVkIGxhc3QsIGNoZWNrZWQgZmlyc3RcbiAgbmFtZSA9IG9uY2UkJDEgPyBuYW1lLnNsaWNlKDEpIDogbmFtZTtcbiAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWU6IG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlOiBjYXB0dXJlLFxuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICB2YXIgYXJndW1lbnRzJDEgPSBhcmd1bWVudHM7XG5cbiAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZm5zKSkge1xuICAgICAgdmFyIGNsb25lZCA9IGZucy5zbGljZSgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2xvbmVkW2ldLCBudWxsLCBhcmd1bWVudHMkMSwgdm0sIFwidi1vbiBoYW5kbGVyXCIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIilcbiAgICB9XG4gIH1cbiAgaW52b2tlci5mbnMgPSBmbnM7XG4gIHJldHVybiBpbnZva2VyXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUxpc3RlbmVycyAoXG4gIG9uLFxuICBvbGRPbixcbiAgYWRkLFxuICByZW1vdmUkJDEsXG4gIGNyZWF0ZU9uY2VIYW5kbGVyLFxuICB2bVxuKSB7XG4gIHZhciBuYW1lLCBkZWYkJDEsIGN1ciwgb2xkLCBldmVudDtcbiAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgb2xkID0gb2xkT25bbmFtZV07XG4gICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAgIFwiSW52YWxpZCBoYW5kbGVyIGZvciBldmVudCBcXFwiXCIgKyAoZXZlbnQubmFtZSkgKyBcIlxcXCI6IGdvdCBcIiArIFN0cmluZyhjdXIpLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkKSkge1xuICAgICAgaWYgKGlzVW5kZWYoY3VyLmZucykpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNUcnVlKGV2ZW50Lm9uY2UpKSB7XG4gICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICAgIGFkZChldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUsIGV2ZW50LnBhc3NpdmUsIGV2ZW50LnBhcmFtcyk7XG4gICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgb2xkLmZucyA9IGN1cjtcbiAgICAgIG9uW25hbWVdID0gb2xkO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICByZW1vdmUkJDEoZXZlbnQubmFtZSwgb2xkT25bbmFtZV0sIGV2ZW50LmNhcHR1cmUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gbWVyZ2VWTm9kZUhvb2sgKGRlZiwgaG9va0tleSwgaG9vaykge1xuICBpZiAoZGVmIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICB9XG4gIHZhciBpbnZva2VyO1xuICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICBmdW5jdGlvbiB3cmFwcGVkSG9vayAoKSB7XG4gICAgaG9vay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAvLyBhbmQgcHJldmVudCBtZW1vcnkgbGVha1xuICAgIHJlbW92ZShpbnZva2VyLmZucywgd3JhcHBlZEhvb2spO1xuICB9XG5cbiAgaWYgKGlzVW5kZWYob2xkSG9vaykpIHtcbiAgICAvLyBubyBleGlzdGluZyBob29rXG4gICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgfSBlbHNlIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgIC8vIGFscmVhZHkgYSBtZXJnZWQgaW52b2tlclxuICAgICAgaW52b2tlciA9IG9sZEhvb2s7XG4gICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgcGxhaW4gaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICB9XG4gIH1cblxuICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gIGRlZltob29rS2V5XSA9IGludm9rZXI7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIChcbiAgZGF0YSxcbiAgQ3RvcixcbiAgdGFnXG4pIHtcbiAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gIC8vIHZhbGlkYXRpb24gYW5kIGRlZmF1bHQgdmFsdWVzIGFyZSBoYW5kbGVkIGluIHRoZSBjaGlsZFxuICAvLyBjb21wb25lbnQgaXRzZWxmLlxuICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIGF0dHJzID0gZGF0YS5hdHRycztcbiAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ICE9PSBrZXlJbkxvd2VyQ2FzZSAmJlxuICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICkge1xuICAgICAgICAgIHRpcChcbiAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKSkgKyBcIiwgYnV0IHRoZSBkZWNsYXJlZCBwcm9wIG5hbWUgaXNcIiArXG4gICAgICAgICAgICBcIiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICBcInByb3BzIG5lZWQgdG8gdXNlIHRoZWlyIGtlYmFiLWNhc2UgZXF1aXZhbGVudHMgd2hlbiB1c2luZyBpbi1ET00gXCIgK1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFxcXCJcIiArIGFsdEtleSArIFwiXFxcIiBpbnN0ZWFkIG9mIFxcXCJcIiArIGtleSArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgIGNoZWNrUHJvcChyZXMsIGF0dHJzLCBrZXksIGFsdEtleSwgZmFsc2UpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gIHJlcyxcbiAgaGFzaCxcbiAga2V5LFxuICBhbHRLZXksXG4gIHByZXNlcnZlXG4pIHtcbiAgaWYgKGlzRGVmKGhhc2gpKSB7XG4gICAgaWYgKGhhc093bihoYXNoLCBrZXkpKSB7XG4gICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgZGVsZXRlIGhhc2hba2V5XTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlXG4gICAgfSBlbHNlIGlmIChoYXNPd24oaGFzaCwgYWx0S2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2FsdEtleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuLyogICovXG5cbi8vIFRoZSB0ZW1wbGF0ZSBjb21waWxlciBhdHRlbXB0cyB0byBtaW5pbWl6ZSB0aGUgbmVlZCBmb3Igbm9ybWFsaXphdGlvbiBieVxuLy8gc3RhdGljYWxseSBhbmFseXppbmcgdGhlIHRlbXBsYXRlIGF0IGNvbXBpbGUgdGltZS5cbi8vXG4vLyBGb3IgcGxhaW4gSFRNTCBtYXJrdXAsIG5vcm1hbGl6YXRpb24gY2FuIGJlIGNvbXBsZXRlbHkgc2tpcHBlZCBiZWNhdXNlIHRoZVxuLy8gZ2VuZXJhdGVkIHJlbmRlciBmdW5jdGlvbiBpcyBndWFyYW50ZWVkIHRvIHJldHVybiBBcnJheTxWTm9kZT4uIFRoZXJlIGFyZVxuLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4vLyAxLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb21wb25lbnRzIC0gYmVjYXVzZSBhIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4vLyBtYXkgcmV0dXJuIGFuIEFycmF5IGluc3RlYWQgb2YgYSBzaW5nbGUgcm9vdC4gSW4gdGhpcyBjYXNlLCBqdXN0IGEgc2ltcGxlXG4vLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbi8vIHRoaW5nIHdpdGggQXJyYXkucHJvdG90eXBlLmNvbmNhdC4gSXQgaXMgZ3VhcmFudGVlZCB0byBiZSBvbmx5IDEtbGV2ZWwgZGVlcFxuLy8gYmVjYXVzZSBmdW5jdGlvbmFsIGNvbXBvbmVudHMgYWxyZWFkeSBub3JtYWxpemUgdGhlaXIgb3duIGNoaWxkcmVuLlxuZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbltpXSkpIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNoaWxkcmVuXG59XG5cbi8vIDIuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbnN0cnVjdHMgdGhhdCBhbHdheXMgZ2VuZXJhdGVkIG5lc3RlZCBBcnJheXMsXG4vLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbi8vIHdpdGggaGFuZC13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMgLyBKU1guIEluIHN1Y2ggY2FzZXMgYSBmdWxsIG5vcm1hbGl6YXRpb25cbi8vIGlzIG5lZWRlZCB0byBjYXRlciB0byBhbGwgcG9zc2libGUgdHlwZXMgb2YgY2hpbGRyZW4gdmFsdWVzLlxuZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gIHJldHVybiBpc1ByaW1pdGl2ZShjaGlsZHJlbilcbiAgICA/IFtjcmVhdGVUZXh0Vk5vZGUoY2hpbGRyZW4pXVxuICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgID8gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgIDogdW5kZWZpbmVkXG59XG5cbmZ1bmN0aW9uIGlzVGV4dE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIGlzRGVmKG5vZGUpICYmIGlzRGVmKG5vZGUudGV4dCkgJiYgaXNGYWxzZShub2RlLmlzQ29tbWVudClcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplQXJyYXlDaGlsZHJlbiAoY2hpbGRyZW4sIG5lc3RlZEluZGV4KSB7XG4gIHZhciByZXMgPSBbXTtcbiAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgIGxhc3RJbmRleCA9IHJlcy5sZW5ndGggLSAxO1xuICAgIGxhc3QgPSByZXNbbGFzdEluZGV4XTtcbiAgICAvLyAgbmVzdGVkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoYykpIHtcbiAgICAgIGlmIChjLmxlbmd0aCA+IDApIHtcbiAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICBpZiAoaXNUZXh0Tm9kZShjWzBdKSAmJiBpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgIGMuc2hpZnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNQcmltaXRpdmUoYykpIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgLy8gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIFNTUiBoeWRyYXRpb24gYmVjYXVzZSB0ZXh0IG5vZGVzIGFyZVxuICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgYyk7XG4gICAgICB9IGVsc2UgaWYgKGMgIT09ICcnKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgIHJlcy5wdXNoKGNyZWF0ZVRleHRWTm9kZShjKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc1RleHROb2RlKGMpICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVmYXVsdCBrZXkgZm9yIG5lc3RlZCBhcnJheSBjaGlsZHJlbiAobGlrZWx5IGdlbmVyYXRlZCBieSB2LWZvcilcbiAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICBpc0RlZihjLnRhZykgJiZcbiAgICAgICAgICBpc1VuZGVmKGMua2V5KSAmJlxuICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgIGMua2V5ID0gXCJfX3ZsaXN0XCIgKyBuZXN0ZWRJbmRleCArIFwiX1wiICsgaSArIFwiX19cIjtcbiAgICAgICAgfVxuICAgICAgICByZXMucHVzaChjKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFByb3ZpZGUgKHZtKSB7XG4gIHZhciBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIHZhciByZXN1bHQgPSByZXNvbHZlSW5qZWN0KHZtLiRvcHRpb25zLmluamVjdCwgdm0pO1xuICBpZiAocmVzdWx0KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICBPYmplY3Qua2V5cyhyZXN1bHQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCBrZXksIHJlc3VsdFtrZXldLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYW4gaW5qZWN0ZWQgdmFsdWUgZGlyZWN0bHkgc2luY2UgdGhlIGNoYW5nZXMgd2lsbCBiZSBcIiArXG4gICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwcm92aWRlZCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhpbmplY3QpXG4gICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIHsgY29udGludWUgfVxuICAgICAgdmFyIHByb3ZpZGVLZXkgPSBpbmplY3Rba2V5XS5mcm9tO1xuICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgd2hpbGUgKHNvdXJjZSkge1xuICAgICAgICBpZiAoc291cmNlLl9wcm92aWRlZCAmJiBoYXNPd24oc291cmNlLl9wcm92aWRlZCwgcHJvdmlkZUtleSkpIHtcbiAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICB2YXIgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB3YXJuKChcIkluamVjdGlvbiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgbm90IGZvdW5kXCIpLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG59XG5cbi8qICAqL1xuXG5cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIHJhdyBjaGlsZHJlbiBWTm9kZXMgaW50byBhIHNsb3Qgb2JqZWN0LlxuICovXG5mdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICBjaGlsZHJlbixcbiAgY29udGV4dFxuKSB7XG4gIGlmICghY2hpbGRyZW4gfHwgIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgIHJldHVybiB7fVxuICB9XG4gIHZhciBzbG90cyA9IHt9O1xuICBmb3IgKHZhciBpID0gMCwgbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIHZhciBkYXRhID0gY2hpbGQuZGF0YTtcbiAgICAvLyByZW1vdmUgc2xvdCBhdHRyaWJ1dGUgaWYgdGhlIG5vZGUgaXMgcmVzb2x2ZWQgYXMgYSBWdWUgc2xvdCBub2RlXG4gICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgIGRlbGV0ZSBkYXRhLmF0dHJzLnNsb3Q7XG4gICAgfVxuICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgIC8vIHNhbWUgY29udGV4dC5cbiAgICBpZiAoKGNoaWxkLmNvbnRleHQgPT09IGNvbnRleHQgfHwgY2hpbGQuZm5Db250ZXh0ID09PSBjb250ZXh0KSAmJlxuICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICkge1xuICAgICAgdmFyIG5hbWUgPSBkYXRhLnNsb3Q7XG4gICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yICh2YXIgbmFtZSQxIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgZGVsZXRlIHNsb3RzW25hbWUkMV07XG4gICAgfVxuICB9XG4gIHJldHVybiBzbG90c1xufVxuXG5mdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgcmV0dXJuIChub2RlLmlzQ29tbWVudCAmJiAhbm9kZS5hc3luY0ZhY3RvcnkpIHx8IG5vZGUudGV4dCA9PT0gJyAnXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90cyAoXG4gIHNsb3RzLFxuICBub3JtYWxTbG90cyxcbiAgcHJldlNsb3RzXG4pIHtcbiAgdmFyIHJlcztcbiAgdmFyIGhhc05vcm1hbFNsb3RzID0gT2JqZWN0LmtleXMobm9ybWFsU2xvdHMpLmxlbmd0aCA+IDA7XG4gIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICB2YXIga2V5ID0gc2xvdHMgJiYgc2xvdHMuJGtleTtcbiAgaWYgKCFzbG90cykge1xuICAgIHJlcyA9IHt9O1xuICB9IGVsc2UgaWYgKHNsb3RzLl9ub3JtYWxpemVkKSB7XG4gICAgLy8gZmFzdCBwYXRoIDE6IGNoaWxkIGNvbXBvbmVudCByZS1yZW5kZXIgb25seSwgcGFyZW50IGRpZCBub3QgY2hhbmdlXG4gICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gIH0gZWxzZSBpZiAoXG4gICAgaXNTdGFibGUgJiZcbiAgICBwcmV2U2xvdHMgJiZcbiAgICBwcmV2U2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmXG4gICAga2V5ID09PSBwcmV2U2xvdHMuJGtleSAmJlxuICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICFwcmV2U2xvdHMuJGhhc05vcm1hbFxuICApIHtcbiAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgLy8gb25seSBuZWVkIHRvIG5vcm1hbGl6ZSBvbmNlXG4gICAgcmV0dXJuIHByZXZTbG90c1xuICB9IGVsc2Uge1xuICAgIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGtleSQxIGluIHNsb3RzKSB7XG4gICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleSQxXSA9IG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSQxLCBzbG90c1trZXkkMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5JDIgaW4gcmVzKSkge1xuICAgICAgcmVzW2tleSQyXSA9IHByb3h5Tm9ybWFsU2xvdChub3JtYWxTbG90cywga2V5JDIpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgaXNTdGFibGUpO1xuICBkZWYocmVzLCAnJGtleScsIGtleSk7XG4gIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgdmFyIG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgKFxuICAgICAgcmVzLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgKHJlcy5sZW5ndGggPT09IDEgJiYgcmVzWzBdLmlzQ29tbWVudCkgLy8gIzk2NThcbiAgICApID8gdW5kZWZpbmVkXG4gICAgICA6IHJlc1xuICB9O1xuICAvLyB0aGlzIGlzIGEgc2xvdCB1c2luZyB0aGUgbmV3IHYtc2xvdCBzeW50YXggd2l0aG91dCBzY29wZS4gYWx0aG91Z2ggaXQgaXNcbiAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gIC8vIG9uIHRoaXMuJHNsb3RzIGJlY2F1c2UgdGhlIHVzYWdlIGlzIHNlbWFudGljYWxseSBhIG5vcm1hbCBzbG90LlxuICBpZiAoZm4ucHJveHkpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgZ2V0OiBub3JtYWxpemVkLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG4gIHJldHVybiBub3JtYWxpemVkXG59XG5cbmZ1bmN0aW9uIHByb3h5Tm9ybWFsU2xvdChzbG90cywga2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZW5kZXJpbmcgdi1mb3IgbGlzdHMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICB2YWwsXG4gIHJlbmRlclxuKSB7XG4gIHZhciByZXQsIGksIGwsIGtleXMsIGtleTtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSB8fCB0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICBmb3IgKGkgPSAwLCBsID0gdmFsLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtpXSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbCk7XG4gICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIoaSArIDEsIGkpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgaWYgKGhhc1N5bWJvbCAmJiB2YWxbU3ltYm9sLml0ZXJhdG9yXSkge1xuICAgICAgcmV0ID0gW107XG4gICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgdmFyIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgIHdoaWxlICghcmVzdWx0LmRvbmUpIHtcbiAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgcmV0ID0gbmV3IEFycmF5KGtleXMubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgICByZXRbaV0gPSByZW5kZXIodmFsW2tleV0sIGtleSwgaSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmICghaXNEZWYocmV0KSkge1xuICAgIHJldCA9IFtdO1xuICB9XG4gIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgcmV0dXJuIHJldFxufVxuXG4vKiAgKi9cblxuLyoqXG4gKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIDxzbG90PlxuICovXG5mdW5jdGlvbiByZW5kZXJTbG90IChcbiAgbmFtZSxcbiAgZmFsbGJhY2ssXG4gIHByb3BzLFxuICBiaW5kT2JqZWN0XG4pIHtcbiAgdmFyIHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICB2YXIgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiAhaXNPYmplY3QoYmluZE9iamVjdCkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnc2xvdCB2LWJpbmQgd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCcsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfVxuICAgICAgcHJvcHMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiaW5kT2JqZWN0KSwgcHJvcHMpO1xuICAgIH1cbiAgICBub2RlcyA9IHNjb3BlZFNsb3RGbihwcm9wcykgfHwgZmFsbGJhY2s7XG4gIH0gZWxzZSB7XG4gICAgbm9kZXMgPSB0aGlzLiRzbG90c1tuYW1lXSB8fCBmYWxsYmFjaztcbiAgfVxuXG4gIHZhciB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICB2YXIgbWFwcGVkS2V5Q29kZSA9IGNvbmZpZy5rZXlDb2Rlc1trZXldIHx8IGJ1aWx0SW5LZXlDb2RlO1xuICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKGJ1aWx0SW5LZXlOYW1lLCBldmVudEtleU5hbWUpXG4gIH0gZWxzZSBpZiAobWFwcGVkS2V5Q29kZSkge1xuICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgfSBlbHNlIGlmIChldmVudEtleU5hbWUpIHtcbiAgICByZXR1cm4gaHlwaGVuYXRlKGV2ZW50S2V5TmFtZSkgIT09IGtleVxuICB9XG59XG5cbi8qICAqL1xuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBtZXJnaW5nIHYtYmluZD1cIm9iamVjdFwiIGludG8gYSBWTm9kZSdzIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gIGRhdGEsXG4gIHRhZyxcbiAgdmFsdWUsXG4gIGFzUHJvcCxcbiAgaXNTeW5jXG4pIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFyIGhhc2g7XG4gICAgICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciB0eXBlID0gZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnR5cGU7XG4gICAgICAgICAgaGFzaCA9IGFzUHJvcCB8fCBjb25maWcubXVzdFVzZVByb3AodGFnLCB0eXBlLCBrZXkpXG4gICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgIDogZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAgaWYgKCEoY2FtZWxpemVkS2V5IGluIGhhc2gpICYmICEoaHlwaGVuYXRlZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgIHZhbHVlW2tleV0gPSAkZXZlbnQ7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgdmFyIGNhY2hlZCA9IHRoaXMuX3N0YXRpY1RyZWVzIHx8ICh0aGlzLl9zdGF0aWNUcmVlcyA9IFtdKTtcbiAgdmFyIHRyZWUgPSBjYWNoZWRbaW5kZXhdO1xuICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgLy8gd2UgY2FuIHJldXNlIHRoZSBzYW1lIHRyZWUuXG4gIGlmICh0cmVlICYmICFpc0luRm9yKSB7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuICAvLyBvdGhlcndpc2UsIHJlbmRlciBhIGZyZXNoIHRyZWUuXG4gIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgdGhpcy5fcmVuZGVyUHJveHksXG4gICAgbnVsbCxcbiAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICk7XG4gIG1hcmtTdGF0aWModHJlZSwgKFwiX19zdGF0aWNfX1wiICsgaW5kZXgpLCBmYWxzZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAqIEVmZmVjdGl2ZWx5IGl0IG1lYW5zIG1hcmtpbmcgdGhlIG5vZGUgYXMgc3RhdGljIHdpdGggYSB1bmlxdWUga2V5LlxuICovXG5mdW5jdGlvbiBtYXJrT25jZSAoXG4gIHRyZWUsXG4gIGluZGV4LFxuICBrZXlcbikge1xuICBtYXJrU3RhdGljKHRyZWUsIChcIl9fb25jZV9fXCIgKyBpbmRleCArIChrZXkgPyAoXCJfXCIgKyBrZXkpIDogXCJcIikpLCB0cnVlKTtcbiAgcmV0dXJuIHRyZWVcbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpYyAoXG4gIHRyZWUsXG4gIGtleSxcbiAgaXNPbmNlXG4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodHJlZSkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyZWUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICBtYXJrU3RhdGljTm9kZSh0cmVlW2ldLCAoa2V5ICsgXCJfXCIgKyBpKSwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAndi1vbiB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gb25ba2V5XTtcbiAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgcmVzLFxuICAvLyB0aGUgZm9sbG93aW5nIGFyZSBhZGRlZCBpbiAyLjZcbiAgaGFzRHluYW1pY0tleXMsXG4gIGNvbnRlbnRIYXNoS2V5XG4pIHtcbiAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZm5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCByZXMsIGhhc0R5bmFtaWNLZXlzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbnRlbnRIYXNoS2V5KSB7XG4gICAgKHJlcykuJGtleSA9IGNvbnRlbnRIYXNoS2V5O1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGJpbmREeW5hbWljS2V5cyAoYmFzZU9iaiwgdmFsdWVzKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYga2V5KSB7XG4gICAgICBiYXNlT2JqW3ZhbHVlc1tpXV0gPSB2YWx1ZXNbaSArIDFdO1xuICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBrZXkgIT09ICcnICYmIGtleSAhPT0gbnVsbCkge1xuICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICB3YXJuKFxuICAgICAgICAoXCJJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiBcIiArIGtleSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBiYXNlT2JqXG59XG5cbi8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuLy8gZW5zdXJlIG9ubHkgYXBwZW5kIHdoZW4gdmFsdWUgaXMgYWxyZWFkeSBzdHJpbmcsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGNhc3Rcbi8vIHRvIHN0cmluZyBhbmQgY2F1c2UgdGhlIHR5cGUgY2hlY2sgdG8gbWlzcy5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IHN5bWJvbCArIHZhbHVlIDogdmFsdWVcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluc3RhbGxSZW5kZXJIZWxwZXJzICh0YXJnZXQpIHtcbiAgdGFyZ2V0Ll9vID0gbWFya09uY2U7XG4gIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICB0YXJnZXQuX3MgPSB0b1N0cmluZztcbiAgdGFyZ2V0Ll9sID0gcmVuZGVyTGlzdDtcbiAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgdGFyZ2V0Ll9xID0gbG9vc2VFcXVhbDtcbiAgdGFyZ2V0Ll9pID0gbG9vc2VJbmRleE9mO1xuICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gIHRhcmdldC5fZiA9IHJlc29sdmVGaWx0ZXI7XG4gIHRhcmdldC5fayA9IGNoZWNrS2V5Q29kZXM7XG4gIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgdGFyZ2V0Ll92ID0gY3JlYXRlVGV4dFZOb2RlO1xuICB0YXJnZXQuX2UgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gIHRhcmdldC5fZyA9IGJpbmRPYmplY3RMaXN0ZW5lcnM7XG4gIHRhcmdldC5fZCA9IGJpbmREeW5hbWljS2V5cztcbiAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICBkYXRhLFxuICBwcm9wcyxcbiAgY2hpbGRyZW4sXG4gIHBhcmVudCxcbiAgQ3RvclxuKSB7XG4gIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgdmFyIGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICB2YXIgbmVlZE5vcm1hbGl6YXRpb24gPSAhaXNDb21waWxlZDtcblxuICB0aGlzLmRhdGEgPSBkYXRhO1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgdGhpcy5pbmplY3Rpb25zID0gcmVzb2x2ZUluamVjdChvcHRpb25zLmluamVjdCwgcGFyZW50KTtcbiAgdGhpcy5zbG90cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBkYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NvcGVkU2xvdHMnLCAoe1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgcmV0dXJuIG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuc2xvdHMoKSlcbiAgICB9XG4gIH0pKTtcblxuICAvLyBzdXBwb3J0IGZvciBjb21waWxlZCBmdW5jdGlvbmFsIHRlbXBsYXRlXG4gIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgLy8gZXhwb3NpbmcgJG9wdGlvbnMgZm9yIHJlbmRlclN0YXRpYygpXG4gICAgdGhpcy4kb3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgIHRoaXMuJHNsb3RzID0gdGhpcy5zbG90cygpO1xuICAgIHRoaXMuJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy4kc2xvdHMpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuX3Njb3BlSWQpIHtcbiAgICB0aGlzLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICBpZiAodm5vZGUgJiYgIUFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHZub2RlLmZuU2NvcGVJZCA9IG9wdGlvbnMuX3Njb3BlSWQ7XG4gICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pOyB9O1xuICB9XG59XG5cbmluc3RhbGxSZW5kZXJIZWxwZXJzKEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0LnByb3RvdHlwZSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICBDdG9yLFxuICBwcm9wc0RhdGEsXG4gIGRhdGEsXG4gIGNvbnRleHRWbSxcbiAgY2hpbGRyZW5cbikge1xuICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHByb3BzID0ge307XG4gIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gIGlmIChpc0RlZihwcm9wT3B0aW9ucykpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgaWYgKGlzRGVmKGRhdGEucHJvcHMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpOyB9XG4gIH1cblxuICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgdmFyIHZub2RlID0gb3B0aW9ucy5yZW5kZXIuY2FsbChudWxsLCByZW5kZXJDb250ZXh0Ll9jLCByZW5kZXJDb250ZXh0KTtcblxuICBpZiAodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHZhciB2bm9kZXMgPSBub3JtYWxpemVDaGlsZHJlbih2bm9kZSkgfHwgW107XG4gICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICB2YXIgY2xvbmUgPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICBjbG9uZS5mbk9wdGlvbnMgPSBvcHRpb25zO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIChjbG9uZS5kZXZ0b29sc01ldGEgPSBjbG9uZS5kZXZ0b29sc01ldGEgfHwge30pLnJlbmRlckNvbnRleHQgPSByZW5kZXJDb250ZXh0O1xuICB9XG4gIGlmIChkYXRhLnNsb3QpIHtcbiAgICAoY2xvbmUuZGF0YSB8fCAoY2xvbmUuZGF0YSA9IHt9KSkuc2xvdCA9IGRhdGEuc2xvdDtcbiAgfVxuICByZXR1cm4gY2xvbmVcbn1cblxuZnVuY3Rpb24gbWVyZ2VQcm9wcyAodG8sIGZyb20pIHtcbiAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbnZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICBpbml0OiBmdW5jdGlvbiBpbml0ICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgaWYgKFxuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICF2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQgJiZcbiAgICAgIHZub2RlLmRhdGEua2VlcEFsaXZlXG4gICAgKSB7XG4gICAgICAvLyBrZXB0LWFsaXZlIGNvbXBvbmVudHMsIHRyZWF0IGFzIGEgcGF0Y2hcbiAgICAgIHZhciBtb3VudGVkTm9kZSA9IHZub2RlOyAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgdmFyIGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQ6IGZ1bmN0aW9uIGluc2VydCAodm5vZGUpIHtcbiAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxudmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnQgKFxuICBDdG9yLFxuICBkYXRhLFxuICBjb250ZXh0LFxuICBjaGlsZHJlbixcbiAgdGFnXG4pIHtcbiAgaWYgKGlzVW5kZWYoQ3RvcikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBiYXNlQ3RvciA9IGNvbnRleHQuJG9wdGlvbnMuX2Jhc2U7XG5cbiAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gIGlmIChpc09iamVjdChDdG9yKSkge1xuICAgIEN0b3IgPSBiYXNlQ3Rvci5leHRlbmQoQ3Rvcik7XG4gIH1cblxuICAvLyBpZiBhdCB0aGlzIHN0YWdlIGl0J3Mgbm90IGEgY29uc3RydWN0b3Igb3IgYW4gYXN5bmMgY29tcG9uZW50IGZhY3RvcnksXG4gIC8vIHJlamVjdC5cbiAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICB2YXIgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIHZhciBwcm9wc0RhdGEgPSBleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhKGRhdGEsIEN0b3IsIHRhZyk7XG5cbiAgLy8gZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb25hbENvbXBvbmVudChDdG9yLCBwcm9wc0RhdGEsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuKVxuICB9XG5cbiAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgLy8gY2hpbGQgY29tcG9uZW50IGxpc3RlbmVycyBpbnN0ZWFkIG9mIERPTSBsaXN0ZW5lcnNcbiAgdmFyIGxpc3RlbmVycyA9IGRhdGEub247XG4gIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gIC8vIHNvIGl0IGdldHMgcHJvY2Vzc2VkIGR1cmluZyBwYXJlbnQgY29tcG9uZW50IHBhdGNoLlxuICBkYXRhLm9uID0gZGF0YS5uYXRpdmVPbjtcblxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAvLyBhYnN0cmFjdCBjb21wb25lbnRzIGRvIG5vdCBrZWVwIGFueXRoaW5nXG4gICAgLy8gb3RoZXIgdGhhbiBwcm9wcyAmIGxpc3RlbmVycyAmIHNsb3RcblxuICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICB2YXIgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICB2YXIgbmFtZSA9IEN0b3Iub3B0aW9ucy5uYW1lIHx8IHRhZztcbiAgdmFyIHZub2RlID0gbmV3IFZOb2RlKFxuICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgZGF0YSwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dCxcbiAgICB7IEN0b3I6IEN0b3IsIHByb3BzRGF0YTogcHJvcHNEYXRhLCBsaXN0ZW5lcnM6IGxpc3RlbmVycywgdGFnOiB0YWcsIGNoaWxkcmVuOiBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQgLy8gYWN0aXZlSW5zdGFuY2UgaW4gbGlmZWN5Y2xlIHN0YXRlXG4pIHtcbiAgdmFyIG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50OiBwYXJlbnRcbiAgfTtcbiAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgdmFyIGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rc1RvTWVyZ2UubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0gaG9va3NUb01lcmdlW2ldO1xuICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgdmFyIHRvTWVyZ2UgPSBjb21wb25lbnRWTm9kZUhvb2tzW2tleV07XG4gICAgaWYgKGV4aXN0aW5nICE9PSB0b01lcmdlICYmICEoZXhpc3RpbmcgJiYgZXhpc3RpbmcuX21lcmdlZCkpIHtcbiAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1lcmdlSG9vayQxIChmMSwgZjIpIHtcbiAgdmFyIG1lcmdlZCA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgIGYxKGEsIGIpO1xuICAgIGYyKGEsIGIpO1xuICB9O1xuICBtZXJnZWQuX21lcmdlZCA9IHRydWU7XG4gIHJldHVybiBtZXJnZWRcbn1cblxuLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGluZm8gKHZhbHVlIGFuZCBjYWxsYmFjaykgaW50b1xuLy8gcHJvcCBhbmQgZXZlbnQgaGFuZGxlciByZXNwZWN0aXZlbHkuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICB2YXIgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgdmFyIGV2ZW50ID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5ldmVudCkgfHwgJ2lucHV0J1xuICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgdmFyIGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICBpZiAoaXNEZWYoZXhpc3RpbmcpKSB7XG4gICAgaWYgKFxuICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgPyBleGlzdGluZy5pbmRleE9mKGNhbGxiYWNrKSA9PT0gLTFcbiAgICAgICAgOiBleGlzdGluZyAhPT0gY2FsbGJhY2tcbiAgICApIHtcbiAgICAgIG9uW2V2ZW50XSA9IFtjYWxsYmFja10uY29uY2F0KGV4aXN0aW5nKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb25bZXZlbnRdID0gY2FsbGJhY2s7XG4gIH1cbn1cblxuLyogICovXG5cbnZhciBTSU1QTEVfTk9STUFMSVpFID0gMTtcbnZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgIFwiQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogXCIgKyAoSlNPTi5zdHJpbmdpZnkoZGF0YSkpICsgXCJcXG5cIiArXG4gICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgIGNvbnRleHRcbiAgICApO1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyBvYmplY3Qgc3ludGF4IGluIHYtYmluZFxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICB0YWcgPSBkYXRhLmlzO1xuICB9XG4gIGlmICghdGFnKSB7XG4gICAgLy8gaW4gY2FzZSBvZiBjb21wb25lbnQgOmlzIHNldCB0byBmYWxzeSB2YWx1ZVxuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxuICAvLyB3YXJuIGFnYWluc3Qgbm9uLXByaW1pdGl2ZSBrZXlcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICBpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICApIHtcbiAgICB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgdXNpbmcgbm9uLXByaW1pdGl2ZSB2YWx1ZSBhcyBrZXksICcgK1xuICAgICAgICAndXNlIHN0cmluZy9udW1iZXIgdmFsdWUgaW5zdGVhZC4nLFxuICAgICAgICBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuICAvLyBzdXBwb3J0IHNpbmdsZSBmdW5jdGlvbiBjaGlsZHJlbiBhcyBkZWZhdWx0IHNjb3BlZCBzbG90XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSAmJlxuICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcbiAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgIGNoaWxkcmVuLmxlbmd0aCA9IDA7XG4gIH1cbiAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBub3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH0gZWxzZSBpZiAobm9ybWFsaXphdGlvblR5cGUgPT09IFNJTVBMRV9OT1JNQUxJWkUpIHtcbiAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgfVxuICB2YXIgdm5vZGUsIG5zO1xuICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICB2YXIgQ3RvcjtcbiAgICBucyA9IChjb250ZXh0LiR2bm9kZSAmJiBjb250ZXh0LiR2bm9kZS5ucykgfHwgY29uZmlnLmdldFRhZ05hbWVzcGFjZSh0YWcpO1xuICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAvLyBwbGF0Zm9ybSBidWlsdC1pbiBlbGVtZW50c1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5uYXRpdmVPbikpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJUaGUgLm5hdGl2ZSBtb2RpZmllciBmb3Igdi1vbiBpcyBvbmx5IHZhbGlkIG9uIGNvbXBvbmVudHMgYnV0IGl0IHdhcyB1c2VkIG9uIDxcIiArIHRhZyArIFwiPi5cIiksXG4gICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIGNvbmZpZy5wYXJzZVBsYXRmb3JtVGFnTmFtZSh0YWcpLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICgoIWRhdGEgfHwgIWRhdGEucHJlKSAmJiBpc0RlZihDdG9yID0gcmVzb2x2ZUFzc2V0KGNvbnRleHQuJG9wdGlvbnMsICdjb21wb25lbnRzJywgdGFnKSkpIHtcbiAgICAgIC8vIGNvbXBvbmVudFxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVua25vd24gb3IgdW5saXN0ZWQgbmFtZXNwYWNlZCBlbGVtZW50c1xuICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgIC8vIHBhcmVudCBub3JtYWxpemVzIGNoaWxkcmVuXG4gICAgICB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHRcbiAgICAgICk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIGRpcmVjdCBjb21wb25lbnQgb3B0aW9ucyAvIGNvbnN0cnVjdG9yXG4gICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gIH1cbiAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgcmV0dXJuIHZub2RlXG4gIH0gZWxzZSBpZiAoaXNEZWYodm5vZGUpKSB7XG4gICAgaWYgKGlzRGVmKG5zKSkgeyBhcHBseU5TKHZub2RlLCBucyk7IH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICByZXR1cm4gdm5vZGVcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gIH1cbn1cblxuZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICB2bm9kZS5ucyA9IG5zO1xuICBpZiAodm5vZGUudGFnID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICBucyA9IHVuZGVmaW5lZDtcbiAgICBmb3JjZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlzRGVmKHZub2RlLmNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc0RlZihjaGlsZC50YWcpICYmIChcbiAgICAgICAgaXNVbmRlZihjaGlsZC5ucykgfHwgKGlzVHJ1ZShmb3JjZSkgJiYgY2hpbGQudGFnICE9PSAnc3ZnJykpKSB7XG4gICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIHJlZiAjNTMxOFxuLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbi8vIDpjbGFzcyBhcmUgdXNlZCBvbiBzbG90IG5vZGVzXG5mdW5jdGlvbiByZWdpc3RlckRlZXBCaW5kaW5ncyAoZGF0YSkge1xuICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICB0cmF2ZXJzZShkYXRhLnN0eWxlKTtcbiAgfVxuICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICB0cmF2ZXJzZShkYXRhLmNsYXNzKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFJlbmRlciAodm0pIHtcbiAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgdm0uX3N0YXRpY1RyZWVzID0gbnVsbDsgLy8gdi1vbmNlIGNhY2hlZCB0cmVlc1xuICB2YXIgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgdmFyIHJlbmRlckNvbnRleHQgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5jb250ZXh0O1xuICB2bS4kc2xvdHMgPSByZXNvbHZlU2xvdHMob3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4sIHJlbmRlckNvbnRleHQpO1xuICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgLy8gYmluZCB0aGUgY3JlYXRlRWxlbWVudCBmbiB0byB0aGlzIGluc3RhbmNlXG4gIC8vIHNvIHRoYXQgd2UgZ2V0IHByb3BlciByZW5kZXIgY29udGV4dCBpbnNpZGUgaXQuXG4gIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgLy8gaW50ZXJuYWwgdmVyc2lvbiBpcyB1c2VkIGJ5IHJlbmRlciBmdW5jdGlvbnMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZXNcbiAgdm0uX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudCh2bSwgYSwgYiwgYywgZCwgZmFsc2UpOyB9O1xuICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgLy8gdXNlci13cml0dGVuIHJlbmRlciBmdW5jdGlvbnMuXG4gIHZtLiRjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIHRydWUpOyB9O1xuXG4gIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gIC8vIHRoZXkgbmVlZCB0byBiZSByZWFjdGl2ZSBzbyB0aGF0IEhPQ3MgdXNpbmcgdGhlbSBhcmUgYWx3YXlzIHVwZGF0ZWRcbiAgdmFyIHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICFpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgJiYgd2FybihcIiRhdHRycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGxpc3RlbmVycyBpcyByZWFkb25seS5cIiwgdm0pO1xuICAgIH0sIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGF0dHJzJywgcGFyZW50RGF0YSAmJiBwYXJlbnREYXRhLmF0dHJzIHx8IGVtcHR5T2JqZWN0LCBudWxsLCB0cnVlKTtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRsaXN0ZW5lcnMnLCBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3QsIG51bGwsIHRydWUpO1xuICB9XG59XG5cbnZhciBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuXG5mdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gIC8vIGluc3RhbGwgcnVudGltZSBjb252ZW5pZW5jZSBoZWxwZXJzXG4gIGluc3RhbGxSZW5kZXJIZWxwZXJzKFZ1ZS5wcm90b3R5cGUpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIG5leHRUaWNrKGZuLCB0aGlzKVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIHZhciByZWYgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICB2YXIgX3BhcmVudFZub2RlID0gcmVmLl9wYXJlbnRWbm9kZTtcblxuICAgIGlmIChfcGFyZW50Vm5vZGUpIHtcbiAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICBfcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgdm0uJHNsb3RzLFxuICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgIC8vIHRvIHRoZSBkYXRhIG9uIHRoZSBwbGFjZWhvbGRlciBub2RlLlxuICAgIHZtLiR2bm9kZSA9IF9wYXJlbnRWbm9kZTtcbiAgICAvLyByZW5kZXIgc2VsZlxuICAgIHZhciB2bm9kZTtcbiAgICB0cnkge1xuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAvLyBzZXBhcmF0ZWx5IGZyb20gb25lIGFub3RoZXIuIE5lc3RlZCBjb21wb25lbnQncyByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHdoZW4gcGFyZW50IGNvbXBvbmVudCBpcyBwYXRjaGVkLlxuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICB2bm9kZSA9IHJlbmRlci5jYWxsKHZtLl9yZW5kZXJQcm94eSwgdm0uJGNyZWF0ZUVsZW1lbnQpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZub2RlID0gdm0uJG9wdGlvbnMucmVuZGVyRXJyb3IuY2FsbCh2bS5fcmVuZGVyUHJveHksIHZtLiRjcmVhdGVFbGVtZW50LCBlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlckVycm9yXCIpO1xuICAgICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gaWYgdGhlIHJldHVybmVkIGFycmF5IGNvbnRhaW5zIG9ubHkgYSBzaW5nbGUgbm9kZSwgYWxsb3cgaXRcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2bm9kZSkgJiYgdm5vZGUubGVuZ3RoID09PSAxKSB7XG4gICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgIH1cbiAgICAvLyByZXR1cm4gZW1wdHkgdm5vZGUgaW4gY2FzZSB0aGUgcmVuZGVyIGZ1bmN0aW9uIGVycm9yZWQgb3V0XG4gICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICBub2RlLmFzeW5jRmFjdG9yeSA9IGZhY3Rvcnk7XG4gIG5vZGUuYXN5bmNNZXRhID0geyBkYXRhOiBkYXRhLCBjb250ZXh0OiBjb250ZXh0LCBjaGlsZHJlbjogY2hpbGRyZW4sIHRhZzogdGFnIH07XG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVBc3luY0NvbXBvbmVudCAoXG4gIGZhY3RvcnksXG4gIGJhc2VDdG9yXG4pIHtcbiAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5lcnJvckNvbXBcbiAgfVxuXG4gIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgIHJldHVybiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cblxuICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gIGlmIChvd25lciAmJiBpc0RlZihmYWN0b3J5Lm93bmVycykgJiYgZmFjdG9yeS5vd25lcnMuaW5kZXhPZihvd25lcikgPT09IC0xKSB7XG4gICAgLy8gYWxyZWFkeSBwZW5kaW5nXG4gICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gIH1cblxuICBpZiAoaXNUcnVlKGZhY3RvcnkubG9hZGluZykgJiYgaXNEZWYoZmFjdG9yeS5sb2FkaW5nQ29tcCkpIHtcbiAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICB9XG5cbiAgaWYgKG93bmVyICYmICFpc0RlZihmYWN0b3J5Lm93bmVycykpIHtcbiAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgIHZhciBzeW5jID0gdHJ1ZTtcbiAgICB2YXIgdGltZXJMb2FkaW5nID0gbnVsbDtcbiAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgOyhvd25lcikuJG9uKCdob29rOmRlc3Ryb3llZCcsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlbW92ZShvd25lcnMsIG93bmVyKTsgfSk7XG5cbiAgICB2YXIgZm9yY2VSZW5kZXIgPSBmdW5jdGlvbiAocmVuZGVyQ29tcGxldGVkKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgKG93bmVyc1tpXSkuJGZvcmNlVXBkYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgb3duZXJzLmxlbmd0aCA9IDA7XG4gICAgICAgIGlmICh0aW1lckxvYWRpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJUaW1lb3V0KTtcbiAgICAgICAgICB0aW1lclRpbWVvdXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAvLyBjYWNoZSByZXNvbHZlZFxuICAgICAgZmFjdG9yeS5yZXNvbHZlZCA9IGVuc3VyZUN0b3IocmVzLCBiYXNlQ3Rvcik7XG4gICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAvLyAoYXN5bmMgcmVzb2x2ZXMgYXJlIHNoaW1tZWQgYXMgc3luY2hyb25vdXMgZHVyaW5nIFNTUilcbiAgICAgIGlmICghc3luYykge1xuICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG93bmVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlamVjdCA9IG9uY2UoZnVuY3Rpb24gKHJlYXNvbikge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgIChyZWFzb24gPyAoXCJcXG5SZWFzb246IFwiICsgcmVhc29uKSA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdmFyIHJlcyA9IGZhY3RvcnkocmVzb2x2ZSwgcmVqZWN0KTtcblxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICBpZiAoaXNQcm9taXNlKHJlcykpIHtcbiAgICAgICAgLy8gKCkgPT4gUHJvbWlzZVxuICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgIHJlcy50aGVuKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgIHJlcy5jb21wb25lbnQudGhlbihyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgICAgIGlmIChpc0RlZihyZXMuZXJyb3IpKSB7XG4gICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5sb2FkaW5nKSkge1xuICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgaWYgKHJlcy5kZWxheSA9PT0gMCkge1xuICAgICAgICAgICAgZmFjdG9yeS5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGltZXJMb2FkaW5nID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGZvcmNlUmVuZGVyKGZhbHNlKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgcmVzLmRlbGF5IHx8IDIwMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy50aW1lb3V0KSkge1xuICAgICAgICAgIHRpbWVyVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgICAgICAgICAgICAgICA/IChcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCIpXG4gICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBzeW5jID0gZmFsc2U7XG4gICAgLy8gcmV0dXJuIGluIGNhc2UgcmVzb2x2ZWQgc3luY2hyb25vdXNseVxuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgID8gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgICAgOiBmYWN0b3J5LnJlc29sdmVkXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICByZXR1cm4gbm9kZS5pc0NvbW1lbnQgJiYgbm9kZS5hc3luY0ZhY3Rvcnlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgKGlzRGVmKGMuY29tcG9uZW50T3B0aW9ucykgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpKSkge1xuICAgICAgICByZXR1cm4gY1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB2bS5faGFzSG9va0V2ZW50ID0gZmFsc2U7XG4gIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICB2YXIgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG52YXIgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICB2YXIgX3RhcmdldCA9IHRhcmdldDtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBpZiAocmVzICE9PSBudWxsKSB7XG4gICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIChcbiAgdm0sXG4gIGxpc3RlbmVycyxcbiAgb2xkTGlzdGVuZXJzXG4pIHtcbiAgdGFyZ2V0ID0gdm07XG4gIHVwZGF0ZUxpc3RlbmVycyhsaXN0ZW5lcnMsIG9sZExpc3RlbmVycyB8fCB7fSwgYWRkLCByZW1vdmUkMSwgY3JlYXRlT25jZUhhbmRsZXIsIHZtKTtcbiAgdGFyZ2V0ID0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBldmVudHNNaXhpbiAoVnVlKSB7XG4gIHZhciBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShldmVudCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZtLiRvbihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAodm0uX2V2ZW50c1tldmVudF0gfHwgKHZtLl9ldmVudHNbZXZlbnRdID0gW10pKS5wdXNoKGZuKTtcbiAgICAgIC8vIG9wdGltaXplIGhvb2s6ZXZlbnQgY29zdCBieSB1c2luZyBhIGJvb2xlYW4gZmxhZyBtYXJrZWQgYXQgcmVnaXN0cmF0aW9uXG4gICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgIGlmIChob29rUkUudGVzdChldmVudCkpIHtcbiAgICAgICAgdm0uX2hhc0hvb2tFdmVudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2bVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJG9uY2UgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICB2bS4kb2ZmKGV2ZW50LCBvbik7XG4gICAgICBmbi5hcHBseSh2bSwgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgb24uZm4gPSBmbjtcbiAgICB2bS4kb24oZXZlbnQsIG9uKTtcbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRvZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yICh2YXIgaSQxID0gMCwgbCA9IGV2ZW50Lmxlbmd0aDsgaSQxIDwgbDsgaSQxKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgZXZlbnRcbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIHZhciBjYjtcbiAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIFwiRXZlbnQgXFxcIlwiICsgbG93ZXJDYXNlRXZlbnQgKyBcIlxcXCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgXCIgK1xuICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICBcIk5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIHlvdSBjYW5ub3QgdXNlIFwiICtcbiAgICAgICAgICBcInYtb24gdG8gbGlzdGVuIHRvIGNhbWVsQ2FzZSBldmVudHMgd2hlbiB1c2luZyBpbi1ET00gdGVtcGxhdGVzLiBcIiArXG4gICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB2YXIgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKGNicykge1xuICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICAgIHZhciBpbmZvID0gXCJldmVudCBoYW5kbGVyIGZvciBcXFwiXCIgKyBldmVudCArIFwiXFxcIlwiO1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNic1tpXSwgdm0sIGFyZ3MsIHZtLCBpbmZvKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG59XG5cbi8qICAqL1xuXG52YXIgYWN0aXZlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzZXRBY3RpdmVJbnN0YW5jZSh2bSkge1xuICB2YXIgcHJldkFjdGl2ZUluc3RhbmNlID0gYWN0aXZlSW5zdGFuY2U7XG4gIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgYWN0aXZlSW5zdGFuY2UgPSBwcmV2QWN0aXZlSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdExpZmVjeWNsZSAodm0pIHtcbiAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICB2YXIgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgdmFyIHByZXZFbCA9IHZtLiRlbDtcbiAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIHZhciByZXN0b3JlQWN0aXZlSW5zdGFuY2UgPSBzZXRBY3RpdmVJbnN0YW5jZSh2bSk7XG4gICAgdm0uX3Zub2RlID0gdm5vZGU7XG4gICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgLy8gYmFzZWQgb24gdGhlIHJlbmRlcmluZyBiYWNrZW5kIHVzZWQuXG4gICAgaWYgKCFwcmV2Vm5vZGUpIHtcbiAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18odm0uJGVsLCB2bm9kZSwgaHlkcmF0aW5nLCBmYWxzZSAvKiByZW1vdmVPbmx5ICovKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdXBkYXRlc1xuICAgICAgdm0uJGVsID0gdm0uX19wYXRjaF9fKHByZXZWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAvLyB1cGRhdGUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAocHJldkVsKSB7XG4gICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgfVxuICAgIC8vIGlmIHBhcmVudCBpcyBhbiBIT0MsIHVwZGF0ZSBpdHMgJGVsIGFzIHdlbGxcbiAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgdm0uJHBhcmVudC4kZWwgPSB2bS4kZWw7XG4gICAgfVxuICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAvLyB1cGRhdGVkIGluIGEgcGFyZW50J3MgdXBkYXRlZCBob29rLlxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB2bSA9IHRoaXM7XG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICB9XG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIHZhciBwYXJlbnQgPSB2bS4kcGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHJlbW92ZShwYXJlbnQuJGNoaWxkcmVuLCB2bSk7XG4gICAgfVxuICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgaWYgKHZtLl93YXRjaGVyKSB7XG4gICAgICB2bS5fd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgICB2YXIgaSA9IHZtLl93YXRjaGVycy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIC8vIHJlbW92ZSByZWZlcmVuY2UgZnJvbSBkYXRhIG9iXG4gICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgaWYgKHZtLl9kYXRhLl9fb2JfXykge1xuICAgICAgdm0uX2RhdGEuX19vYl9fLnZtQ291bnQtLTtcbiAgICB9XG4gICAgLy8gY2FsbCB0aGUgbGFzdCBob29rLi4uXG4gICAgdm0uX2lzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICB2bS5fX3BhdGNoX18odm0uX3Zub2RlLCBudWxsKTtcbiAgICAvLyBmaXJlIGRlc3Ryb3llZCBob29rXG4gICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAvLyB0dXJuIG9mZiBhbGwgaW5zdGFuY2UgbGlzdGVuZXJzLlxuICAgIHZtLiRvZmYoKTtcbiAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICBpZiAodm0uJGVsKSB7XG4gICAgICB2bS4kZWwuX192dWVfXyA9IG51bGw7XG4gICAgfVxuICAgIC8vIHJlbGVhc2UgY2lyY3VsYXIgcmVmZXJlbmNlICgjNjc1OSlcbiAgICBpZiAodm0uJHZub2RlKSB7XG4gICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG1vdW50Q29tcG9uZW50IChcbiAgdm0sXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICB2bS4kZWwgPSBlbDtcbiAgaWYgKCF2bS4kb3B0aW9ucy5yZW5kZXIpIHtcbiAgICB2bS4kb3B0aW9ucy5yZW5kZXIgPSBjcmVhdGVFbXB0eVZOb2RlO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgIHZtLiRvcHRpb25zLmVsIHx8IGVsKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICdjb21waWxlciBpcyBub3QgYXZhaWxhYmxlLiBFaXRoZXIgcHJlLWNvbXBpbGUgdGhlIHRlbXBsYXRlcyBpbnRvICcgK1xuICAgICAgICAgICdyZW5kZXIgZnVuY3Rpb25zLCBvciB1c2UgdGhlIGNvbXBpbGVyLWluY2x1ZGVkIGJ1aWxkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0ZhaWxlZCB0byBtb3VudCBjb21wb25lbnQ6IHRlbXBsYXRlIG9yIHJlbmRlciBmdW5jdGlvbiBub3QgZGVmaW5lZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNhbGxIb29rKHZtLCAnYmVmb3JlTW91bnQnKTtcblxuICB2YXIgdXBkYXRlQ29tcG9uZW50O1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgbmFtZSA9IHZtLl9uYW1lO1xuICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgIHZhciBzdGFydFRhZyA9IFwidnVlLXBlcmYtc3RhcnQ6XCIgKyBpZDtcbiAgICAgIHZhciBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArIGlkO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIHZhciB2bm9kZSA9IHZtLl9yZW5kZXIoKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHBhdGNoXCIpLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZtLl91cGRhdGUodm0uX3JlbmRlcigpLCBoeWRyYXRpbmcpO1xuICAgIH07XG4gIH1cblxuICAvLyB3ZSBzZXQgdGhpcyB0byB2bS5fd2F0Y2hlciBpbnNpZGUgdGhlIHdhdGNoZXIncyBjb25zdHJ1Y3RvclxuICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAvLyBjb21wb25lbnQncyBtb3VudGVkIGhvb2spLCB3aGljaCByZWxpZXMgb24gdm0uX3dhdGNoZXIgYmVpbmcgYWxyZWFkeSBkZWZpbmVkXG4gIG5ldyBXYXRjaGVyKHZtLCB1cGRhdGVDb21wb25lbnQsIG5vb3AsIHtcbiAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICBpZiAodm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlVXBkYXRlJyk7XG4gICAgICB9XG4gICAgfVxuICB9LCB0cnVlIC8qIGlzUmVuZGVyV2F0Y2hlciAqLyk7XG4gIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gIC8vIG1hbnVhbGx5IG1vdW50ZWQgaW5zdGFuY2UsIGNhbGwgbW91bnRlZCBvbiBzZWxmXG4gIC8vIG1vdW50ZWQgaXMgY2FsbGVkIGZvciByZW5kZXItY3JlYXRlZCBjaGlsZCBjb21wb25lbnRzIGluIGl0cyBpbnNlcnRlZCBob29rXG4gIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgIHZtLl9pc01vdW50ZWQgPSB0cnVlO1xuICAgIGNhbGxIb29rKHZtLCAnbW91bnRlZCcpO1xuICB9XG4gIHJldHVybiB2bVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gIHZtLFxuICBwcm9wc0RhdGEsXG4gIGxpc3RlbmVycyxcbiAgcGFyZW50Vm5vZGUsXG4gIHJlbmRlckNoaWxkcmVuXG4pIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgY29tcG9uZW50IGhhcyBzbG90IGNoaWxkcmVuXG4gIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBkeW5hbWljIHNjb3BlZFNsb3RzIChoYW5kLXdyaXR0ZW4gb3IgY29tcGlsZWQgYnV0IHdpdGhcbiAgLy8gZHluYW1pYyBzbG90IG5hbWVzKS4gU3RhdGljIHNjb3BlZCBzbG90cyBjb21waWxlZCBmcm9tIHRlbXBsYXRlIGhhcyB0aGVcbiAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICB2YXIgbmV3U2NvcGVkU2xvdHMgPSBwYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzO1xuICB2YXIgb2xkU2NvcGVkU2xvdHMgPSB2bS4kc2NvcGVkU2xvdHM7XG4gIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgIChuZXdTY29wZWRTbG90cyAmJiAhbmV3U2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAob2xkU2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICFvbGRTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgdmFyIG5lZWRzRm9yY2VVcGRhdGUgPSAhIShcbiAgICByZW5kZXJDaGlsZHJlbiB8fCAgICAgICAgICAgICAgIC8vIGhhcyBuZXcgc3RhdGljIHNsb3RzXG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgIGhhc0R5bmFtaWNTY29wZWRTbG90XG4gICk7XG5cbiAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gIHZtLiR2bm9kZSA9IHBhcmVudFZub2RlOyAvLyB1cGRhdGUgdm0ncyBwbGFjZWhvbGRlciBub2RlIHdpdGhvdXQgcmUtcmVuZGVyXG5cbiAgaWYgKHZtLl92bm9kZSkgeyAvLyB1cGRhdGUgY2hpbGQgdHJlZSdzIHBhcmVudFxuICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgfVxuICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gPSByZW5kZXJDaGlsZHJlbjtcblxuICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgLy8gdGhlc2UgYXJlIGFsc28gcmVhY3RpdmUgc28gdGhleSBtYXkgdHJpZ2dlciBjaGlsZCB1cGRhdGUgaWYgdGhlIGNoaWxkXG4gIC8vIHVzZWQgdGhlbSBkdXJpbmcgcmVuZGVyXG4gIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gIHZtLiRsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG5cbiAgLy8gdXBkYXRlIHByb3BzXG4gIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIHZhciBwcm9wcyA9IHZtLl9wcm9wcztcbiAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IHByb3BLZXlzW2ldO1xuICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgcHJvcHNba2V5XSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICB9XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgIC8vIGtlZXAgYSBjb3B5IG9mIHJhdyBwcm9wc0RhdGFcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgPSBwcm9wc0RhdGE7XG4gIH1cblxuICAvLyB1cGRhdGUgbGlzdGVuZXJzXG4gIGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcbiAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkluYWN0aXZlVHJlZSAodm0pIHtcbiAgd2hpbGUgKHZtICYmICh2bSA9IHZtLiRwYXJlbnQpKSB7XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9IGVsc2UgaWYgKHZtLl9kaXJlY3RJbmFjdGl2ZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmICh2bS5faW5hY3RpdmUgfHwgdm0uX2luYWN0aXZlID09PSBudWxsKSB7XG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgaWYgKGRpcmVjdCkge1xuICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IHRydWU7XG4gICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gIH1cbiAgaWYgKCF2bS5faW5hY3RpdmUpIHtcbiAgICB2bS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQodm0uJGNoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgbGlmZWN5Y2xlIGhvb2tzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIHZhciBpbmZvID0gaG9vayArIFwiIGhvb2tcIjtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbnZhciBNQVhfVVBEQVRFX0NPVU5UID0gMTAwO1xuXG52YXIgcXVldWUgPSBbXTtcbnZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xudmFyIGhhcyA9IHt9O1xudmFyIGNpcmN1bGFyID0ge307XG52YXIgd2FpdGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY2lyY3VsYXIgPSB7fTtcbiAgfVxuICB3YWl0aW5nID0gZmx1c2hpbmcgPSBmYWxzZTtcbn1cblxuLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuLy8gYXR0YWNoZWQuIEhvd2V2ZXIsIGNhbGxpbmcgcGVyZm9ybWFuY2Uubm93KCkgaGFzIGEgcGVyZiBvdmVyaGVhZCBlc3BlY2lhbGx5XG4vLyBpZiB0aGUgcGFnZSBoYXMgdGhvdXNhbmRzIG9mIGV2ZW50IGxpc3RlbmVycy4gSW5zdGVhZCwgd2UgdGFrZSBhIHRpbWVzdGFtcFxuLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4vLyBhdHRhY2hlZCBkdXJpbmcgdGhhdCBmbHVzaC5cbnZhciBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSAwO1xuXG4vLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxudmFyIGdldE5vdyA9IERhdGUubm93O1xuXG4vLyBEZXRlcm1pbmUgd2hhdCBldmVudCB0aW1lc3RhbXAgdGhlIGJyb3dzZXIgaXMgdXNpbmcuIEFubm95aW5nbHksIHRoZVxuLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbi8vIChyZWxhdGl2ZSB0byBVTklYIGVwb2NoKSwgc28gaW4gb3JkZXIgdG8gY29tcGFyZSB0aW1lIHdlIGhhdmUgdG8gdXNlIHRoZVxuLy8gc2FtZSB0aW1lc3RhbXAgdHlwZSB3aGVuIHNhdmluZyB0aGUgZmx1c2ggdGltZXN0YW1wLlxuLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4vLyBpbXBsZW1lbnRhdGlvbnMgKCM5NjMyKVxuaWYgKGluQnJvd3NlciAmJiAhaXNJRSkge1xuICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gIGlmIChcbiAgICBwZXJmb3JtYW5jZSAmJlxuICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICBnZXROb3coKSA+IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpLnRpbWVTdGFtcFxuICApIHtcbiAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgLy8gc21hbGxlciB0aGFuIGl0LCBpdCBtZWFucyB0aGUgZXZlbnQgaXMgdXNpbmcgYSBoaS1yZXMgdGltZXN0YW1wLFxuICAgIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVyIHRpbWVzdGFtcHMgYXNcbiAgICAvLyB3ZWxsLlxuICAgIGdldE5vdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpOyB9O1xuICB9XG59XG5cbi8qKlxuICogRmx1c2ggYm90aCBxdWV1ZXMgYW5kIHJ1biB0aGUgd2F0Y2hlcnMuXG4gKi9cbmZ1bmN0aW9uIGZsdXNoU2NoZWR1bGVyUXVldWUgKCkge1xuICBjdXJyZW50Rmx1c2hUaW1lc3RhbXAgPSBnZXROb3coKTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICB2YXIgd2F0Y2hlciwgaWQ7XG5cbiAgLy8gU29ydCBxdWV1ZSBiZWZvcmUgZmx1c2guXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAvLyAxLiBDb21wb25lbnRzIGFyZSB1cGRhdGVkIGZyb20gcGFyZW50IHRvIGNoaWxkLiAoYmVjYXVzZSBwYXJlbnQgaXMgYWx3YXlzXG4gIC8vICAgIGNyZWF0ZWQgYmVmb3JlIHRoZSBjaGlsZClcbiAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAvLyAgICB1c2VyIHdhdGNoZXJzIGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcmVuZGVyIHdhdGNoZXIpXG4gIC8vIDMuIElmIGEgY29tcG9uZW50IGlzIGRlc3Ryb3llZCBkdXJpbmcgYSBwYXJlbnQgY29tcG9uZW50J3Mgd2F0Y2hlciBydW4sXG4gIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgcXVldWUuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuXG4gIC8vIGRvIG5vdCBjYWNoZSBsZW5ndGggYmVjYXVzZSBtb3JlIHdhdGNoZXJzIG1pZ2h0IGJlIHB1c2hlZFxuICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgcXVldWUubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgd2F0Y2hlciA9IHF1ZXVlW2luZGV4XTtcbiAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgIHdhdGNoZXIuYmVmb3JlKCk7XG4gICAgfVxuICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICBoYXNbaWRdID0gbnVsbDtcbiAgICB3YXRjaGVyLnJ1bigpO1xuICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICA6IFwiaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLlwiXG4gICAgICAgICAgKSxcbiAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICk7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICB2YXIgYWN0aXZhdGVkUXVldWUgPSBhY3RpdmF0ZWRDaGlsZHJlbi5zbGljZSgpO1xuICB2YXIgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIHZhciBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgdmFyIHdhdGNoZXIgPSBxdWV1ZVtpXTtcbiAgICB2YXIgdm0gPSB3YXRjaGVyLnZtO1xuICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGNhbGxIb29rKHZtLCAndXBkYXRlZCcpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAqIFRoZSBxdWV1ZSB3aWxsIGJlIHByb2Nlc3NlZCBhZnRlciB0aGUgZW50aXJlIHRyZWUgaGFzIGJlZW4gcGF0Y2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gIC8vIHNldHRpbmcgX2luYWN0aXZlIHRvIGZhbHNlIGhlcmUgc28gdGhhdCBhIHJlbmRlciBmdW5jdGlvbiBjYW5cbiAgLy8gcmVseSBvbiBjaGVja2luZyB3aGV0aGVyIGl0J3MgaW4gYW4gaW5hY3RpdmUgdHJlZSAoZS5nLiByb3V0ZXItdmlldylcbiAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gIGFjdGl2YXRlZENoaWxkcmVuLnB1c2godm0pO1xufVxuXG5mdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyBpKyspIHtcbiAgICBxdWV1ZVtpXS5faW5hY3RpdmUgPSB0cnVlO1xuICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gIH1cbn1cblxuLyoqXG4gKiBQdXNoIGEgd2F0Y2hlciBpbnRvIHRoZSB3YXRjaGVyIHF1ZXVlLlxuICogSm9icyB3aXRoIGR1cGxpY2F0ZSBJRHMgd2lsbCBiZSBza2lwcGVkIHVubGVzcyBpdCdzXG4gKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAqL1xuZnVuY3Rpb24gcXVldWVXYXRjaGVyICh3YXRjaGVyKSB7XG4gIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgdmFyIGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgIWNvbmZpZy5hc3luYykge1xuICAgICAgICBmbHVzaFNjaGVkdWxlclF1ZXVlKCk7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgbmV4dFRpY2soZmx1c2hTY2hlZHVsZXJRdWV1ZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5cblxudmFyIHVpZCQyID0gMDtcblxuLyoqXG4gKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAqIGFuZCBmaXJlcyBjYWxsYmFjayB3aGVuIHRoZSBleHByZXNzaW9uIHZhbHVlIGNoYW5nZXMuXG4gKiBUaGlzIGlzIHVzZWQgZm9yIGJvdGggdGhlICR3YXRjaCgpIGFwaSBhbmQgZGlyZWN0aXZlcy5cbiAqL1xudmFyIFdhdGNoZXIgPSBmdW5jdGlvbiBXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGNiLFxuICBvcHRpb25zLFxuICBpc1JlbmRlcldhdGNoZXJcbikge1xuICB0aGlzLnZtID0gdm07XG4gIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICB2bS5fd2F0Y2hlciA9IHRoaXM7XG4gIH1cbiAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gIC8vIG9wdGlvbnNcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICB0aGlzLnVzZXIgPSAhIW9wdGlvbnMudXNlcjtcbiAgICB0aGlzLmxhenkgPSAhIW9wdGlvbnMubGF6eTtcbiAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICB0aGlzLmJlZm9yZSA9IG9wdGlvbnMuYmVmb3JlO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICB9XG4gIHRoaXMuY2IgPSBjYjtcbiAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICB0aGlzLmRpcnR5ID0gdGhpcy5sYXp5OyAvLyBmb3IgbGF6eSB3YXRjaGVyc1xuICB0aGlzLmRlcHMgPSBbXTtcbiAgdGhpcy5uZXdEZXBzID0gW107XG4gIHRoaXMuZGVwSWRzID0gbmV3IF9TZXQoKTtcbiAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICB0aGlzLmV4cHJlc3Npb24gPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nXG4gICAgPyBleHBPckZuLnRvU3RyaW5nKClcbiAgICA6ICcnO1xuICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgaWYgKHR5cGVvZiBleHBPckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhpcy5nZXR0ZXIgPSBleHBPckZuO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuZ2V0dGVyID0gcGFyc2VQYXRoKGV4cE9yRm4pO1xuICAgIGlmICghdGhpcy5nZXR0ZXIpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJGYWlsZWQgd2F0Y2hpbmcgcGF0aDogXFxcIlwiICsgZXhwT3JGbiArIFwiXFxcIiBcIiArXG4gICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgPyB1bmRlZmluZWRcbiAgICA6IHRoaXMuZ2V0KCk7XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgcHVzaFRhcmdldCh0aGlzKTtcbiAgdmFyIHZhbHVlO1xuICB2YXIgdm0gPSB0aGlzLnZtO1xuICB0cnkge1xuICAgIHZhbHVlID0gdGhpcy5nZXR0ZXIuY2FsbCh2bSwgdm0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIChcImdldHRlciBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGVcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgLy8gZGVwZW5kZW5jaWVzIGZvciBkZWVwIHdhdGNoaW5nXG4gICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgIH1cbiAgICBwb3BUYXJnZXQoKTtcbiAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlXG59O1xuXG4vKipcbiAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLmFkZERlcCA9IGZ1bmN0aW9uIGFkZERlcCAoZGVwKSB7XG4gIHZhciBpZCA9IGRlcC5pZDtcbiAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoaWQpKSB7XG4gICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgIGlmICghdGhpcy5kZXBJZHMuaGFzKGlkKSkge1xuICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbn07XG5cbi8qKlxuICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgZGVwLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gIH1cbiAgdmFyIHRtcCA9IHRoaXMuZGVwSWRzO1xuICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBJZHMuY2xlYXIoKTtcbiAgdG1wID0gdGhpcy5kZXBzO1xuICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gIHRoaXMubmV3RGVwcyA9IHRtcDtcbiAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG59O1xuXG4vKipcbiAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgd2hlbiBhIGRlcGVuZGVuY3kgY2hhbmdlcy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHRoaXMubGF6eSkge1xuICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICB9IGVsc2UgaWYgKHRoaXMuc3luYykge1xuICAgIHRoaXMucnVuKCk7XG4gIH0gZWxzZSB7XG4gICAgcXVldWVXYXRjaGVyKHRoaXMpO1xuICB9XG59O1xuXG4vKipcbiAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gcnVuICgpIHtcbiAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgdmFyIHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICBpZiAoXG4gICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAvLyB3aGVuIHRoZSB2YWx1ZSBpcyB0aGUgc2FtZSwgYmVjYXVzZSB0aGUgdmFsdWUgbWF5XG4gICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgIHRoaXMuZGVlcFxuICAgICkge1xuICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy52YWx1ZTtcbiAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgIGlmICh0aGlzLnVzZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGhhbmRsZUVycm9yKGUsIHRoaXMudm0sIChcImNhbGxiYWNrIGZvciB3YXRjaGVyIFxcXCJcIiArICh0aGlzLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYi5jYWxsKHRoaXMudm0sIHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIEV2YWx1YXRlIHRoZSB2YWx1ZSBvZiB0aGUgd2F0Y2hlci5cbiAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAqL1xuV2F0Y2hlci5wcm90b3R5cGUuZXZhbHVhdGUgPSBmdW5jdGlvbiBldmFsdWF0ZSAoKSB7XG4gIHRoaXMudmFsdWUgPSB0aGlzLmdldCgpO1xuICB0aGlzLmRpcnR5ID0gZmFsc2U7XG59O1xuXG4vKipcbiAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICovXG5XYXRjaGVyLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gIH1cbn07XG5cbi8qKlxuICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gKi9cbldhdGNoZXIucHJvdG90eXBlLnRlYXJkb3duID0gZnVuY3Rpb24gdGVhcmRvd24gKCkge1xuICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHZtJ3Mgd2F0Y2hlciBsaXN0XG4gICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgaWYgKCF0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkKSB7XG4gICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgIH1cbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICB9XG4gICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufTtcblxuLyogICovXG5cbnZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBub29wLFxuICBzZXQ6IG5vb3Bcbn07XG5cbmZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBmdW5jdGlvbiBwcm94eUdldHRlciAoKSB7XG4gICAgcmV0dXJuIHRoaXNbc291cmNlS2V5XVtrZXldXG4gIH07XG4gIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiBwcm94eVNldHRlciAodmFsKSB7XG4gICAgdGhpc1tzb3VyY2VLZXldW2tleV0gPSB2YWw7XG4gIH07XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICB2bS5fd2F0Y2hlcnMgPSBbXTtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucztcbiAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICBpZiAob3B0cy5tZXRob2RzKSB7IGluaXRNZXRob2RzKHZtLCBvcHRzLm1ldGhvZHMpOyB9XG4gIGlmIChvcHRzLmRhdGEpIHtcbiAgICBpbml0RGF0YSh2bSk7XG4gIH0gZWxzZSB7XG4gICAgb2JzZXJ2ZSh2bS5fZGF0YSA9IHt9LCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xuICB9XG4gIGlmIChvcHRzLmNvbXB1dGVkKSB7IGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7IH1cbiAgaWYgKG9wdHMud2F0Y2ggJiYgb3B0cy53YXRjaCAhPT0gbmF0aXZlV2F0Y2gpIHtcbiAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICB2YXIgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bS5fcHJvcHMgPSB7fTtcbiAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgLy8gaW5zdGVhZCBvZiBkeW5hbWljIG9iamVjdCBrZXkgZW51bWVyYXRpb24uXG4gIHZhciBrZXlzID0gdm0uJG9wdGlvbnMuX3Byb3BLZXlzID0gW107XG4gIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICB2YXIgbG9vcCA9IGZ1bmN0aW9uICgga2V5ICkge1xuICAgIGtleXMucHVzaChrZXkpO1xuICAgIHZhciB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgdmFyIGh5cGhlbmF0ZWRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgY29uZmlnLmlzUmVzZXJ2ZWRBdHRyKGh5cGhlbmF0ZWRLZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShwcm9wcywga2V5LCB2YWx1ZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIWlzUm9vdCAmJiAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50KSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgIFwib3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHBhcmVudCBjb21wb25lbnQgcmUtcmVuZGVycy4gXCIgK1xuICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgXCJ2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIixcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgIC8vIGR1cmluZyBWdWUuZXh0ZW5kKCkuIFdlIG9ubHkgbmVlZCB0byBwcm94eSBwcm9wcyBkZWZpbmVkIGF0XG4gICAgLy8gaW5zdGFudGlhdGlvbiBoZXJlLlxuICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgIHByb3h5KHZtLCBcIl9wcm9wc1wiLCBrZXkpO1xuICAgIH1cbiAgfTtcblxuICBmb3IgKHZhciBrZXkgaW4gcHJvcHNPcHRpb25zKSBsb29wKCBrZXkgKTtcbiAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xufVxuXG5mdW5jdGlvbiBpbml0RGF0YSAodm0pIHtcbiAgdmFyIGRhdGEgPSB2bS4kb3B0aW9ucy5kYXRhO1xuICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gZ2V0RGF0YShkYXRhLCB2bSlcbiAgICA6IGRhdGEgfHwge307XG4gIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgIGRhdGEgPSB7fTtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICAnZGF0YSBmdW5jdGlvbnMgc2hvdWxkIHJldHVybiBhbiBvYmplY3Q6XFxuJyArXG4gICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgfVxuICAvLyBwcm94eSBkYXRhIG9uIGluc3RhbmNlXG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICB2YXIgbWV0aG9kcyA9IHZtLiRvcHRpb25zLm1ldGhvZHM7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgd2FybihcbiAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgXCJVc2UgcHJvcCBkZWZhdWx0IHZhbHVlIGluc3RlYWQuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoIWlzUmVzZXJ2ZWQoa2V5KSkge1xuICAgICAgcHJveHkodm0sIFwiX2RhdGFcIiwga2V5KTtcbiAgICB9XG4gIH1cbiAgLy8gb2JzZXJ2ZSBkYXRhXG4gIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YSAoZGF0YSwgdm0pIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICBwdXNoVGFyZ2V0KCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBoYW5kbGVFcnJvcihlLCB2bSwgXCJkYXRhKClcIik7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxudmFyIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnMgPSB7IGxhenk6IHRydWUgfTtcblxuZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gIHZhciB3YXRjaGVycyA9IHZtLl9jb21wdXRlZFdhdGNoZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgdmFyIGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgdmFyIGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGdldHRlciA9PSBudWxsKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFpc1NTUikge1xuICAgICAgLy8gY3JlYXRlIGludGVybmFsIHdhdGNoZXIgZm9yIHRoZSBjb21wdXRlZCBwcm9wZXJ0eS5cbiAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgdm0sXG4gICAgICAgIGdldHRlciB8fCBub29wLFxuICAgICAgICBub29wLFxuICAgICAgICBjb21wdXRlZFdhdGNoZXJPcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGNvbXBvbmVudC1kZWZpbmVkIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGFscmVhZHkgZGVmaW5lZCBvbiB0aGVcbiAgICAvLyBjb21wb25lbnQgcHJvdG90eXBlLiBXZSBvbmx5IG5lZWQgdG8gZGVmaW5lIGNvbXB1dGVkIHByb3BlcnRpZXMgZGVmaW5lZFxuICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBkZWZpbmVDb21wdXRlZCh2bSwga2V5LCB1c2VyRGVmKTtcbiAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBhcyBhIHByb3AuXCIpLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgaWYgKHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IHNob3VsZENhY2hlXG4gICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmKTtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gbm9vcDtcbiAgfSBlbHNlIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gdXNlckRlZi5nZXRcbiAgICAgID8gc2hvdWxkQ2FjaGUgJiYgdXNlckRlZi5jYWNoZSAhPT0gZmFsc2VcbiAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgIDogY3JlYXRlR2V0dGVySW52b2tlcih1c2VyRGVmLmdldClcbiAgICAgIDogbm9vcDtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJlxuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9PT0gbm9vcCkge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAoXCJDb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgd2FzIGFzc2lnbmVkIHRvIGJ1dCBpdCBoYXMgbm8gc2V0dGVyLlwiKSxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHZhciB3YXRjaGVyID0gdGhpcy5fY29tcHV0ZWRXYXRjaGVycyAmJiB0aGlzLl9jb21wdXRlZFdhdGNoZXJzW2tleV07XG4gICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgIGlmICh3YXRjaGVyLmRpcnR5KSB7XG4gICAgICAgIHdhdGNoZXIuZXZhbHVhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd2F0Y2hlci52YWx1ZVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVHZXR0ZXJJbnZva2VyKGZuKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgcmV0dXJuIGZuLmNhbGwodGhpcywgdGhpcylcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0TWV0aG9kcyAodm0sIG1ldGhvZHMpIHtcbiAgdmFyIHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyB0eXBlIFxcXCJcIiArICh0eXBlb2YgbWV0aG9kc1trZXldKSArIFwiXFxcIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICBcIkF2b2lkIGRlZmluaW5nIGNvbXBvbmVudCBtZXRob2RzIHRoYXQgc3RhcnQgd2l0aCBfIG9yICQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICB2YXIgaGFuZGxlciA9IHdhdGNoW2tleV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXJbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjcmVhdGVXYXRjaGVyKHZtLCBrZXksIGhhbmRsZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVXYXRjaGVyIChcbiAgdm0sXG4gIGV4cE9yRm4sXG4gIGhhbmRsZXIsXG4gIG9wdGlvbnNcbikge1xuICBpZiAoaXNQbGFpbk9iamVjdChoYW5kbGVyKSkge1xuICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBoYW5kbGVyLmhhbmRsZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgIGhhbmRsZXIgPSB2bVtoYW5kbGVyXTtcbiAgfVxuICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIHN0YXRlTWl4aW4gKFZ1ZSkge1xuICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgLy8gd2hlbiB1c2luZyBPYmplY3QuZGVmaW5lUHJvcGVydHksIHNvIHdlIGhhdmUgdG8gcHJvY2VkdXJhbGx5IGJ1aWxkIHVwXG4gIC8vIHRoZSBvYmplY3QgaGVyZS5cbiAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIHZhciBwcm9wc0RlZiA9IHt9O1xuICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHJlcGxhY2luZyBpbnN0YW5jZSByb290ICRkYXRhLiAnICtcbiAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9O1xuICAgIHByb3BzRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXCIkcHJvcHMgaXMgcmVhZG9ubHkuXCIsIHRoaXMpO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckZGF0YScsIGRhdGFEZWYpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICBWdWUucHJvdG90eXBlLiRzZXQgPSBzZXQ7XG4gIFZ1ZS5wcm90b3R5cGUuJGRlbGV0ZSA9IGRlbDtcblxuICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICBleHBPckZuLFxuICAgIGNiLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucylcbiAgICB9XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy51c2VyID0gdHJ1ZTtcbiAgICB2YXIgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgKFwiY2FsbGJhY2sgZm9yIGltbWVkaWF0ZSB3YXRjaGVyIFxcXCJcIiArICh3YXRjaGVyLmV4cHJlc3Npb24pICsgXCJcXFwiXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHVud2F0Y2hGbiAoKSB7XG4gICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxudmFyIHVpZCQzID0gMDtcblxuZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgVnVlLnByb3RvdHlwZS5faW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgdmFyIHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgdmFyIHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArICh2bS5fdWlkKTtcbiAgICAgIGVuZFRhZyA9IFwidnVlLXBlcmYtZW5kOlwiICsgKHZtLl91aWQpO1xuICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgfVxuXG4gICAgLy8gYSBmbGFnIHRvIGF2b2lkIHRoaXMgYmVpbmcgb2JzZXJ2ZWRcbiAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgIC8vIG1lcmdlIG9wdGlvbnNcbiAgICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLl9pc0NvbXBvbmVudCkge1xuICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgIC8vIHNpbmNlIGR5bmFtaWMgb3B0aW9ucyBtZXJnaW5nIGlzIHByZXR0eSBzbG93LCBhbmQgbm9uZSBvZiB0aGVcbiAgICAgIC8vIGludGVybmFsIGNvbXBvbmVudCBvcHRpb25zIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50LlxuICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uJG9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICBvcHRpb25zIHx8IHt9LFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaW5pdFByb3h5KHZtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gdm07XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICB2bS5fbmFtZSA9IGZvcm1hdENvbXBvbmVudE5hbWUodm0sIGZhbHNlKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSB2bS4kb3B0aW9ucyA9IE9iamVjdC5jcmVhdGUodm0uY29uc3RydWN0b3Iub3B0aW9ucyk7XG4gIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gIHZhciBwYXJlbnRWbm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlO1xuICBvcHRzLnBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gIHZhciB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIHZhciBzdXBlck9wdGlvbnMgPSByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3Iuc3VwZXIpO1xuICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICBpZiAoc3VwZXJPcHRpb25zICE9PSBjYWNoZWRTdXBlck9wdGlvbnMpIHtcbiAgICAgIC8vIHN1cGVyIG9wdGlvbiBjaGFuZ2VkLFxuICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgQ3Rvci5zdXBlck9wdGlvbnMgPSBzdXBlck9wdGlvbnM7XG4gICAgICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgYW55IGxhdGUtbW9kaWZpZWQvYXR0YWNoZWQgb3B0aW9ucyAoIzQ5NzYpXG4gICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIHZhciBtb2RpZmllZDtcbiAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgdmFyIHNlYWxlZCA9IEN0b3Iuc2VhbGVkT3B0aW9ucztcbiAgZm9yICh2YXIga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIHsgbW9kaWZpZWQgPSB7fTsgfVxuICAgICAgbW9kaWZpZWRba2V5XSA9IGxhdGVzdFtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbW9kaWZpZWRcbn1cblxuZnVuY3Rpb24gVnVlIChvcHRpb25zKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICApIHtcbiAgICB3YXJuKCdWdWUgaXMgYSBjb25zdHJ1Y3RvciBhbmQgc2hvdWxkIGJlIGNhbGxlZCB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkJyk7XG4gIH1cbiAgdGhpcy5faW5pdChvcHRpb25zKTtcbn1cblxuaW5pdE1peGluKFZ1ZSk7XG5zdGF0ZU1peGluKFZ1ZSk7XG5ldmVudHNNaXhpbihWdWUpO1xubGlmZWN5Y2xlTWl4aW4oVnVlKTtcbnJlbmRlck1peGluKFZ1ZSk7XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgVnVlLnVzZSA9IGZ1bmN0aW9uIChwbHVnaW4pIHtcbiAgICB2YXIgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICB2YXIgYXJncyA9IHRvQXJyYXkoYXJndW1lbnRzLCAxKTtcbiAgICBhcmdzLnVuc2hpZnQodGhpcyk7XG4gICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmluc3RhbGwuYXBwbHkocGx1Z2luLCBhcmdzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbHVnaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICB9XG4gICAgaW5zdGFsbGVkUGx1Z2lucy5wdXNoKHBsdWdpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRNaXhpbiQxIChWdWUpIHtcbiAgVnVlLm1peGluID0gZnVuY3Rpb24gKG1peGluKSB7XG4gICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgIHJldHVybiB0aGlzXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXh0ZW5kIChWdWUpIHtcbiAgLyoqXG4gICAqIEVhY2ggaW5zdGFuY2UgY29uc3RydWN0b3IsIGluY2x1ZGluZyBWdWUsIGhhcyBhIHVuaXF1ZVxuICAgKiBjaWQuIFRoaXMgZW5hYmxlcyB1cyB0byBjcmVhdGUgd3JhcHBlZCBcImNoaWxkXG4gICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgKi9cbiAgVnVlLmNpZCA9IDA7XG4gIHZhciBjaWQgPSAxO1xuXG4gIC8qKlxuICAgKiBDbGFzcyBpbmhlcml0YW5jZVxuICAgKi9cbiAgVnVlLmV4dGVuZCA9IGZ1bmN0aW9uIChleHRlbmRPcHRpb25zKSB7XG4gICAgZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnMgfHwge307XG4gICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICB2YXIgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICB2YXIgY2FjaGVkQ3RvcnMgPSBleHRlbmRPcHRpb25zLl9DdG9yIHx8IChleHRlbmRPcHRpb25zLl9DdG9yID0ge30pO1xuICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgcmV0dXJuIGNhY2hlZEN0b3JzW1N1cGVySWRdXG4gICAgfVxuXG4gICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIG5hbWUpIHtcbiAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICAgIH07XG4gICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICBTdWIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU3ViO1xuICAgIFN1Yi5jaWQgPSBjaWQrKztcbiAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgIFN1cGVyLm9wdGlvbnMsXG4gICAgICBleHRlbmRPcHRpb25zXG4gICAgKTtcbiAgICBTdWJbJ3N1cGVyJ10gPSBTdXBlcjtcblxuICAgIC8vIEZvciBwcm9wcyBhbmQgY29tcHV0ZWQgcHJvcGVydGllcywgd2UgZGVmaW5lIHRoZSBwcm94eSBnZXR0ZXJzIG9uXG4gICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAvLyBhdm9pZHMgT2JqZWN0LmRlZmluZVByb3BlcnR5IGNhbGxzIGZvciBlYWNoIGluc3RhbmNlIGNyZWF0ZWQuXG4gICAgaWYgKFN1Yi5vcHRpb25zLnByb3BzKSB7XG4gICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgIH1cbiAgICBpZiAoU3ViLm9wdGlvbnMuY29tcHV0ZWQpIHtcbiAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgZnVydGhlciBleHRlbnNpb24vbWl4aW4vcGx1Z2luIHVzYWdlXG4gICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICBTdWIubWl4aW4gPSBTdXBlci5taXhpbjtcbiAgICBTdWIudXNlID0gU3VwZXIudXNlO1xuXG4gICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgIC8vIGNhbiBoYXZlIHRoZWlyIHByaXZhdGUgYXNzZXRzIHRvby5cbiAgICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICB9KTtcbiAgICAvLyBlbmFibGUgcmVjdXJzaXZlIHNlbGYtbG9va3VwXG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIFN1Yi5vcHRpb25zLmNvbXBvbmVudHNbbmFtZV0gPSBTdWI7XG4gICAgfVxuXG4gICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAvLyBsYXRlciBhdCBpbnN0YW50aWF0aW9uIHdlIGNhbiBjaGVjayBpZiBTdXBlcidzIG9wdGlvbnMgaGF2ZVxuICAgIC8vIGJlZW4gdXBkYXRlZC5cbiAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICBTdWIuZXh0ZW5kT3B0aW9ucyA9IGV4dGVuZE9wdGlvbnM7XG4gICAgU3ViLnNlYWxlZE9wdGlvbnMgPSBleHRlbmQoe30sIFN1Yi5vcHRpb25zKTtcblxuICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgY2FjaGVkQ3RvcnNbU3VwZXJJZF0gPSBTdWI7XG4gICAgcmV0dXJuIFN1YlxuICB9O1xufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMkMSAoQ29tcCkge1xuICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgIHByb3h5KENvbXAucHJvdG90eXBlLCBcIl9wcm9wc1wiLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgZGVmaW5lQ29tcHV0ZWQoQ29tcC5wcm90b3R5cGUsIGtleSwgY29tcHV0ZWRba2V5XSk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYXNzZXQgcmVnaXN0cmF0aW9uIG1ldGhvZHMuXG4gICAqL1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlW3R5cGVdID0gZnVuY3Rpb24gKFxuICAgICAgaWQsXG4gICAgICBkZWZpbml0aW9uXG4gICAgKSB7XG4gICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0eXBlICsgJ3MnXVtpZF1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgdmFyIGNhY2hlID0ga2VlcEFsaXZlSW5zdGFuY2UuY2FjaGU7XG4gIHZhciBrZXlzID0ga2VlcEFsaXZlSW5zdGFuY2Uua2V5cztcbiAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgZm9yICh2YXIga2V5IGluIGNhY2hlKSB7XG4gICAgdmFyIGNhY2hlZE5vZGUgPSBjYWNoZVtrZXldO1xuICAgIGlmIChjYWNoZWROb2RlKSB7XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICB2YXIgY2FjaGVkJCQxID0gY2FjaGVba2V5XTtcbiAgaWYgKGNhY2hlZCQkMSAmJiAoIWN1cnJlbnQgfHwgY2FjaGVkJCQxLnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgY2FjaGVkJCQxLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gIH1cbiAgY2FjaGVba2V5XSA9IG51bGw7XG4gIHJlbW92ZShrZXlzLCBrZXkpO1xufVxuXG52YXIgcGF0dGVyblR5cGVzID0gW1N0cmluZywgUmVnRXhwLCBBcnJheV07XG5cbnZhciBLZWVwQWxpdmUgPSB7XG4gIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcHJvcHM6IHtcbiAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgZXhjbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIG1heDogW1N0cmluZywgTnVtYmVyXVxuICB9LFxuXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQgKCkge1xuICAgIHRoaXMuY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHRoaXMua2V5cyA9IFtdO1xuICB9LFxuXG4gIGRlc3Ryb3llZDogZnVuY3Rpb24gZGVzdHJveWVkICgpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgcHJ1bmVDYWNoZUVudHJ5KHRoaXMuY2FjaGUsIGtleSwgdGhpcy5rZXlzKTtcbiAgICB9XG4gIH0sXG5cbiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB0aGlzLiR3YXRjaCgnaW5jbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gbWF0Y2hlcyh2YWwsIG5hbWUpOyB9KTtcbiAgICB9KTtcbiAgICB0aGlzLiR3YXRjaCgnZXhjbHVkZScsIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcyQxLCBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gIW1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgfSk7XG4gIH0sXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICB2YXIgdm5vZGUgPSBnZXRGaXJzdENvbXBvbmVudENoaWxkKHNsb3QpO1xuICAgIHZhciBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lKGNvbXBvbmVudE9wdGlvbnMpO1xuICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICB2YXIgaW5jbHVkZSA9IHJlZi5pbmNsdWRlO1xuICAgICAgdmFyIGV4Y2x1ZGUgPSByZWYuZXhjbHVkZTtcbiAgICAgIGlmIChcbiAgICAgICAgLy8gbm90IGluY2x1ZGVkXG4gICAgICAgIChpbmNsdWRlICYmICghbmFtZSB8fCAhbWF0Y2hlcyhpbmNsdWRlLCBuYW1lKSkpIHx8XG4gICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgIChleGNsdWRlICYmIG5hbWUgJiYgbWF0Y2hlcyhleGNsdWRlLCBuYW1lKSlcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZiQxID0gdGhpcztcbiAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgdmFyIGtleXMgPSByZWYkMS5rZXlzO1xuICAgICAgdmFyIGtleSA9IHZub2RlLmtleSA9PSBudWxsXG4gICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgIC8vIHNvIGNpZCBhbG9uZSBpcyBub3QgZW5vdWdoICgjMzI2OSlcbiAgICAgICAgPyBjb21wb25lbnRPcHRpb25zLkN0b3IuY2lkICsgKGNvbXBvbmVudE9wdGlvbnMudGFnID8gKFwiOjpcIiArIChjb21wb25lbnRPcHRpb25zLnRhZykpIDogJycpXG4gICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgaWYgKGNhY2hlW2tleV0pIHtcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBjYWNoZVtrZXldLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgIHJlbW92ZShrZXlzLCBrZXkpO1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhY2hlW2tleV0gPSB2bm9kZTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIC8vIHBydW5lIG9sZGVzdCBlbnRyeVxuICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICBwcnVuZUNhY2hlRW50cnkoY2FjaGUsIGtleXNbMF0sIGtleXMsIHRoaXMuX3Zub2RlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZSB8fCAoc2xvdCAmJiBzbG90WzBdKVxuICB9XG59O1xuXG52YXIgYnVpbHRJbkNvbXBvbmVudHMgPSB7XG4gIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gIC8vIGNvbmZpZ1xuICB2YXIgY29uZmlnRGVmID0ge307XG4gIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm46IHdhcm4sXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgbWVyZ2VPcHRpb25zOiBtZXJnZU9wdGlvbnMsXG4gICAgZGVmaW5lUmVhY3RpdmU6IGRlZmluZVJlYWN0aXZlJCQxXG4gIH07XG5cbiAgVnVlLnNldCA9IHNldDtcbiAgVnVlLmRlbGV0ZSA9IGRlbDtcbiAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgLy8gMi42IGV4cGxpY2l0IG9ic2VydmFibGUgQVBJXG4gIFZ1ZS5vYnNlcnZhYmxlID0gZnVuY3Rpb24gKG9iaikge1xuICAgIG9ic2VydmUob2JqKTtcbiAgICByZXR1cm4gb2JqXG4gIH07XG5cbiAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBBU1NFVF9UWVBFUy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiB0aGlzLiR2bm9kZSAmJiB0aGlzLiR2bm9kZS5zc3JDb250ZXh0XG4gIH1cbn0pO1xuXG4vLyBleHBvc2UgRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgZm9yIHNzciBydW50aW1lIGhlbHBlciBpbnN0YWxsYXRpb25cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgdmFsdWU6IEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0XG59KTtcblxuVnVlLnZlcnNpb24gPSAnMi42LjEyJztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG52YXIgaXNSZXNlcnZlZEF0dHIgPSBtYWtlTWFwKCdzdHlsZSxjbGFzcycpO1xuXG4vLyBhdHRyaWJ1dGVzIHRoYXQgc2hvdWxkIGJlIHVzaW5nIHByb3BzIGZvciBiaW5kaW5nXG52YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG52YXIgbXVzdFVzZVByb3AgPSBmdW5jdGlvbiAodGFnLCB0eXBlLCBhdHRyKSB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxudmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxudmFyIGlzVmFsaWRDb250ZW50RWRpdGFibGVWYWx1ZSA9IG1ha2VNYXAoJ2V2ZW50cyxjYXJldCx0eXBpbmcscGxhaW50ZXh0LW9ubHknKTtcblxudmFyIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbnZhciBpc0Jvb2xlYW5BdHRyID0gbWFrZU1hcChcbiAgJ2FsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsJyArXG4gICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICdlbmFibGVkLGZvcm1ub3ZhbGlkYXRlLGhpZGRlbixpbmRldGVybWluYXRlLGluZXJ0LGlzbWFwLGl0ZW1zY29wZSxsb29wLG11bHRpcGxlLCcgK1xuICAnbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSwnICtcbiAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSx0cmFuc2xhdGUsJyArXG4gICd0cnVlc3BlZWQsdHlwZW11c3RtYXRjaCx2aXNpYmxlJ1xuKTtcblxudmFyIHhsaW5rTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayc7XG5cbnZhciBpc1hsaW5rID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxudmFyIGdldFhsaW5rUHJvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xufTtcblxudmFyIGlzRmFsc3lBdHRyVmFsdWUgPSBmdW5jdGlvbiAodmFsKSB7XG4gIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgcGFyZW50Tm9kZSA9IHZub2RlO1xuICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gIHdoaWxlIChpc0RlZihjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpKSB7XG4gICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICBkYXRhID0gbWVyZ2VDbGFzc0RhdGEoY2hpbGROb2RlLmRhdGEsIGRhdGEpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoaXNEZWYocGFyZW50Tm9kZSA9IHBhcmVudE5vZGUucGFyZW50KSkge1xuICAgIGlmIChwYXJlbnROb2RlICYmIHBhcmVudE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxufVxuXG5mdW5jdGlvbiBtZXJnZUNsYXNzRGF0YSAoY2hpbGQsIHBhcmVudCkge1xuICByZXR1cm4ge1xuICAgIHN0YXRpY0NsYXNzOiBjb25jYXQoY2hpbGQuc3RhdGljQ2xhc3MsIHBhcmVudC5zdGF0aWNDbGFzcyksXG4gICAgY2xhc3M6IGlzRGVmKGNoaWxkLmNsYXNzKVxuICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgIDogcGFyZW50LmNsYXNzXG4gIH1cbn1cblxuZnVuY3Rpb24gcmVuZGVyQ2xhc3MgKFxuICBzdGF0aWNDbGFzcyxcbiAgZHluYW1pY0NsYXNzXG4pIHtcbiAgaWYgKGlzRGVmKHN0YXRpY0NsYXNzKSB8fCBpc0RlZihkeW5hbWljQ2xhc3MpKSB7XG4gICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gY29uY2F0IChhLCBiKSB7XG4gIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUNsYXNzICh2YWx1ZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5QXJyYXkodmFsdWUpXG4gIH1cbiAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBzdHJpbmdpZnlPYmplY3QodmFsdWUpXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICByZXR1cm4gJydcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgdmFyIHN0cmluZ2lmaWVkO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGlmIChpc0RlZihzdHJpbmdpZmllZCA9IHN0cmluZ2lmeUNsYXNzKHZhbHVlW2ldKSkgJiYgc3RyaW5naWZpZWQgIT09ICcnKSB7XG4gICAgICBpZiAocmVzKSB7IHJlcyArPSAnICc7IH1cbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIHZhciByZXMgPSAnJztcbiAgZm9yICh2YXIga2V5IGluIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlW2tleV0pIHtcbiAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgcmVzICs9IGtleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxudmFyIG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbnZhciBpc0hUTUxUYWcgPSBtYWtlTWFwKFxuICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICdhZGRyZXNzLGFydGljbGUsYXNpZGUsZm9vdGVyLGhlYWRlcixoMSxoMixoMyxoNCxoNSxoNixoZ3JvdXAsbmF2LHNlY3Rpb24sJyArXG4gICdkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCwnICtcbiAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgJ3Msc2FtcCxzbWFsbCxzcGFuLHN0cm9uZyxzdWIsc3VwLHRpbWUsdSx2YXIsd2JyLGFyZWEsYXVkaW8sbWFwLHRyYWNrLHZpZGVvLCcgK1xuICAnZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsJyArXG4gICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgJ2J1dHRvbixkYXRhbGlzdCxmaWVsZHNldCxmb3JtLGlucHV0LGxhYmVsLGxlZ2VuZCxtZXRlcixvcHRncm91cCxvcHRpb24sJyArXG4gICdvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLCcgK1xuICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAnY29udGVudCxlbGVtZW50LHNoYWRvdyx0ZW1wbGF0ZSxibG9ja3F1b3RlLGlmcmFtZSx0Zm9vdCdcbik7XG5cbi8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuLy8gY29udGFpbiBjaGlsZCBlbGVtZW50cy5cbnZhciBpc1NWRyA9IG1ha2VNYXAoXG4gICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICdmb3JlaWduT2JqZWN0LGcsZ2x5cGgsaW1hZ2UsbGluZSxtYXJrZXIsbWFzayxtaXNzaW5nLWdseXBoLHBhdGgscGF0dGVybiwnICtcbiAgJ3BvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXcnLFxuICB0cnVlXG4pO1xuXG52YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgcmV0dXJuIGlzSFRNTFRhZyh0YWcpIHx8IGlzU1ZHKHRhZylcbn07XG5cbmZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gIGlmIChpc1NWRyh0YWcpKSB7XG4gICAgcmV0dXJuICdzdmcnXG4gIH1cbiAgLy8gYmFzaWMgc3VwcG9ydCBmb3IgTWF0aE1MXG4gIC8vIG5vdGUgaXQgZG9lc24ndCBzdXBwb3J0IG90aGVyIE1hdGhNTCBlbGVtZW50cyBiZWluZyBjb21wb25lbnQgcm9vdHNcbiAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgcmV0dXJuICdtYXRoJ1xuICB9XG59XG5cbnZhciB1bmtub3duRWxlbWVudENhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbmZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQgKHRhZykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFpbkJyb3dzZXIpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIGlmIChpc1Jlc2VydmVkVGFnKHRhZykpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICB0YWcgPSB0YWcudG9Mb3dlckNhc2UoKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgIHJldHVybiB1bmtub3duRWxlbWVudENhY2hlW3RhZ11cbiAgfVxuICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbnZhciBpc1RleHRJbnB1dFR5cGUgPSBtYWtlTWFwKCd0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCcpO1xuXG4vKiAgKi9cblxuLyoqXG4gKiBRdWVyeSBhbiBlbGVtZW50IHNlbGVjdG9yIGlmIGl0J3Mgbm90IGFuIGVsZW1lbnQgYWxyZWFkeS5cbiAqL1xuZnVuY3Rpb24gcXVlcnkgKGVsKSB7XG4gIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgaWYgKCFzZWxlY3RlZCkge1xuICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiB3YXJuKFxuICAgICAgICAnQ2Fubm90IGZpbmQgZWxlbWVudDogJyArIGVsXG4gICAgICApO1xuICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgfVxuICAgIHJldHVybiBzZWxlY3RlZFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBlbFxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gIHZhciBlbG0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICBpZiAodGFnTmFtZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gZWxtXG4gIH1cbiAgLy8gZmFsc2Ugb3IgbnVsbCB3aWxsIHJlbW92ZSB0aGUgYXR0cmlidXRlIGJ1dCB1bmRlZmluZWQgd2lsbCBub3RcbiAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbG0uc2V0QXR0cmlidXRlKCdtdWx0aXBsZScsICdtdWx0aXBsZScpO1xuICB9XG4gIHJldHVybiBlbG1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudE5TIChuYW1lc3BhY2UsIHRhZ05hbWUpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbn1cblxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1lbnQgKHRleHQpIHtcbiAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbn1cblxuZnVuY3Rpb24gaW5zZXJ0QmVmb3JlIChwYXJlbnROb2RlLCBuZXdOb2RlLCByZWZlcmVuY2VOb2RlKSB7XG4gIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkIChub2RlLCBjaGlsZCkge1xuICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cblxuZnVuY3Rpb24gcGFyZW50Tm9kZSAobm9kZSkge1xuICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG59XG5cbmZ1bmN0aW9uIG5leHRTaWJsaW5nIChub2RlKSB7XG4gIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG59XG5cbmZ1bmN0aW9uIHRhZ05hbWUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZVxufVxuXG5mdW5jdGlvbiBzZXRUZXh0Q29udGVudCAobm9kZSwgdGV4dCkge1xuICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbn1cblxuZnVuY3Rpb24gc2V0U3R5bGVTY29wZSAobm9kZSwgc2NvcGVJZCkge1xuICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG59XG5cbnZhciBub2RlT3BzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gIGNyZWF0ZUVsZW1lbnROUzogY3JlYXRlRWxlbWVudE5TLFxuICBjcmVhdGVUZXh0Tm9kZTogY3JlYXRlVGV4dE5vZGUsXG4gIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gIGluc2VydEJlZm9yZTogaW5zZXJ0QmVmb3JlLFxuICByZW1vdmVDaGlsZDogcmVtb3ZlQ2hpbGQsXG4gIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgcGFyZW50Tm9kZTogcGFyZW50Tm9kZSxcbiAgbmV4dFNpYmxpbmc6IG5leHRTaWJsaW5nLFxuICB0YWdOYW1lOiB0YWdOYW1lLFxuICBzZXRUZXh0Q29udGVudDogc2V0VGV4dENvbnRlbnQsXG4gIHNldFN0eWxlU2NvcGU6IHNldFN0eWxlU2NvcGVcbn0pO1xuXG4vKiAgKi9cblxudmFyIHJlZiA9IHtcbiAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICB9LFxuICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIHZhciBrZXkgPSB2bm9kZS5kYXRhLnJlZjtcbiAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgdmFyIHZtID0gdm5vZGUuY29udGV4dDtcbiAgdmFyIHJlZiA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIHx8IHZub2RlLmVsbTtcbiAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgaWYgKGlzUmVtb3ZhbCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgfSBlbHNlIGlmIChyZWZzW2tleV0gPT09IHJlZikge1xuICAgICAgcmVmc1trZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAodm5vZGUuZGF0YS5yZWZJbkZvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgcmVmc1trZXldID0gW3JlZl07XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XS5pbmRleE9mKHJlZikgPCAwKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICByZWZzW2tleV0ucHVzaChyZWYpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWZzW2tleV0gPSByZWY7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gKiBTaW1vbiBGcmlpcyBWaW5kdW0gKEBwYWxkZXBpbmQpXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICpcbiAqIG1vZGlmaWVkIGJ5IEV2YW4gWW91IChAeXl4OTkwODAzKVxuICpcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgYmVjYXVzZSB0aGlzIGZpbGUgaXMgcGVyZi1jcml0aWNhbCBhbmQgdGhlIGNvc3RcbiAqIG9mIG1ha2luZyBmbG93IHVuZGVyc3RhbmQgaXQgaXMgbm90IHdvcnRoIGl0LlxuICovXG5cbnZhciBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbnZhciBob29rcyA9IFsnY3JlYXRlJywgJ2FjdGl2YXRlJywgJ3VwZGF0ZScsICdyZW1vdmUnLCAnZGVzdHJveSddO1xuXG5mdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgcmV0dXJuIChcbiAgICBhLmtleSA9PT0gYi5rZXkgJiYgKFxuICAgICAgKFxuICAgICAgICBhLnRhZyA9PT0gYi50YWcgJiZcbiAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgIGlzRGVmKGEuZGF0YSkgPT09IGlzRGVmKGIuZGF0YSkgJiZcbiAgICAgICAgc2FtZUlucHV0VHlwZShhLCBiKVxuICAgICAgKSB8fCAoXG4gICAgICAgIGlzVHJ1ZShhLmlzQXN5bmNQbGFjZWhvbGRlcikgJiZcbiAgICAgICAgYS5hc3luY0ZhY3RvcnkgPT09IGIuYXN5bmNGYWN0b3J5ICYmXG4gICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbmZ1bmN0aW9uIHNhbWVJbnB1dFR5cGUgKGEsIGIpIHtcbiAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgdmFyIGk7XG4gIHZhciB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIHJldHVybiB0eXBlQSA9PT0gdHlwZUIgfHwgaXNUZXh0SW5wdXRUeXBlKHR5cGVBKSAmJiBpc1RleHRJbnB1dFR5cGUodHlwZUIpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICB2YXIgaSwga2V5O1xuICB2YXIgbWFwID0ge307XG4gIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAga2V5ID0gY2hpbGRyZW5baV0ua2V5O1xuICAgIGlmIChpc0RlZihrZXkpKSB7IG1hcFtrZXldID0gaTsgfVxuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICB2YXIgaSwgajtcbiAgdmFyIGNicyA9IHt9O1xuXG4gIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICB2YXIgbm9kZU9wcyA9IGJhY2tlbmQubm9kZU9wcztcblxuICBmb3IgKGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyArK2kpIHtcbiAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgZm9yIChqID0gMDsgaiA8IG1vZHVsZXMubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChpc0RlZihtb2R1bGVzW2pdW2hvb2tzW2ldXSkpIHtcbiAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBlbXB0eU5vZGVBdCAoZWxtKSB7XG4gICAgcmV0dXJuIG5ldyBWTm9kZShub2RlT3BzLnRhZ05hbWUoZWxtKS50b0xvd2VyQ2FzZSgpLCB7fSwgW10sIHVuZGVmaW5lZCwgZWxtKVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUm1DYiAoY2hpbGRFbG0sIGxpc3RlbmVycykge1xuICAgIGZ1bmN0aW9uIHJlbW92ZSQkMSAoKSB7XG4gICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgIHJlbW92ZU5vZGUoY2hpbGRFbG0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZW1vdmUkJDEubGlzdGVuZXJzID0gbGlzdGVuZXJzO1xuICAgIHJldHVybiByZW1vdmUkJDFcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZU5vZGUgKGVsKSB7XG4gICAgdmFyIHBhcmVudCA9IG5vZGVPcHMucGFyZW50Tm9kZShlbCk7XG4gICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgIG5vZGVPcHMucmVtb3ZlQ2hpbGQocGFyZW50LCBlbCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmtub3duRWxlbWVudCQkMSAodm5vZGUsIGluVlByZSkge1xuICAgIHJldHVybiAoXG4gICAgICAhaW5WUHJlICYmXG4gICAgICAhdm5vZGUubnMgJiZcbiAgICAgICEoXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMubGVuZ3RoICYmXG4gICAgICAgIGNvbmZpZy5pZ25vcmVkRWxlbWVudHMuc29tZShmdW5jdGlvbiAoaWdub3JlKSB7XG4gICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgID8gaWdub3JlLnRlc3Qodm5vZGUudGFnKVxuICAgICAgICAgICAgOiBpZ25vcmUgPT09IHZub2RlLnRhZ1xuICAgICAgICB9KVxuICAgICAgKSAmJlxuICAgICAgY29uZmlnLmlzVW5rbm93bkVsZW1lbnQodm5vZGUudGFnKVxuICAgIClcbiAgfVxuXG4gIHZhciBjcmVhdGluZ0VsbUluVlByZSA9IDA7XG5cbiAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgcGFyZW50RWxtLFxuICAgIHJlZkVsbSxcbiAgICBuZXN0ZWQsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleFxuICApIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgLy8gVGhpcyB2bm9kZSB3YXMgdXNlZCBpbiBhIHByZXZpb3VzIHJlbmRlciFcbiAgICAgIC8vIG5vdyBpdCdzIHVzZWQgYXMgYSBuZXcgbm9kZSwgb3ZlcndyaXRpbmcgaXRzIGVsbSB3b3VsZCBjYXVzZVxuICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgLy8gcmVmZXJlbmNlIG5vZGUuIEluc3RlYWQsIHdlIGNsb25lIHRoZSBub2RlIG9uLWRlbWFuZCBiZWZvcmUgY3JlYXRpbmdcbiAgICAgIC8vIGFzc29jaWF0ZWQgRE9NIGVsZW1lbnQgZm9yIGl0LlxuICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgIH1cblxuICAgIHZub2RlLmlzUm9vdEluc2VydCA9ICFuZXN0ZWQ7IC8vIGZvciB0cmFuc2l0aW9uIGVudGVyIGNoZWNrXG4gICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlKys7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnVW5rbm93biBjdXN0b20gZWxlbWVudDogPCcgKyB0YWcgKyAnPiAtIGRpZCB5b3UgJyArXG4gICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAnbWFrZSBzdXJlIHRvIHByb3ZpZGUgdGhlIFwibmFtZVwiIG9wdGlvbi4nLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgPyBub2RlT3BzLmNyZWF0ZUVsZW1lbnROUyh2bm9kZS5ucywgdGFnKVxuICAgICAgICA6IG5vZGVPcHMuY3JlYXRlRWxlbWVudCh0YWcsIHZub2RlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJyAmJiBkYXRhICYmIGRhdGEucHJlKSB7XG4gICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSkge1xuICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICB2YXIgaXNSZWFjdGl2YXRlZCA9IGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpLmtlZXBBbGl2ZTtcbiAgICAgIGlmIChpc0RlZihpID0gaS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkge1xuICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgfVxuICAgICAgLy8gYWZ0ZXIgY2FsbGluZyB0aGUgaW5pdCBob29rLCBpZiB0aGUgdm5vZGUgaXMgYSBjaGlsZCBjb21wb25lbnRcbiAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgLy8gY29tcG9uZW50IGFsc28gaGFzIHNldCB0aGUgcGxhY2Vob2xkZXIgdm5vZGUncyBlbG0uXG4gICAgICAvLyBpbiB0aGF0IGNhc2Ugd2UgY2FuIGp1c3QgcmV0dXJuIHRoZSBlbGVtZW50IGFuZCBiZSBkb25lLlxuICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICByZWFjdGl2YXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KSkge1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gbnVsbDtcbiAgICB9XG4gICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgIGlmIChpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbXB0eSBjb21wb25lbnQgcm9vdC5cbiAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlKTtcbiAgICAgIC8vIG1ha2Ugc3VyZSB0byBpbnZva2UgdGhlIGluc2VydCBob29rXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICB2YXIgaTtcbiAgICAvLyBoYWNrIGZvciAjNDMzOTogYSByZWFjdGl2YXRlZCBjb21wb25lbnQgd2l0aCBpbm5lciB0cmFuc2l0aW9uXG4gICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgIC8vIGFnYWluLiBJdCdzIG5vdCBpZGVhbCB0byBpbnZvbHZlIG1vZHVsZS1zcGVjaWZpYyBsb2dpYyBpbiBoZXJlIGJ1dFxuICAgIC8vIHRoZXJlIGRvZXNuJ3Qgc2VlbSB0byBiZSBhIGJldHRlciB3YXkgdG8gZG8gaXQuXG4gICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgIHdoaWxlIChpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIGlubmVyTm9kZSA9IGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmFjdGl2YXRlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgY2JzLmFjdGl2YXRlW2ldKGVtcHR5Tm9kZSwgaW5uZXJOb2RlKTtcbiAgICAgICAgfVxuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaChpbm5lck5vZGUpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAvLyB1bmxpa2UgYSBuZXdseSBjcmVhdGVkIGNvbXBvbmVudCxcbiAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBpZiAoaXNEZWYocmVmJCQxKSkge1xuICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudCwgZWxtLCByZWYkJDEpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHBhcmVudCwgZWxtKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZHJlbiAodm5vZGUsIGNoaWxkcmVuLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjYnMuY3JlYXRlLmxlbmd0aDsgKytpJDEpIHtcbiAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICB9XG4gICAgaSA9IHZub2RlLmRhdGEuaG9vazsgLy8gUmV1c2UgdmFyaWFibGVcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIHsgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpOyB9XG4gICAgfVxuICB9XG5cbiAgLy8gc2V0IHNjb3BlIGlkIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIENTUy5cbiAgLy8gdGhpcyBpcyBpbXBsZW1lbnRlZCBhcyBhIHNwZWNpYWwgY2FzZSB0byBhdm9pZCB0aGUgb3ZlcmhlYWRcbiAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICBmdW5jdGlvbiBzZXRTY29wZSAodm5vZGUpIHtcbiAgICB2YXIgaTtcbiAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGFuY2VzdG9yLmNvbnRleHQpICYmIGlzRGVmKGkgPSBpLiRvcHRpb25zLl9zY29wZUlkKSkge1xuICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICB9XG4gICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBmb3Igc2xvdCBjb250ZW50IHRoZXkgc2hvdWxkIGFsc28gZ2V0IHRoZSBzY29wZUlkIGZyb20gdGhlIGhvc3QgaW5zdGFuY2UuXG4gICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgIGkgIT09IHZub2RlLmNvbnRleHQgJiZcbiAgICAgIGkgIT09IHZub2RlLmZuQ29udGV4dCAmJlxuICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgKSB7XG4gICAgICBub2RlT3BzLnNldFN0eWxlU2NvcGUodm5vZGUuZWxtLCBpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGRWbm9kZXMgKHBhcmVudEVsbSwgcmVmRWxtLCB2bm9kZXMsIHN0YXJ0SWR4LCBlbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZXNbc3RhcnRJZHhdLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtLCBmYWxzZSwgdm5vZGVzLCBzdGFydElkeCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlRGVzdHJveUhvb2sgKHZub2RlKSB7XG4gICAgdmFyIGksIGo7XG4gICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmRlc3Ryb3kpKSB7IGkodm5vZGUpOyB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc0RlZihpID0gdm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgaW52b2tlRGVzdHJveUhvb2sodm5vZGUuY2hpbGRyZW5bal0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVZub2RlcyAodm5vZGVzLCBzdGFydElkeCwgZW5kSWR4KSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgdmFyIGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgIGlmIChpc0RlZihybSkpIHtcbiAgICAgICAgLy8gd2UgaGF2ZSBhIHJlY3Vyc2l2ZWx5IHBhc3NlZCBkb3duIHJtIGNhbGxiYWNrXG4gICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgcm0ubGlzdGVuZXJzICs9IGxpc3RlbmVycztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgIHJtID0gY3JlYXRlUm1DYih2bm9kZS5lbG0sIGxpc3RlbmVycyk7XG4gICAgICB9XG4gICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaXNEZWYoaSA9IGkuX3Zub2RlKSAmJiBpc0RlZihpLmRhdGEpKSB7XG4gICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soaSwgcm0pO1xuICAgICAgfVxuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5yZW1vdmUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY2JzLnJlbW92ZVtpXSh2bm9kZSwgcm0pO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5kYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnJlbW92ZSkpIHtcbiAgICAgICAgaSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlTm9kZSh2bm9kZS5lbG0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuIChwYXJlbnRFbG0sIG9sZENoLCBuZXdDaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KSB7XG4gICAgdmFyIG9sZFN0YXJ0SWR4ID0gMDtcbiAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgIHZhciBvbGRFbmRJZHggPSBvbGRDaC5sZW5ndGggLSAxO1xuICAgIHZhciBvbGRTdGFydFZub2RlID0gb2xkQ2hbMF07XG4gICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICB2YXIgbmV3RW5kSWR4ID0gbmV3Q2gubGVuZ3RoIC0gMTtcbiAgICB2YXIgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWzBdO1xuICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgdmFyIG9sZEtleVRvSWR4LCBpZHhJbk9sZCwgdm5vZGVUb01vdmUsIHJlZkVsbTtcblxuICAgIC8vIHJlbW92ZU9ubHkgaXMgYSBzcGVjaWFsIGZsYWcgdXNlZCBvbmx5IGJ5IDx0cmFuc2l0aW9uLWdyb3VwPlxuICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAvLyBkdXJpbmcgbGVhdmluZyB0cmFuc2l0aW9uc1xuICAgIHZhciBjYW5Nb3ZlID0gIXJlbW92ZU9ubHk7XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSB7IG9sZEtleVRvSWR4ID0gY3JlYXRlS2V5VG9PbGRJZHgob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpOyB9XG4gICAgICAgIGlkeEluT2xkID0gaXNEZWYobmV3U3RhcnRWbm9kZS5rZXkpXG4gICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICA6IGZpbmRJZHhJbk9sZChuZXdTdGFydFZub2RlLCBvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICAgIGlmIChpc1VuZGVmKGlkeEluT2xkKSkgeyAvLyBOZXcgZWxlbWVudFxuICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZub2RlVG9Nb3ZlID0gb2xkQ2hbaWR4SW5PbGRdO1xuICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICBwYXRjaFZub2RlKHZub2RlVG9Nb3ZlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgICBvbGRDaFtpZHhJbk9sZF0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHNhbWUga2V5IGJ1dCBkaWZmZXJlbnQgZWxlbWVudC4gdHJlYXQgYXMgbmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgcmVmRWxtID0gaXNVbmRlZihuZXdDaFtuZXdFbmRJZHggKyAxXSkgPyBudWxsIDogbmV3Q2hbbmV3RW5kSWR4ICsgMV0uZWxtO1xuICAgICAgYWRkVm5vZGVzKHBhcmVudEVsbSwgcmVmRWxtLCBuZXdDaCwgbmV3U3RhcnRJZHgsIG5ld0VuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIG9sZFN0YXJ0SWR4LCBvbGRFbmRJZHgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRHVwbGljYXRlS2V5cyAoY2hpbGRyZW4pIHtcbiAgICB2YXIgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdm5vZGUgPSBjaGlsZHJlbltpXTtcbiAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICBpZiAoc2VlbktleXNba2V5XSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2VlbktleXNba2V5XSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpKyspIHtcbiAgICAgIHZhciBjID0gb2xkQ2hbaV07XG4gICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZShvbGRWbm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIpKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuYXN5bmNGYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgIC8vIG5vdGUgd2Ugb25seSBkbyB0aGlzIGlmIHRoZSB2bm9kZSBpcyBjbG9uZWQgLVxuICAgIC8vIGlmIHRoZSBuZXcgbm9kZSBpcyBub3QgY2xvbmVkIGl0IG1lYW5zIHRoZSByZW5kZXIgZnVuY3Rpb25zIGhhdmUgYmVlblxuICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIGlzVHJ1ZShvbGRWbm9kZS5pc1N0YXRpYykgJiZcbiAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAoaXNUcnVlKHZub2RlLmlzQ2xvbmVkKSB8fCBpc1RydWUodm5vZGUuaXNPbmNlKSlcbiAgICApIHtcbiAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnByZXBhdGNoKSkge1xuICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc1BhdGNoYWJsZSh2bm9kZSkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMudXBkYXRlLmxlbmd0aDsgKytpKSB7IGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB7IHVwZGF0ZUNoaWxkcmVuKGVsbSwgb2xkQ2gsIGNoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpOyB9XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7IG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7IH1cbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMob2xkQ2gsIDAsIG9sZENoLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob2xkVm5vZGUudGV4dCAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgIH1cbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgIC8vIGRlbGF5IGluc2VydCBob29rcyBmb3IgY29tcG9uZW50IHJvb3Qgbm9kZXMsIGludm9rZSB0aGVtIGFmdGVyIHRoZVxuICAgIC8vIGVsZW1lbnQgaXMgcmVhbGx5IGluc2VydGVkXG4gICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICB2bm9kZS5wYXJlbnQuZGF0YS5wZW5kaW5nSW5zZXJ0ID0gcXVldWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgcXVldWVbaV0uZGF0YS5ob29rLmluc2VydChxdWV1ZVtpXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGh5ZHJhdGlvbkJhaWxlZCA9IGZhbHNlO1xuICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAvLyBhcmUgYWxyZWFkeSByZW5kZXJlZCBvbiB0aGUgY2xpZW50IG9yIGhhcyBubyBuZWVkIGZvciBpbml0aWFsaXphdGlvblxuICAvLyBOb3RlOiBzdHlsZSBpcyBleGNsdWRlZCBiZWNhdXNlIGl0IHJlbGllcyBvbiBpbml0aWFsIGNsb25lIGZvciBmdXR1cmVcbiAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gIHZhciBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdGFnID0gdm5vZGUudGFnO1xuICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICB2YXIgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBpblZQcmUgPSBpblZQcmUgfHwgKGRhdGEgJiYgZGF0YS5wcmUpO1xuICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgIGlmIChpc1RydWUodm5vZGUuaXNDb21tZW50KSAmJiBpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkpKSB7XG4gICAgICB2bm9kZS5pc0FzeW5jUGxhY2Vob2xkZXIgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgLy8gYXNzZXJ0IG5vZGUgbWF0Y2hcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKCFhc3NlcnROb2RlTWF0Y2goZWxtLCB2bm9kZSwgaW5WUHJlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICBpZiAoaXNEZWYoaSA9IGRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHsgaSh2bm9kZSwgdHJ1ZSAvKiBoeWRyYXRpbmcgKi8pOyB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2NsaWVudCBpbm5lckhUTUw6ICcsIGVsbS5pbm5lckhUTUwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICB2YXIgY2hpbGRyZW5NYXRjaCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgY2hpbGROb2RlID0gZWxtLmZpcnN0Q2hpbGQ7XG4gICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgIGlmICghY2hpbGROb2RlIHx8ICFoeWRyYXRlKGNoaWxkTm9kZSwgY2hpbGRyZW5baSQxXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignTWlzbWF0Y2hpbmcgY2hpbGROb2RlcyB2cy4gVk5vZGVzOiAnLCBlbG0uY2hpbGROb2RlcywgY2hpbGRyZW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIHZhciBmdWxsSW52b2tlID0gZmFsc2U7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgIGZ1bGxJbnZva2UgPSB0cnVlO1xuICAgICAgICAgICAgaW52b2tlQ3JlYXRlSG9va3Modm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgIC8vIGVuc3VyZSBjb2xsZWN0aW5nIGRlcHMgZm9yIGRlZXAgY2xhc3MgYmluZGluZ3MgZm9yIGZ1dHVyZSB1cGRhdGVzXG4gICAgICAgICAgdHJhdmVyc2UoZGF0YVsnY2xhc3MnXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsbS5kYXRhICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnROb2RlTWF0Y2ggKG5vZGUsIHZub2RlLCBpblZQcmUpIHtcbiAgICBpZiAoaXNEZWYodm5vZGUudGFnKSkge1xuICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAhaXNVbmtub3duRWxlbWVudCQkMSh2bm9kZSwgaW5WUHJlKSAmJlxuICAgICAgICB2bm9kZS50YWcudG9Mb3dlckNhc2UoKSA9PT0gKG5vZGUudGFnTmFtZSAmJiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSlcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5vZGUubm9kZVR5cGUgPT09ICh2bm9kZS5pc0NvbW1lbnQgPyA4IDogMylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSwgaHlkcmF0aW5nLCByZW1vdmVPbmx5KSB7XG4gICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkVm5vZGUpKSB7IGludm9rZURlc3Ryb3lIb29rKG9sZFZub2RlKTsgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgdmFyIGluc2VydGVkVm5vZGVRdWV1ZSA9IFtdO1xuXG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAvLyBlbXB0eSBtb3VudCAobGlrZWx5IGFzIGNvbXBvbmVudCksIGNyZWF0ZSBuZXcgcm9vdCBlbGVtZW50XG4gICAgICBpc0luaXRpYWxQYXRjaCA9IHRydWU7XG4gICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpc1JlYWxFbGVtZW50ID0gaXNEZWYob2xkVm5vZGUubm9kZVR5cGUpO1xuICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgIC8vIHBhdGNoIGV4aXN0aW5nIHJvb3Qgbm9kZVxuICAgICAgICBwYXRjaFZub2RlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBudWxsLCBudWxsLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChpc1JlYWxFbGVtZW50KSB7XG4gICAgICAgICAgLy8gbW91bnRpbmcgdG8gYSByZWFsIGVsZW1lbnRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgIC8vIGEgc3VjY2Vzc2Z1bCBoeWRyYXRpb24uXG4gICAgICAgICAgaWYgKG9sZFZub2RlLm5vZGVUeXBlID09PSAxICYmIG9sZFZub2RlLmhhc0F0dHJpYnV0ZShTU1JfQVRUUikpIHtcbiAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICBoeWRyYXRpbmcgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgIGlmIChoeWRyYXRlKG9sZFZub2RlLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSkge1xuICAgICAgICAgICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHRydWUpO1xuICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgdmFyIG9sZEVsbSA9IG9sZFZub2RlLmVsbTtcbiAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBuZXcgbm9kZVxuICAgICAgICBjcmVhdGVFbG0oXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgICAgIC8vIGV4dHJlbWVseSByYXJlIGVkZ2UgY2FzZTogZG8gbm90IGluc2VydCBpZiBvbGQgZWxlbWVudCBpcyBpbiBhXG4gICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgLy8ga2VlcC1hbGl2ZSArIEhPQ3MuICgjNDU5MClcbiAgICAgICAgICBvbGRFbG0uX2xlYXZlQ2IgPyBudWxsIDogcGFyZW50RWxtLFxuICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBwYXJlbnQgcGxhY2Vob2xkZXIgbm9kZSBlbGVtZW50LCByZWN1cnNpdmVseVxuICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgIHZhciBhbmNlc3RvciA9IHZub2RlLnBhcmVudDtcbiAgICAgICAgICB2YXIgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaSQxXShlbXB0eU5vZGUsIGFuY2VzdG9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAvLyBpbnZva2UgaW5zZXJ0IGhvb2tzIHRoYXQgbWF5IGhhdmUgYmVlbiBtZXJnZWQgYnkgY3JlYXRlIGhvb2tzLlxuICAgICAgICAgICAgICAvLyBlLmcuIGZvciBkaXJlY3RpdmVzIHRoYXQgdXNlcyB0aGUgXCJpbnNlcnRlZFwiIGhvb2suXG4gICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpJDJdKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZWdpc3RlclJlZihhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZXN0cm95IG9sZCBub2RlXG4gICAgICAgIGlmIChpc0RlZihwYXJlbnRFbG0pKSB7XG4gICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gIHZhciBpc0Rlc3Ryb3kgPSB2bm9kZSA9PT0gZW1wdHlOb2RlO1xuICB2YXIgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gIHZhciBkaXJzV2l0aEluc2VydCA9IFtdO1xuICB2YXIgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhJbnNlcnRbaV0sICdpbnNlcnRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBpZiAoaXNDcmVhdGUpIHtcbiAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxJbnNlcnQoKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoKSB7XG4gICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyc1dpdGhQb3N0cGF0Y2hbaV0sICdjb21wb25lbnRVcGRhdGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICghaXNDcmVhdGUpIHtcbiAgICBmb3IgKGtleSBpbiBvbGREaXJzKSB7XG4gICAgICBpZiAoIW5ld0RpcnNba2V5XSkge1xuICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgIGNhbGxIb29rJDEob2xkRGlyc1trZXldLCAndW5iaW5kJywgb2xkVm5vZGUsIG9sZFZub2RlLCBpc0Rlc3Ryb3kpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzJDEgKFxuICBkaXJzLFxuICB2bVxuKSB7XG4gIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgdmFyIGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayQxIChkaXIsIGhvb2ssIHZub2RlLCBvbGRWbm9kZSwgaXNEZXN0cm95KSB7XG4gIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgKFwiZGlyZWN0aXZlIFwiICsgKGRpci5uYW1lKSArIFwiIFwiICsgaG9vayArIFwiIGhvb2tcIikpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgYmFzZU1vZHVsZXMgPSBbXG4gIHJlZixcbiAgZGlyZWN0aXZlc1xuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICB2YXIga2V5LCBjdXIsIG9sZDtcbiAgdmFyIGVsbSA9IHZub2RlLmVsbTtcbiAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgdmFyIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzID0gZXh0ZW5kKHt9LCBhdHRycyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgIGN1ciA9IGF0dHJzW2tleV07XG4gICAgb2xkID0gb2xkQXR0cnNba2V5XTtcbiAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgIHNldEF0dHIoZWxtLCBrZXksIGN1cik7XG4gICAgfVxuICB9XG4gIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gIC8vICM2NjY2OiBJRS9FZGdlIGZvcmNlcyBwcm9ncmVzcyB2YWx1ZSBkb3duIHRvIDEgYmVmb3JlIHNldHRpbmcgYSBtYXhcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgIHNldEF0dHIoZWxtLCAndmFsdWUnLCBhdHRycy52YWx1ZSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoaXNVbmRlZihhdHRyc1trZXldKSkge1xuICAgICAgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgfSBlbHNlIGlmICghaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0QXR0ciAoZWwsIGtleSwgdmFsdWUpIHtcbiAgaWYgKGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAoaXNCb29sZWFuQXR0cihrZXkpKSB7XG4gICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAvLyBlLmcuIDxvcHRpb24gZGlzYWJsZWQ+U2VsZWN0IG9uZTwvb3B0aW9uPlxuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRlY2huaWNhbGx5IGFsbG93ZnVsbHNjcmVlbiBpcyBhIGJvb2xlYW4gYXR0cmlidXRlIGZvciA8aWZyYW1lPixcbiAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICB2YWx1ZSA9IGtleSA9PT0gJ2FsbG93ZnVsbHNjcmVlbicgJiYgZWwudGFnTmFtZSA9PT0gJ0VNQkVEJ1xuICAgICAgICA/ICd0cnVlJ1xuICAgICAgICA6IGtleTtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgZWwuc2V0QXR0cmlidXRlKGtleSwgY29udmVydEVudW1lcmF0ZWRWYWx1ZShrZXksIHZhbHVlKSk7XG4gIH0gZWxzZSBpZiAoaXNYbGluayhrZXkpKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGVOUyh4bGlua05TLCBnZXRYbGlua1Byb3Aoa2V5KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICB9IGVsc2Uge1xuICAgIC8vICM3MTM4OiBJRTEwICYgMTEgZmlyZXMgaW5wdXQgZXZlbnQgd2hlbiBzZXR0aW5nIHBsYWNlaG9sZGVyIG9uXG4gICAgLy8gPHRleHRhcmVhPi4uLiBibG9jayB0aGUgZmlyc3QgaW5wdXQgZXZlbnQgYW5kIHJlbW92ZSB0aGUgYmxvY2tlclxuICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnICYmXG4gICAgICBrZXkgPT09ICdwbGFjZWhvbGRlcicgJiYgdmFsdWUgIT09ICcnICYmICFlbC5fX2llcGhcbiAgICApIHtcbiAgICAgIHZhciBibG9ja2VyID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIH07XG4gICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIGJsb2NrZXIpO1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBlbC5fX2llcGggPSB0cnVlOyAvKiBJRSBwbGFjZWhvbGRlciBwYXRjaGVkICovXG4gICAgfVxuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgfVxufVxuXG52YXIgYXR0cnMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlQXR0cnMsXG4gIHVwZGF0ZTogdXBkYXRlQXR0cnNcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVDbGFzcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICB2YXIgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG4gIGlmIChcbiAgICBpc1VuZGVmKGRhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgaXNVbmRlZihkYXRhLmNsYXNzKSAmJiAoXG4gICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgICAgICBpc1VuZGVmKG9sZERhdGEuY2xhc3MpXG4gICAgICApXG4gICAgKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjbHMgPSBnZW5DbGFzc0ZvclZub2RlKHZub2RlKTtcblxuICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gIHZhciB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLyogICovXG5cbi8vIGluIHNvbWUgY2FzZXMsIHRoZSBldmVudCB1c2VkIGhhcyB0byBiZSBkZXRlcm1pbmVkIGF0IHJ1bnRpbWVcbi8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG52YXIgUkFOR0VfVE9LRU4gPSAnX19yJztcbnZhciBDSEVDS0JPWF9SQURJT19UT0tFTiA9ICdfX2MnO1xuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIHZhciBldmVudCA9IGlzSUUgPyAnY2hhbmdlJyA6ICdpbnB1dCc7XG4gICAgb25bZXZlbnRdID0gW10uY29uY2F0KG9uW1JBTkdFX1RPS0VOXSwgb25bZXZlbnRdIHx8IFtdKTtcbiAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICB9XG4gIC8vIFRoaXMgd2FzIG9yaWdpbmFsbHkgaW50ZW5kZWQgdG8gZml4ICM0NTIxIGJ1dCBubyBsb25nZXIgbmVjZXNzYXJ5XG4gIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltDSEVDS0JPWF9SQURJT19UT0tFTl0pKSB7XG4gICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICBkZWxldGUgb25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dO1xuICB9XG59XG5cbnZhciB0YXJnZXQkMTtcblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIkMSAoZXZlbnQsIGhhbmRsZXIsIGNhcHR1cmUpIHtcbiAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICB2YXIgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG52YXIgdXNlTWljcm90YXNrRml4ID0gaXNVc2luZ01pY3JvVGFzayAmJiAhKGlzRkYgJiYgTnVtYmVyKGlzRkZbMV0pIDw9IDUzKTtcblxuZnVuY3Rpb24gYWRkJDEgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBwYXNzaXZlXG4pIHtcbiAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAvLyBhdHRhY2hlZCB0byBvdXRlciBlbGVtZW50IGR1cmluZyBwYXRjaCwgYW5kIHRyaWdnZXJlZCBhZ2Fpbi4gVGhpc1xuICAvLyBoYXBwZW5zIGJlY2F1c2UgYnJvd3NlcnMgZmlyZSBtaWNyb3Rhc2sgdGlja3MgYmV0d2VlbiBldmVudCBwcm9wYWdhdGlvbi5cbiAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAvLyBhbmQgdGhlIGhhbmRsZXIgd291bGQgb25seSBmaXJlIGlmIHRoZSBldmVudCBwYXNzZWQgdG8gaXQgd2FzIGZpcmVkXG4gIC8vIEFGVEVSIGl0IHdhcyBhdHRhY2hlZC5cbiAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgIHZhciBhdHRhY2hlZFRpbWVzdGFtcCA9IGN1cnJlbnRGbHVzaFRpbWVzdGFtcDtcbiAgICB2YXIgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyBiYWlsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBoYXZlIGJ1Z2d5IGV2ZW50LnRpbWVTdGFtcCBpbXBsZW1lbnRhdGlvbnNcbiAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAvLyAjOTY4MSBRdFdlYkVuZ2luZSBldmVudC50aW1lU3RhbXAgaXMgbmVnYXRpdmUgdmFsdWVcbiAgICAgICAgZS50aW1lU3RhbXAgPD0gMCB8fFxuICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgIC8vIGVsZWN0cm9uL253LmpzIGFwcCwgc2luY2UgZXZlbnQudGltZVN0YW1wIHdpbGwgYmUgdXNpbmcgYSBkaWZmZXJlbnRcbiAgICAgICAgLy8gc3RhcnRpbmcgcmVmZXJlbmNlXG4gICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbiAgICAgIH1cbiAgICB9O1xuICB9XG4gIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgPyB7IGNhcHR1cmU6IGNhcHR1cmUsIHBhc3NpdmU6IHBhc3NpdmUgfVxuICAgICAgOiBjYXB0dXJlXG4gICk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQyIChcbiAgbmFtZSxcbiAgaGFuZGxlcixcbiAgY2FwdHVyZSxcbiAgX3RhcmdldFxuKSB7XG4gIChfdGFyZ2V0IHx8IHRhcmdldCQxKS5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlci5fd3JhcHBlciB8fCBoYW5kbGVyLFxuICAgIGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlRE9NTGlzdGVuZXJzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgIHJldHVyblxuICB9XG4gIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gIHZhciBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxudmFyIHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIGtleSwgY3VyO1xuICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICB2YXIgb2xkUHJvcHMgPSBvbGRWbm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICB2YXIgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzIHx8IHt9O1xuICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgaWYgKGlzRGVmKHByb3BzLl9fb2JfXykpIHtcbiAgICBwcm9wcyA9IHZub2RlLmRhdGEuZG9tUHJvcHMgPSBleHRlbmQoe30sIHByb3BzKTtcbiAgfVxuXG4gIGZvciAoa2V5IGluIG9sZFByb3BzKSB7XG4gICAgaWYgKCEoa2V5IGluIHByb3BzKSkge1xuICAgICAgZWxtW2tleV0gPSAnJztcbiAgICB9XG4gIH1cblxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgIGlmIChjdXIgPT09IG9sZFByb3BzW2tleV0pIHsgY29udGludWUgfVxuICAgICAgLy8gIzY2MDEgd29yayBhcm91bmQgQ2hyb21lIHZlcnNpb24gPD0gNTUgYnVnIHdoZXJlIHNpbmdsZSB0ZXh0Tm9kZVxuICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgIGlmIChlbG0uY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5jaGlsZE5vZGVzWzBdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAndmFsdWUnICYmIGVsbS50YWdOYW1lICE9PSAnUFJPR1JFU1MnKSB7XG4gICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgLy8gbm9uLXN0cmluZyB2YWx1ZXMgd2lsbCBiZSBzdHJpbmdpZmllZFxuICAgICAgZWxtLl92YWx1ZSA9IGN1cjtcbiAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgdmFyIHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IFwiPHN2Zz5cIiArIGN1ciArIFwiPC9zdmc+XCI7XG4gICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICB3aGlsZSAoZWxtLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZWxtLnJlbW92ZUNoaWxkKGVsbS5maXJzdENoaWxkKTtcbiAgICAgIH1cbiAgICAgIHdoaWxlIChzdmcuZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0uYXBwZW5kQ2hpbGQoc3ZnLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoXG4gICAgICAvLyBza2lwIHRoZSB1cGRhdGUgaWYgb2xkIGFuZCBuZXcgVkRPTSBzdGF0ZSBpcyB0aGUgc2FtZS5cbiAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgIC8vIG91dCBvZiBzeW5jIHdpdGggVkRPTSBzdGF0ZSBkdWUgdG8gZm9jdXMsIGNvbXBvc2l0aW9uIGFuZCBtb2RpZmllcnMuXG4gICAgICAvLyBUaGlzICAjNDUyMSBieSBza2lwcGluZyB0aGUgdW5uZWNlc3NhcnkgYGNoZWNrZWRgIHVwZGF0ZS5cbiAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICkge1xuICAgICAgLy8gc29tZSBwcm9wZXJ0eSB1cGRhdGVzIGNhbiB0aHJvd1xuICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgdHJ5IHtcbiAgICAgICAgZWxtW2tleV0gPSBjdXI7XG4gICAgICB9IGNhdGNoIChlKSB7fVxuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIHZhciB2YWx1ZSA9IGVsbS52YWx1ZTtcbiAgdmFyIG1vZGlmaWVycyA9IGVsbS5fdk1vZGlmaWVyczsgLy8gaW5qZWN0ZWQgYnkgdi1tb2RlbCBydW50aW1lXG4gIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgaWYgKG1vZGlmaWVycy5udW1iZXIpIHtcbiAgICAgIHJldHVybiB0b051bWJlcih2YWx1ZSkgIT09IHRvTnVtYmVyKG5ld1ZhbClcbiAgICB9XG4gICAgaWYgKG1vZGlmaWVycy50cmltKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpICE9PSBuZXdWYWwudHJpbSgpXG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZSAhPT0gbmV3VmFsXG59XG5cbnZhciBkb21Qcm9wcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01Qcm9wcyxcbiAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xufTtcblxuLyogICovXG5cbnZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICB2YXIgcmVzID0ge307XG4gIHZhciBsaXN0RGVsaW1pdGVyID0gLzsoPyFbXihdKlxcKSkvZztcbiAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgIHRtcC5sZW5ndGggPiAxICYmIChyZXNbdG1wWzBdLnRyaW0oKV0gPSB0bXBbMV0udHJpbSgpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzXG59KTtcblxuLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlRGF0YSAoZGF0YSkge1xuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcoZGF0YS5zdHlsZSk7XG4gIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAvLyBhbmQgaXMgYWx3YXlzIGEgZnJlc2ggb2JqZWN0LCBzbyBpdCdzIHNhZmUgdG8gbWVyZ2UgaW50byBpdFxuICByZXR1cm4gZGF0YS5zdGF0aWNTdHlsZVxuICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgIDogc3R5bGVcbn1cblxuLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVCaW5kaW5nIChiaW5kaW5nU3R5bGUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYmluZGluZ1N0eWxlKSkge1xuICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgaWYgKHR5cGVvZiBiaW5kaW5nU3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgfVxuICByZXR1cm4gYmluZGluZ1N0eWxlXG59XG5cbi8qKlxuICogcGFyZW50IGNvbXBvbmVudCBzdHlsZSBzaG91bGQgYmUgYWZ0ZXIgY2hpbGQnc1xuICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAqL1xuZnVuY3Rpb24gZ2V0U3R5bGUgKHZub2RlLCBjaGVja0NoaWxkKSB7XG4gIHZhciByZXMgPSB7fTtcbiAgdmFyIHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG52YXIgY3NzVmFyUkUgPSAvXi0tLztcbnZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xudmFyIHNldFByb3AgPSBmdW5jdGlvbiAoZWwsIG5hbWUsIHZhbCkge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIHZhciBub3JtYWxpemVkTmFtZSA9IG5vcm1hbGl6ZShuYW1lKTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAvLyBTdXBwb3J0IHZhbHVlcyBhcnJheSBjcmVhdGVkIGJ5IGF1dG9wcmVmaXhlciwgZS5nLlxuICAgICAgLy8ge2Rpc3BsYXk6IFtcIi13ZWJraXQtYm94XCIsIFwiLW1zLWZsZXhib3hcIiwgXCJmbGV4XCJdfVxuICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWxbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbDtcbiAgICB9XG4gIH1cbn07XG5cbnZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG52YXIgZW1wdHlTdHlsZTtcbnZhciBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICB2YXIgY2FwTmFtZSA9IHByb3AuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcm9wLnNsaWNlKDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG5hbWUgPSB2ZW5kb3JOYW1lc1tpXSArIGNhcE5hbWU7XG4gICAgaWYgKG5hbWUgaW4gZW1wdHlTdHlsZSkge1xuICAgICAgcmV0dXJuIG5hbWVcbiAgICB9XG4gIH1cbn0pO1xuXG5mdW5jdGlvbiB1cGRhdGVTdHlsZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gIGlmIChpc1VuZGVmKGRhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYoZGF0YS5zdHlsZSkgJiZcbiAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljU3R5bGUpICYmIGlzVW5kZWYob2xkRGF0YS5zdHlsZSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3VyLCBuYW1lO1xuICB2YXIgZWwgPSB2bm9kZS5lbG07XG4gIHZhciBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gIC8vIGlmIHN0YXRpYyBzdHlsZSBleGlzdHMsIHN0eWxlYmluZGluZyBhbHJlYWR5IG1lcmdlZCBpbnRvIGl0IHdoZW4gZG9pbmcgbm9ybWFsaXplU3R5bGVEYXRhXG4gIHZhciBvbGRTdHlsZSA9IG9sZFN0YXRpY1N0eWxlIHx8IG9sZFN0eWxlQmluZGluZztcblxuICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgdmFyIG5ld1N0eWxlID0gZ2V0U3R5bGUodm5vZGUsIHRydWUpO1xuXG4gIGZvciAobmFtZSBpbiBvbGRTdHlsZSkge1xuICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgJycpO1xuICAgIH1cbiAgfVxuICBmb3IgKG5hbWUgaW4gbmV3U3R5bGUpIHtcbiAgICBjdXIgPSBuZXdTdHlsZVtuYW1lXTtcbiAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgLy8gaWU5IHNldHRpbmcgdG8gbnVsbCBoYXMgbm8gZWZmZWN0LCBtdXN0IHVzZSBlbXB0eSBzdHJpbmdcbiAgICAgIHNldFByb3AoZWwsIG5hbWUsIGN1ciA9PSBudWxsID8gJycgOiBjdXIpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgc3R5bGUgPSB7XG4gIGNyZWF0ZTogdXBkYXRlU3R5bGUsXG4gIHVwZGF0ZTogdXBkYXRlU3R5bGVcbn07XG5cbi8qICAqL1xuXG52YXIgd2hpdGVzcGFjZVJFID0gL1xccysvO1xuXG4vKipcbiAqIEFkZCBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIGFkZENsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoY2xzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCAoY3VyICsgY2xzKS50cmltKCkpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICogU1ZHIGVsZW1lbnRzIGluIElFXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgaWYgKGNscy5pbmRleE9mKCcgJykgPiAtMSkge1xuICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKTsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgdmFyIHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmVzID0ge307XG4gICAgaWYgKGRlZiQkMS5jc3MgIT09IGZhbHNlKSB7XG4gICAgICBleHRlbmQocmVzLCBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEubmFtZSB8fCAndicpKTtcbiAgICB9XG4gICAgZXh0ZW5kKHJlcywgZGVmJCQxKTtcbiAgICByZXR1cm4gcmVzXG4gIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxKVxuICB9XG59XG5cbnZhciBhdXRvQ3NzVHJhbnNpdGlvbiA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICByZXR1cm4ge1xuICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgZW50ZXJUb0NsYXNzOiAobmFtZSArIFwiLWVudGVyLXRvXCIpLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItZW50ZXItYWN0aXZlXCIpLFxuICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgbGVhdmVUb0NsYXNzOiAobmFtZSArIFwiLWxlYXZlLXRvXCIpLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtYWN0aXZlXCIpXG4gIH1cbn0pO1xuXG52YXIgaGFzVHJhbnNpdGlvbiA9IGluQnJvd3NlciAmJiAhaXNJRTk7XG52YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbnZhciBBTklNQVRJT04gPSAnYW5pbWF0aW9uJztcblxuLy8gVHJhbnNpdGlvbiBwcm9wZXJ0eS9ldmVudCBzbmlmZmluZ1xudmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xudmFyIHRyYW5zaXRpb25FbmRFdmVudCA9ICd0cmFuc2l0aW9uZW5kJztcbnZhciBhbmltYXRpb25Qcm9wID0gJ2FuaW1hdGlvbic7XG52YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbmlmIChoYXNUcmFuc2l0aW9uKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgd2luZG93Lm9ud2Via2l0dHJhbnNpdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgIHRyYW5zaXRpb25FbmRFdmVudCA9ICd3ZWJraXRUcmFuc2l0aW9uRW5kJztcbiAgfVxuICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQgIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgYW5pbWF0aW9uRW5kRXZlbnQgPSAnd2Via2l0QW5pbWF0aW9uRW5kJztcbiAgfVxufVxuXG4vLyBiaW5kaW5nIHRvIHdpbmRvdyBpcyBuZWNlc3NhcnkgdG8gbWFrZSBob3QgcmVsb2FkIHdvcmsgaW4gSUUgaW4gc3RyaWN0IG1vZGVcbnZhciByYWYgPSBpbkJyb3dzZXJcbiAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lLmJpbmQod2luZG93KVxuICAgIDogc2V0VGltZW91dFxuICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuZnVuY3Rpb24gbmV4dEZyYW1lIChmbikge1xuICByYWYoZnVuY3Rpb24gKCkge1xuICAgIHJhZihmbik7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgdmFyIHRyYW5zaXRpb25DbGFzc2VzID0gZWwuX3RyYW5zaXRpb25DbGFzc2VzIHx8IChlbC5fdHJhbnNpdGlvbkNsYXNzZXMgPSBbXSk7XG4gIGlmICh0cmFuc2l0aW9uQ2xhc3Nlcy5pbmRleE9mKGNscykgPCAwKSB7XG4gICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgIGFkZENsYXNzKGVsLCBjbHMpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBpZiAoZWwuX3RyYW5zaXRpb25DbGFzc2VzKSB7XG4gICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgfVxuICByZW1vdmVDbGFzcyhlbCwgY2xzKTtcbn1cblxuZnVuY3Rpb24gd2hlblRyYW5zaXRpb25FbmRzIChcbiAgZWwsXG4gIGV4cGVjdGVkVHlwZSxcbiAgY2Jcbikge1xuICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gIHZhciB0eXBlID0gcmVmLnR5cGU7XG4gIHZhciB0aW1lb3V0ID0gcmVmLnRpbWVvdXQ7XG4gIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICBpZiAoIXR5cGUpIHsgcmV0dXJuIGNiKCkgfVxuICB2YXIgZXZlbnQgPSB0eXBlID09PSBUUkFOU0lUSU9OID8gdHJhbnNpdGlvbkVuZEV2ZW50IDogYW5pbWF0aW9uRW5kRXZlbnQ7XG4gIHZhciBlbmRlZCA9IDA7XG4gIHZhciBlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIHZhciBvbkVuZCA9IGZ1bmN0aW9uIChlKSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG52YXIgdHJhbnNmb3JtUkUgPSAvXFxiKHRyYW5zZm9ybXxhbGwpKCx8JCkvO1xuXG5mdW5jdGlvbiBnZXRUcmFuc2l0aW9uSW5mbyAoZWwsIGV4cGVjdGVkVHlwZSkge1xuICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAvLyBKU0RPTSBtYXkgcmV0dXJuIHVuZGVmaW5lZCBmb3IgdHJhbnNpdGlvbiBwcm9wZXJ0aWVzXG4gIHZhciB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgdHJhbnNpdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KHRyYW5zaXRpb25EZWxheXMsIHRyYW5zaXRpb25EdXJhdGlvbnMpO1xuICB2YXIgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICB2YXIgYW5pbWF0aW9uVGltZW91dCA9IGdldFRpbWVvdXQoYW5pbWF0aW9uRGVsYXlzLCBhbmltYXRpb25EdXJhdGlvbnMpO1xuXG4gIHZhciB0eXBlO1xuICB2YXIgdGltZW91dCA9IDA7XG4gIHZhciBwcm9wQ291bnQgPSAwO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgIGlmICh0cmFuc2l0aW9uVGltZW91dCA+IDApIHtcbiAgICAgIHR5cGUgPSBUUkFOU0lUSU9OO1xuICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgaWYgKGFuaW1hdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gQU5JTUFUSU9OO1xuICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICBwcm9wQ291bnQgPSBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aW1lb3V0ID0gTWF0aC5tYXgodHJhbnNpdGlvblRpbWVvdXQsIGFuaW1hdGlvblRpbWVvdXQpO1xuICAgIHR5cGUgPSB0aW1lb3V0ID4gMFxuICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgPyBUUkFOU0lUSU9OXG4gICAgICAgIDogQU5JTUFUSU9OXG4gICAgICA6IG51bGw7XG4gICAgcHJvcENvdW50ID0gdHlwZVxuICAgICAgPyB0eXBlID09PSBUUkFOU0lUSU9OXG4gICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiBhbmltYXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICA6IDA7XG4gIH1cbiAgdmFyIGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGU6IHR5cGUsXG4gICAgdGltZW91dDogdGltZW91dCxcbiAgICBwcm9wQ291bnQ6IHByb3BDb3VudCxcbiAgICBoYXNUcmFuc2Zvcm06IGhhc1RyYW5zZm9ybVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRpbWVvdXQgKGRlbGF5cywgZHVyYXRpb25zKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHdoaWxlIChkZWxheXMubGVuZ3RoIDwgZHVyYXRpb25zLmxlbmd0aCkge1xuICAgIGRlbGF5cyA9IGRlbGF5cy5jb25jYXQoZGVsYXlzKTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLm1heC5hcHBseShudWxsLCBkdXJhdGlvbnMubWFwKGZ1bmN0aW9uIChkLCBpKSB7XG4gICAgcmV0dXJuIHRvTXMoZCkgKyB0b01zKGRlbGF5c1tpXSlcbiAgfSkpXG59XG5cbi8vIE9sZCB2ZXJzaW9ucyBvZiBDaHJvbWl1bSAoYmVsb3cgNjEuMC4zMTYzLjEwMCkgZm9ybWF0cyBmbG9hdGluZyBwb2ludGVyIG51bWJlcnNcbi8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbi8vIElmIGNvbW1hIGlzIG5vdCByZXBsYWNlZCB3aXRoIGEgZG90LCB0aGUgaW5wdXQgd2lsbCBiZSByb3VuZGVkIGRvd24gKGkuZS4gYWN0aW5nXG4vLyBhcyBhIGZsb29yIGZ1bmN0aW9uKSBjYXVzaW5nIHVuZXhwZWN0ZWQgYmVoYXZpb3JzXG5mdW5jdGlvbiB0b01zIChzKSB7XG4gIHJldHVybiBOdW1iZXIocy5zbGljZSgwLCAtMSkucmVwbGFjZSgnLCcsICcuJykpICogMTAwMFxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZW50ZXIgKHZub2RlLCB0b2dnbGVEaXNwbGF5KSB7XG4gIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgZWwuX2xlYXZlQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICBlbC5fbGVhdmVDYigpO1xuICB9XG5cbiAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgdmFyIHR5cGUgPSBkYXRhLnR5cGU7XG4gIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICB2YXIgZW50ZXJUb0NsYXNzID0gZGF0YS5lbnRlclRvQ2xhc3M7XG4gIHZhciBlbnRlckFjdGl2ZUNsYXNzID0gZGF0YS5lbnRlckFjdGl2ZUNsYXNzO1xuICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICB2YXIgYXBwZWFyVG9DbGFzcyA9IGRhdGEuYXBwZWFyVG9DbGFzcztcbiAgdmFyIGFwcGVhckFjdGl2ZUNsYXNzID0gZGF0YS5hcHBlYXJBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgdmFyIGVudGVyID0gZGF0YS5lbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXIgPSBkYXRhLmFmdGVyRW50ZXI7XG4gIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gIHZhciBiZWZvcmVBcHBlYXIgPSBkYXRhLmJlZm9yZUFwcGVhcjtcbiAgdmFyIGFwcGVhciA9IGRhdGEuYXBwZWFyO1xuICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICB2YXIgYXBwZWFyQ2FuY2VsbGVkID0gZGF0YS5hcHBlYXJDYW5jZWxsZWQ7XG4gIHZhciBkdXJhdGlvbiA9IGRhdGEuZHVyYXRpb247XG5cbiAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAvLyB0cmFuc2l0aW9uLiBPbmUgZWRnZSBjYXNlIHRvIGNoZWNrIGlzIHdoZW4gdGhlIDx0cmFuc2l0aW9uPiBpcyBwbGFjZWRcbiAgLy8gYXMgdGhlIHJvb3Qgbm9kZSBvZiBhIGNoaWxkIGNvbXBvbmVudC4gSW4gdGhhdCBjYXNlIHdlIG5lZWQgdG8gY2hlY2tcbiAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gIHZhciBjb250ZXh0ID0gYWN0aXZlSW5zdGFuY2U7XG4gIHZhciB0cmFuc2l0aW9uTm9kZSA9IGFjdGl2ZUluc3RhbmNlLiR2bm9kZTtcbiAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgIGNvbnRleHQgPSB0cmFuc2l0aW9uTm9kZS5jb250ZXh0O1xuICAgIHRyYW5zaXRpb25Ob2RlID0gdHJhbnNpdGlvbk5vZGUucGFyZW50O1xuICB9XG5cbiAgdmFyIGlzQXBwZWFyID0gIWNvbnRleHQuX2lzTW91bnRlZCB8fCAhdm5vZGUuaXNSb290SW5zZXJ0O1xuXG4gIGlmIChpc0FwcGVhciAmJiAhYXBwZWFyICYmIGFwcGVhciAhPT0gJycpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIHZhciBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICB2YXIgYWN0aXZlQ2xhc3MgPSBpc0FwcGVhciAmJiBhcHBlYXJBY3RpdmVDbGFzc1xuICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICA6IGVudGVyQWN0aXZlQ2xhc3M7XG4gIHZhciB0b0NsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyVG9DbGFzc1xuICAgID8gYXBwZWFyVG9DbGFzc1xuICAgIDogZW50ZXJUb0NsYXNzO1xuXG4gIHZhciBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICB2YXIgZW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgOiBlbnRlcjtcbiAgdmFyIGFmdGVyRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgIDogYWZ0ZXJFbnRlcjtcbiAgdmFyIGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgdmFyIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5lbnRlclxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChlbnRlckhvb2spO1xuXG4gIHZhciBjYiA9IGVsLl9lbnRlckNiID0gb25jZShmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudE5vZGU7XG4gICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgaWYgKHBlbmRpbmdOb2RlICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLnRhZyA9PT0gdm5vZGUudGFnICYmXG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgKSB7XG4gICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYigpO1xuICAgICAgfVxuICAgICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gc3RhcnQgZW50ZXIgdHJhbnNpdGlvblxuICBiZWZvcmVFbnRlckhvb2sgJiYgYmVmb3JlRW50ZXJIb29rKGVsKTtcbiAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgYWN0aXZlQ2xhc3MpO1xuICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIHN0YXJ0Q2xhc3MpO1xuICAgICAgaWYgKCFjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgaWYgKCF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24pKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGlmICh2bm9kZS5kYXRhLnNob3cpIHtcbiAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gIH1cblxuICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICBjYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxlYXZlICh2bm9kZSwgcm0pIHtcbiAgdmFyIGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICB2YXIgZGF0YSA9IHJlc29sdmVUcmFuc2l0aW9uKHZub2RlLmRhdGEudHJhbnNpdGlvbik7XG4gIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgcmV0dXJuIHJtKClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNEZWYoZWwuX2xlYXZlQ2IpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB2YXIgY3NzID0gZGF0YS5jc3M7XG4gIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgdmFyIGxlYXZlVG9DbGFzcyA9IGRhdGEubGVhdmVUb0NsYXNzO1xuICB2YXIgbGVhdmVBY3RpdmVDbGFzcyA9IGRhdGEubGVhdmVBY3RpdmVDbGFzcztcbiAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgdmFyIGxlYXZlID0gZGF0YS5sZWF2ZTtcbiAgdmFyIGFmdGVyTGVhdmUgPSBkYXRhLmFmdGVyTGVhdmU7XG4gIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gIHZhciBkZWxheUxlYXZlID0gZGF0YS5kZWxheUxlYXZlO1xuICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIHZhciB1c2VyV2FudHNDb250cm9sID0gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aChsZWF2ZSk7XG5cbiAgdmFyIGV4cGxpY2l0TGVhdmVEdXJhdGlvbiA9IHRvTnVtYmVyKFxuICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgPyBkdXJhdGlvbi5sZWF2ZVxuICAgICAgOiBkdXJhdGlvblxuICApO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0TGVhdmVEdXJhdGlvbiwgJ2xlYXZlJywgdm5vZGUpO1xuICB9XG5cbiAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLl9wZW5kaW5nKSB7XG4gICAgICBlbC5wYXJlbnROb2RlLl9wZW5kaW5nW3Zub2RlLmtleV0gPSBudWxsO1xuICAgIH1cbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgfVxuICAgIGVsLl9sZWF2ZUNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKGRlbGF5TGVhdmUpIHtcbiAgICBkZWxheUxlYXZlKHBlcmZvcm1MZWF2ZSk7XG4gIH0gZWxzZSB7XG4gICAgcGVyZm9ybUxlYXZlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgIC8vIHRoZSBkZWxheWVkIGxlYXZlIG1heSBoYXZlIGFscmVhZHkgYmVlbiBjYW5jZWxsZWRcbiAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgLy8gcmVjb3JkIGxlYXZpbmcgZWxlbWVudFxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgIChlbC5wYXJlbnROb2RlLl9wZW5kaW5nIHx8IChlbC5wYXJlbnROb2RlLl9wZW5kaW5nID0ge30pKVsodm5vZGUua2V5KV0gPSB2bm9kZTtcbiAgICB9XG4gICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZVRvQ2xhc3MpO1xuICAgICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgIHNldFRpbWVvdXQoY2IsIGV4cGxpY2l0TGVhdmVEdXJhdGlvbik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgIGlmICghZXhwZWN0c0NTUyAmJiAhdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgY2IoKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG5mdW5jdGlvbiBjaGVja0R1cmF0aW9uICh2YWwsIG5hbWUsIHZub2RlKSB7XG4gIGlmICh0eXBlb2YgdmFsICE9PSAnbnVtYmVyJykge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBub3QgYSB2YWxpZCBudW1iZXIgLSBcIiArXG4gICAgICBcImdvdCBcIiArIChKU09OLnN0cmluZ2lmeSh2YWwpKSArIFwiLlwiLFxuICAgICAgdm5vZGUuY29udGV4dFxuICAgICk7XG4gIH0gZWxzZSBpZiAoaXNOYU4odmFsKSkge1xuICAgIHdhcm4oXG4gICAgICBcIjx0cmFuc2l0aW9uPiBleHBsaWNpdCBcIiArIG5hbWUgKyBcIiBkdXJhdGlvbiBpcyBOYU4gLSBcIiArXG4gICAgICAndGhlIGR1cmF0aW9uIGV4cHJlc3Npb24gbWlnaHQgYmUgaW5jb3JyZWN0LicsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbGlkRHVyYXRpb24gKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIHZhbCA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbClcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYSB0cmFuc2l0aW9uIGhvb2sncyBhcmd1bWVudCBsZW5ndGguIFRoZSBob29rIG1heSBiZTpcbiAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICogLSBhIHdyYXBwZWQgY29tcG9uZW50IG1ldGhvZCAoY2hlY2sgLl9sZW5ndGgpXG4gKiAtIGEgcGxhaW4gZnVuY3Rpb24gKC5sZW5ndGgpXG4gKi9cbmZ1bmN0aW9uIGdldEhvb2tBcmd1bWVudHNMZW5ndGggKGZuKSB7XG4gIGlmIChpc1VuZGVmKGZuKSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG4gIHZhciBpbnZva2VyRm5zID0gZm4uZm5zO1xuICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAvLyBpbnZva2VyXG4gICAgcmV0dXJuIGdldEhvb2tBcmd1bWVudHNMZW5ndGgoXG4gICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgID8gaW52b2tlckZuc1swXVxuICAgICAgICA6IGludm9rZXJGbnNcbiAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChmbi5fbGVuZ3RoIHx8IGZuLmxlbmd0aCkgPiAxXG4gIH1cbn1cblxuZnVuY3Rpb24gX2VudGVyIChfLCB2bm9kZSkge1xuICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgZW50ZXIodm5vZGUpO1xuICB9XG59XG5cbnZhciB0cmFuc2l0aW9uID0gaW5Ccm93c2VyID8ge1xuICBjcmVhdGU6IF9lbnRlcixcbiAgYWN0aXZhdGU6IF9lbnRlcixcbiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUkJDEgKHZub2RlLCBybSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgbGVhdmUodm5vZGUsIHJtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm0oKTtcbiAgICB9XG4gIH1cbn0gOiB7fTtcblxudmFyIHBsYXRmb3JtTW9kdWxlcyA9IFtcbiAgYXR0cnMsXG4gIGtsYXNzLFxuICBldmVudHMsXG4gIGRvbVByb3BzLFxuICBzdHlsZSxcbiAgdHJhbnNpdGlvblxuXTtcblxuLyogICovXG5cbi8vIHRoZSBkaXJlY3RpdmUgbW9kdWxlIHNob3VsZCBiZSBhcHBsaWVkIGxhc3QsIGFmdGVyIGFsbFxuLy8gYnVpbHQtaW4gbW9kdWxlcyBoYXZlIGJlZW4gYXBwbGllZC5cbnZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbnZhciBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzOiBub2RlT3BzLCBtb2R1bGVzOiBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgaWYgKGVsICYmIGVsLnZtb2RlbCkge1xuICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgfVxuICB9KTtcbn1cblxudmFyIGRpcmVjdGl2ZSA9IHtcbiAgaW5zZXJ0ZWQ6IGZ1bmN0aW9uIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgdmFyIHByZXZPcHRpb25zID0gZWwuX3ZPcHRpb25zO1xuICAgICAgdmFyIGN1ck9wdGlvbnMgPSBlbC5fdk9wdGlvbnMgPSBbXS5tYXAuY2FsbChlbC5vcHRpb25zLCBnZXRWYWx1ZSk7XG4gICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgIC8vIHRyaWdnZXIgY2hhbmdlIGV2ZW50IGlmXG4gICAgICAgIC8vIG5vIG1hdGNoaW5nIG9wdGlvbiBmb3VuZCBmb3IgYXQgbGVhc3Qgb25lIHZhbHVlXG4gICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKGZ1bmN0aW9uICh2KSB7IHJldHVybiBoYXNOb01hdGNoaW5nT3B0aW9uKHYsIGN1ck9wdGlvbnMpOyB9KVxuICAgICAgICAgIDogYmluZGluZy52YWx1ZSAhPT0gYmluZGluZy5vbGRWYWx1ZSAmJiBoYXNOb01hdGNoaW5nT3B0aW9uKGJpbmRpbmcudmFsdWUsIGN1ck9wdGlvbnMpO1xuICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgdHJpZ2dlcihlbCwgJ2NoYW5nZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG5mdW5jdGlvbiBzZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0lFIHx8IGlzRWRnZSkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgIH0sIDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFjdHVhbGx5U2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICB2YXIgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICBpZiAoaXNNdWx0aXBsZSAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHdhcm4oXG4gICAgICBcIjxzZWxlY3QgbXVsdGlwbGUgdi1tb2RlbD1cXFwiXCIgKyAoYmluZGluZy5leHByZXNzaW9uKSArIFwiXFxcIj4gXCIgK1xuICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICB2bVxuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgdmFyIHNlbGVjdGVkLCBvcHRpb247XG4gIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBvcHRpb24gPSBlbC5vcHRpb25zW2ldO1xuICAgIGlmIChpc011bHRpcGxlKSB7XG4gICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHNlbGVjdGVkO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChnZXRWYWx1ZShvcHRpb24pLCB2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICBlbC5zZWxlY3RlZEluZGV4ID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKCFpc011bHRpcGxlKSB7XG4gICAgZWwuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhhc05vTWF0Y2hpbmdPcHRpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gIGUudGFyZ2V0LmNvbXBvc2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyKGUudGFyZ2V0LCAnaW5wdXQnKTtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlciAoZWwsIHR5cGUpIHtcbiAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpO1xuICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbn1cblxuLyogICovXG5cbi8vIHJlY3Vyc2l2ZWx5IHNlYXJjaCBmb3IgcG9zc2libGUgdHJhbnNpdGlvbiBkZWZpbmVkIGluc2lkZSB0aGUgY29tcG9uZW50IHJvb3RcbmZ1bmN0aW9uIGxvY2F0ZU5vZGUgKHZub2RlKSB7XG4gIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICA/IGxvY2F0ZU5vZGUodm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlKVxuICAgIDogdm5vZGVcbn1cblxudmFyIHNob3cgPSB7XG4gIGJpbmQ6IGZ1bmN0aW9uIGJpbmQgKGVsLCByZWYsIHZub2RlKSB7XG4gICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgdm5vZGUgPSBsb2NhdGVOb2RlKHZub2RlKTtcbiAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnID8gJycgOiBlbC5zdHlsZS5kaXNwbGF5O1xuICAgIGlmICh2YWx1ZSAmJiB0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IG9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBvcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlIChlbCwgcmVmLCB2bm9kZSkge1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICB2YXIgb2xkVmFsdWUgPSByZWYub2xkVmFsdWU7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgIHZhciB0cmFuc2l0aW9uJCQxID0gdm5vZGUuZGF0YSAmJiB2bm9kZS5kYXRhLnRyYW5zaXRpb247XG4gICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxlYXZlKHZub2RlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgIGVsLFxuICAgIGJpbmRpbmcsXG4gICAgdm5vZGUsXG4gICAgb2xkVm5vZGUsXG4gICAgaXNEZXN0cm95XG4gICkge1xuICAgIGlmICghaXNEZXN0cm95KSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gZWwuX192T3JpZ2luYWxEaXNwbGF5O1xuICAgIH1cbiAgfVxufTtcblxudmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgbW9kZWw6IGRpcmVjdGl2ZSxcbiAgc2hvdzogc2hvd1xufTtcblxuLyogICovXG5cbnZhciB0cmFuc2l0aW9uUHJvcHMgPSB7XG4gIG5hbWU6IFN0cmluZyxcbiAgYXBwZWFyOiBCb29sZWFuLFxuICBjc3M6IEJvb2xlYW4sXG4gIG1vZGU6IFN0cmluZyxcbiAgdHlwZTogU3RyaW5nLFxuICBlbnRlckNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJUb0NsYXNzOiBTdHJpbmcsXG4gIGxlYXZlVG9DbGFzczogU3RyaW5nLFxuICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGxlYXZlQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgYXBwZWFyVG9DbGFzczogU3RyaW5nLFxuICBkdXJhdGlvbjogW051bWJlciwgU3RyaW5nLCBPYmplY3RdXG59O1xuXG4vLyBpbiBjYXNlIHRoZSBjaGlsZCBpcyBhbHNvIGFuIGFic3RyYWN0IGNvbXBvbmVudCwgZS5nLiA8a2VlcC1hbGl2ZT5cbi8vIHdlIHdhbnQgdG8gcmVjdXJzaXZlbHkgcmV0cmlldmUgdGhlIHJlYWwgY29tcG9uZW50IHRvIGJlIHJlbmRlcmVkXG5mdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gIHZhciBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICB2YXIgZGF0YSA9IHt9O1xuICB2YXIgb3B0aW9ucyA9IGNvbXAuJG9wdGlvbnM7XG4gIC8vIHByb3BzXG4gIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICB2YXIgbGlzdGVuZXJzID0gb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICBkYXRhW2NhbWVsaXplKGtleSQxKV0gPSBsaXN0ZW5lcnNba2V5JDFdO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbmZ1bmN0aW9uIHBsYWNlaG9sZGVyIChoLCByYXdDaGlsZCkge1xuICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgcmV0dXJuIGgoJ2tlZXAtYWxpdmUnLCB7XG4gICAgICBwcm9wczogcmF3Q2hpbGQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGFcbiAgICB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gIHdoaWxlICgodm5vZGUgPSB2bm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHZub2RlLmRhdGEudHJhbnNpdGlvbikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNTYW1lQ2hpbGQgKGNoaWxkLCBvbGRDaGlsZCkge1xuICByZXR1cm4gb2xkQ2hpbGQua2V5ID09PSBjaGlsZC5rZXkgJiYgb2xkQ2hpbGQudGFnID09PSBjaGlsZC50YWdcbn1cblxudmFyIGlzTm90VGV4dE5vZGUgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpOyB9O1xuXG52YXIgaXNWU2hvd0RpcmVjdGl2ZSA9IGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLm5hbWUgPT09ICdzaG93JzsgfTtcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIgKGgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgaWYgKCFjaGlsZHJlbikge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIG91dCB0ZXh0IG5vZGVzIChwb3NzaWJsZSB3aGl0ZXNwYWNlcylcbiAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmZpbHRlcihpc05vdFRleHROb2RlKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2FybiBtdWx0aXBsZSBlbGVtZW50c1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICB2YXIgbW9kZSA9IHRoaXMubW9kZTtcblxuICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIG1vZGUgJiYgbW9kZSAhPT0gJ2luLW91dCcgJiYgbW9kZSAhPT0gJ291dC1pbidcbiAgICApIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdpbnZhbGlkIDx0cmFuc2l0aW9uPiBtb2RlOiAnICsgbW9kZSxcbiAgICAgICAgdGhpcy4kcGFyZW50XG4gICAgICApO1xuICAgIH1cblxuICAgIHZhciByYXdDaGlsZCA9IGNoaWxkcmVuWzBdO1xuXG4gICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgIC8vIHBhcmVudCBjb250YWluZXIgbm9kZSBhbHNvIGhhcyB0cmFuc2l0aW9uLCBza2lwLlxuICAgIGlmIChoYXNQYXJlbnRUcmFuc2l0aW9uKHRoaXMuJHZub2RlKSkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgLy8gYXBwbHkgdHJhbnNpdGlvbiBkYXRhIHRvIGNoaWxkXG4gICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgIHZhciBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIHZhciBkYXRhID0gKGNoaWxkLmRhdGEgfHwgKGNoaWxkLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSBleHRyYWN0VHJhbnNpdGlvbkRhdGEodGhpcyk7XG4gICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgdmFyIG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICB2YXIgb2xkRGF0YSA9IG9sZENoaWxkLmRhdGEudHJhbnNpdGlvbiA9IGV4dGVuZCh7fSwgZGF0YSk7XG4gICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICBpZiAobW9kZSA9PT0gJ291dC1pbicpIHtcbiAgICAgICAgLy8gcmV0dXJuIHBsYWNlaG9sZGVyIG5vZGUgYW5kIHF1ZXVlIHVwZGF0ZSB3aGVuIGxlYXZlIGZpbmlzaGVzXG4gICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICBtZXJnZVZOb2RlSG9vayhvbGREYXRhLCAnYWZ0ZXJMZWF2ZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB0aGlzJDEuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXIoaCwgcmF3Q2hpbGQpXG4gICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgIGlmIChpc0FzeW5jUGxhY2Vob2xkZXIoY2hpbGQpKSB7XG4gICAgICAgICAgcmV0dXJuIG9sZFJhd0NoaWxkXG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGF5ZWRMZWF2ZTtcbiAgICAgICAgdmFyIHBlcmZvcm1MZWF2ZSA9IGZ1bmN0aW9uICgpIHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBmdW5jdGlvbiAobGVhdmUpIHsgZGVsYXllZExlYXZlID0gbGVhdmU7IH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByYXdDaGlsZFxuICB9XG59O1xuXG4vKiAgKi9cblxudmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHM6IHByb3BzLFxuXG4gIGJlZm9yZU1vdW50OiBmdW5jdGlvbiBiZWZvcmVNb3VudCAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgIHRoaXMuX3VwZGF0ZSA9IGZ1bmN0aW9uICh2bm9kZSwgaHlkcmF0aW5nKSB7XG4gICAgICB2YXIgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyQxKTtcbiAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgIHRoaXMkMS5fX3BhdGNoX18oXG4gICAgICAgIHRoaXMkMS5fdm5vZGUsXG4gICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICBmYWxzZSwgLy8gaHlkcmF0aW5nXG4gICAgICAgIHRydWUgLy8gcmVtb3ZlT25seSAoIWltcG9ydGFudCwgYXZvaWRzIHVubmVjZXNzYXJ5IG1vdmVzKVxuICAgICAgKTtcbiAgICAgIHRoaXMkMS5fdm5vZGUgPSB0aGlzJDEua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9LFxuXG4gIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgdmFyIHRhZyA9IHRoaXMudGFnIHx8IHRoaXMuJHZub2RlLmRhdGEudGFnIHx8ICdzcGFuJztcbiAgICB2YXIgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgIHZhciByYXdDaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQgfHwgW107XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmF3Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjID0gcmF3Q2hpbGRyZW5baV07XG4gICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgaWYgKGMua2V5ICE9IG51bGwgJiYgU3RyaW5nKGMua2V5KS5pbmRleE9mKCdfX3ZsaXN0JykgIT09IDApIHtcbiAgICAgICAgICBjaGlsZHJlbi5wdXNoKGMpO1xuICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgOyhjLmRhdGEgfHwgKGMuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IHRyYW5zaXRpb25EYXRhO1xuICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgb3B0cyA9IGMuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICB2YXIgbmFtZSA9IG9wdHMgPyAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZyB8fCAnJykgOiBjLnRhZztcbiAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBrZXB0ID0gW107XG4gICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yICh2YXIgaSQxID0gMDsgaSQxIDwgcHJldkNoaWxkcmVuLmxlbmd0aDsgaSQxKyspIHtcbiAgICAgICAgdmFyIGMkMSA9IHByZXZDaGlsZHJlbltpJDFdO1xuICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgIGMkMS5kYXRhLnBvcyA9IGMkMS5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChtYXBbYyQxLmtleV0pIHtcbiAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyQxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5rZXB0ID0gaCh0YWcsIG51bGwsIGtlcHQpO1xuICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gaCh0YWcsIG51bGwsIGNoaWxkcmVuKVxuICB9LFxuXG4gIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgaWYgKCFjaGlsZHJlbi5sZW5ndGggfHwgIXRoaXMuaGFzTW92ZShjaGlsZHJlblswXS5lbG0sIG1vdmVDbGFzcykpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIHdlIGRpdmlkZSB0aGUgd29yayBpbnRvIHRocmVlIGxvb3BzIHRvIGF2b2lkIG1peGluZyBET00gcmVhZHMgYW5kIHdyaXRlc1xuICAgIC8vIGluIGVhY2ggaXRlcmF0aW9uIC0gd2hpY2ggaGVscHMgcHJldmVudCBsYXlvdXQgdGhyYXNoaW5nLlxuICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgIGNoaWxkcmVuLmZvckVhY2gocmVjb3JkUG9zaXRpb24pO1xuICAgIGNoaWxkcmVuLmZvckVhY2goYXBwbHlUcmFuc2xhdGlvbik7XG5cbiAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAvLyBhc3NpZ24gdG8gdGhpcyB0byBhdm9pZCBiZWluZyByZW1vdmVkIGluIHRyZWUtc2hha2luZ1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgaWYgKGMuZGF0YS5tb3ZlZCkge1xuICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgdmFyIHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICB2YXIgY2xvbmUgPSBlbC5jbG9uZU5vZGUoKTtcbiAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgZWwuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24gKGNscykgeyByZW1vdmVDbGFzcyhjbG9uZSwgY2xzKTsgfSk7XG4gICAgICB9XG4gICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgIGNsb25lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB0aGlzLiRlbC5hcHBlbmRDaGlsZChjbG9uZSk7XG4gICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgIHRoaXMuJGVsLnJlbW92ZUNoaWxkKGNsb25lKTtcbiAgICAgIHJldHVybiAodGhpcy5faGFzTW92ZSA9IGluZm8uaGFzVHJhbnNmb3JtKVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjLmVsbS5fbW92ZUNiKSB7XG4gICAgYy5lbG0uX21vdmVDYigpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICBjLmVsbS5fZW50ZXJDYigpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY29yZFBvc2l0aW9uIChjKSB7XG4gIGMuZGF0YS5uZXdQb3MgPSBjLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlUcmFuc2xhdGlvbiAoYykge1xuICB2YXIgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gIHZhciBkeCA9IG9sZFBvcy5sZWZ0IC0gbmV3UG9zLmxlZnQ7XG4gIHZhciBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIHZhciBzID0gYy5lbG0uc3R5bGU7XG4gICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgIHMudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgfVxufVxuXG52YXIgcGxhdGZvcm1Db21wb25lbnRzID0ge1xuICBUcmFuc2l0aW9uOiBUcmFuc2l0aW9uLFxuICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxufTtcblxuLyogICovXG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcblZ1ZS5jb25maWcubXVzdFVzZVByb3AgPSBtdXN0VXNlUHJvcDtcblZ1ZS5jb25maWcuaXNSZXNlcnZlZFRhZyA9IGlzUmVzZXJ2ZWRUYWc7XG5WdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG5WdWUuY29uZmlnLmdldFRhZ05hbWVzcGFjZSA9IGdldFRhZ05hbWVzcGFjZTtcblZ1ZS5jb25maWcuaXNVbmtub3duRWxlbWVudCA9IGlzVW5rbm93bkVsZW1lbnQ7XG5cbi8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuZXh0ZW5kKFZ1ZS5vcHRpb25zLmRpcmVjdGl2ZXMsIHBsYXRmb3JtRGlyZWN0aXZlcyk7XG5leHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgcGxhdGZvcm1Db21wb25lbnRzKTtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gPSBpbkJyb3dzZXIgPyBwYXRjaCA6IG5vb3A7XG5cbi8vIHB1YmxpYyBtb3VudCBtZXRob2RcblZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICBlbCxcbiAgaHlkcmF0aW5nXG4pIHtcbiAgZWwgPSBlbCAmJiBpbkJyb3dzZXIgPyBxdWVyeShlbCkgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBtb3VudENvbXBvbmVudCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxufTtcblxuLy8gZGV2dG9vbHMgZ2xvYmFsIGhvb2tcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5pZiAoaW5Ccm93c2VyKSB7XG4gIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIGlmIChjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICBkZXZ0b29scy5lbWl0KCdpbml0JywgVnVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0J1xuICAgICAgKSB7XG4gICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICdEb3dubG9hZCB0aGUgVnVlIERldnRvb2xzIGV4dGVuc2lvbiBmb3IgYSBiZXR0ZXIgZGV2ZWxvcG1lbnQgZXhwZXJpZW5jZTpcXG4nICtcbiAgICAgICAgICAnaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS1kZXZ0b29scydcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiZcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAndGVzdCcgJiZcbiAgICAgIGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnXG4gICAgKSB7XG4gICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgXCJZb3UgYXJlIHJ1bm5pbmcgVnVlIGluIGRldmVsb3BtZW50IG1vZGUuXFxuXCIgK1xuICAgICAgICBcIk1ha2Ugc3VyZSB0byB0dXJuIG9uIHByb2R1Y3Rpb24gbW9kZSB3aGVuIGRlcGxveWluZyBmb3IgcHJvZHVjdGlvbi5cXG5cIiArXG4gICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgKTtcbiAgICB9XG4gIH0sIDApO1xufVxuXG4vKiAgKi9cblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiaW1wb3J0IFZ1ZSBmcm9tICd2dWUnXHJcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudnVlJ1xyXG5pbXBvcnQgcm91dGVyIGZyb20gXCIuL3JvdXRlclwiXHJcblxyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZVxyXG5cclxubmV3IFZ1ZSh7XHJcbiAgZWw6ICcjYXBwJyxcclxuICByb3V0ZXIsXHJcbiAgcmVuZGVyOiBoID0+IGgoQXBwKVxyXG59KVxyXG4iLCJpbXBvcnQgVnVlIGZyb20gJ3Z1ZSdcclxuaW1wb3J0IFZ1ZVJvdXRlciBmcm9tICd2dWUtcm91dGVyJ1xyXG5pbXBvcnQgVHJhZmZpY0xpZ2h0IGZyb20gXCIuLi9jb21wb25lbnRzL1RyYWZmaWNMaWdodC52dWVcIlxyXG5cclxuVnVlLnVzZShWdWVSb3V0ZXIpXHJcblxyXG5jb25zdCByb3V0ZXMgPSBbXHJcbiAge1xyXG4gICAgcGF0aDogJy8nLFxyXG4gICAgcmVkaXJlY3Q6ICcvcmVkJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogJy9yZWQnLFxyXG4gICAgbmFtZTogJ1JlZCBTaWduYWwnLFxyXG4gICAgY29tcG9uZW50OiBUcmFmZmljTGlnaHQsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICBhY3RpdmVDb2xvcjogJ3JlZCcsXHJcbiAgICAgIHRpbWVyOiAxMDAwMFxyXG4gICAgfVxyXG4gIH0sXHJcbiAge1xyXG4gICAgcGF0aDogJy95ZWxsb3cnLFxyXG4gICAgbmFtZTogJ1llbGxvdyBTaWduYWwnLFxyXG4gICAgY29tcG9uZW50OiBUcmFmZmljTGlnaHQsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICBhY3RpdmVDb2xvcjogJ3llbGxvdycsXHJcbiAgICAgIHRpbWVyOiAzMDAwXHJcbiAgICB9XHJcbiAgfSxcclxuICB7XHJcbiAgICBwYXRoOiAnL2dyZWVuJyxcclxuICAgIG5hbWU6ICdHcmVlbiBTaWduYWwnLFxyXG4gICAgY29tcG9uZW50OiBUcmFmZmljTGlnaHQsXHJcbiAgICBwcm9wczoge1xyXG4gICAgICBhY3RpdmVDb2xvcjogJ2dyZWVuJyxcclxuICAgICAgdGltZXI6IDE1MDAwXHJcbiAgICB9XHJcbiAgfVxyXG5dXHJcblxyXG5jb25zdCByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcclxuICByb3V0ZXNcclxufSlcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlciIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2FwcCB7XFxuICBmb250LWZhbWlseTogQXZlbmlyLCBIZWx2ZXRpY2EsIEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgY29sb3I6ICMyYzNlNTA7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9BcHAudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFnQkE7RUFDQSxpREFBQTtFQUNBLG1DQUFBO0VBQ0Esa0NBQUE7RUFDQSxrQkFBQTtFQUNBLGNBQUE7QUFDQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGU+XFxuICA8ZGl2IGlkPVxcXCJhcHBcXFwiPlxcbiAgICA8cm91dGVyLXZpZXcvPlxcbiAgPC9kaXY+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcbiAgaW1wb3J0IFRyYWZmaWNMaWdodCBmcm9tIFxcXCIuL2NvbXBvbmVudHMvVHJhZmZpY0xpZ2h0LnZ1ZVxcXCJcXG4gIGV4cG9ydCBkZWZhdWx0IHtcXG4gICAgY29tcG9uZW50czoge1xcbiAgICAgIFRyYWZmaWNMaWdodFxcbiAgICB9XFxuICB9XFxuPC9zY3JpcHQ+XFxuXFxuPHN0eWxlPlxcbiNhcHAge1xcbiAgZm9udC1mYW1pbHk6IEF2ZW5pciwgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gIGNvbG9yOiAjMmMzZTUwO1xcbn1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2Nzc1dpdGhNYXBwaW5nVG9TdHJpbmcuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIlxcbi50cmFmZmljLWxpZ2h0W2RhdGEtdi02YTA4MzhjOV0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB3aWR0aDogMjAwcHg7XFxuICBoZWlnaHQ6IDUwMHB4O1xcbiAgbWFyZ2luOiA1MHB4IGF1dG87XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODMpO1xcbiAgYm9yZGVyLXJhZGl1czogNTBweDtcXG59XFxuXCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvVHJhZmZpY0xpZ2h0LnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBd0ZBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsNkJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0EsaUJBQUE7RUFDQSxxQ0FBQTtFQUNBLG1CQUFBO0FBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgPGRpdiBjbGFzcz1cXFwidHJhZmZpYy1saWdodFxcXCI+XFxyXFxuICAgIDxTaWduYWxcXHJcXG4gICAgICB2LWZvcj1cXFwic2lnbmFsIGluIHNpZ25hbHNcXFwiXFxyXFxuICAgICAgOmtleT1cXFwic2lnbmFsLmNvbG9yXFxcIlxcclxcbiAgICAgIDpjb2xvcj1cXFwic2lnbmFsLmNvbG9yXFxcIlxcclxcbiAgICAgIDppc0FjdGl2ZT1cXFwic2lnbmFsLmNvbG9yID09PSBhY3RpdmVDb2xvclxcXCJcXHJcXG4gICAgICA6aXNEaW09XFxcIiEoc2lnbmFsLmNvbG9yID09PSBhY3RpdmVDb2xvcilcXFwiXFxyXFxuICAgIC8+XFxyXFxuICA8L2Rpdj5cXHJcXG48L3RlbXBsYXRlPlxcclxcblxcclxcbjxzY3JpcHQ+XFxyXFxuICBpbXBvcnQgU2lnbmFsIGZyb20gJy4vdHJhZmZpYy1saWdodC1jb21wb25lbnRzL1NpZ25hbC52dWUnO1xcclxcbiAgZXhwb3J0IGRlZmF1bHQge1xcclxcbiAgICBuYW1lOiAnVHJhZmZpY0xpZ2h0JyxcXHJcXG4gICAgY29tcG9uZW50czoge1xcclxcbiAgICAgIFNpZ25hbFxcclxcbiAgICB9LFxcclxcbiAgICBwcm9wczoge1xcclxcbiAgICAgIGFjdGl2ZUNvbG9yOiBTdHJpbmcsXFxyXFxuICAgICAgdGltZXI6IE51bWJlclxcclxcbiAgICB9LFxcclxcbiAgICBkYXRhKCkge1xcclxcbiAgICAgIHJldHVybiB7XFxyXFxuICAgICAgICBzaWduYWxzOiBbXFxyXFxuICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJ3JlZCcsXFxyXFxuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlXFxyXFxuICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJ3llbGxvdycsXFxyXFxuICAgICAgICAgICAgaXNBY3RpdmU6IGZhbHNlXFxyXFxuICAgICAgICAgIH0sXFxyXFxuICAgICAgICAgIHtcXHJcXG4gICAgICAgICAgICBjb2xvcjogJ2dyZWVuJyxcXHJcXG4gICAgICAgICAgICBpc0FjdGl2ZTogZmFsc2VcXHJcXG4gICAgICAgICAgfVxcclxcbiAgICAgICAgXSxcXHJcXG4gICAgICAgIHNpZ25hbHNPcmRlcjogdGhpcy5zZXRTaWduYWxzT3JkZXJCeURlZmF1bHQoKSxcXHJcXG5cXHJcXG4gICAgICB9XFxyXFxuICAgIH0sXFxyXFxuICAgIGNyZWF0ZWQoKSB7XFxyXFxuICAgICAgY29uc29sZS5sb2coJ2NyZWF0ZWQgJyArIHRoaXMuYWN0aXZlQ29sb3IpXFxyXFxuICAgICAgdGhpcy5zdGFydFRpbWVyKClcXHJcXG4gICAgfSxcXHJcXG4gICAgdXBkYXRlZCgpIHtcXHJcXG4gICAgICBjb25zb2xlLmxvZygndXBkYXRlZCAnICsgdGhpcy5hY3RpdmVDb2xvcilcXHJcXG4gICAgICBjb25zb2xlLmxvZyh0aGlzLnNpZ25hbHNPcmRlcilcXHJcXG4gICAgICB0aGlzLnN0YXJ0VGltZXIoKVxcclxcbiAgICB9LFxcclxcbiAgICB3YXRjaDoge1xcclxcbiAgICAgIC8vICdzaWduYWxzT3JkZXInOiAoKSA9PiB7XFxyXFxuICAgICAgLy8gICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2lnbmFsc09yZGVyJywgSlNPTi5zdHJpbmdpZnkodGhpcy5zaWduYWxzT3JkZXIpKVxcclxcbiAgICAgIC8vIH1cXHJcXG4gICAgfSxcXHJcXG4gICAgbWV0aG9kczoge1xcclxcbiAgICAgIC8vIGdldEl0RnJvbUxvY2FsU3RvcmFnZShrZXkpIHtcXHJcXG4gICAgICAvLyAgIGNvbnN0IGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpXFxyXFxuICAgICAgLy8gICBpZiAoaXRlbSkge1xcclxcbiAgICAgIC8vICAgICByZXR1cm4gSlNPTi5wYXJzZShpdGVtKVxcclxcbiAgICAgIC8vICAgfSBlbHNlIHtcXHJcXG4gICAgICAvLyAgICAgcmV0dXJuIG51bGxcXHJcXG4gICAgICAvLyAgIH1cXHJcXG4gICAgICAvLyB9LFxcclxcbiAgICAgIHN0YXJ0VGltZXIoKSB7XFxyXFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcXHJcXG4gICAgICAgICAgdGhpcy4kcm91dGVyLnB1c2goYC8ke3RoaXMuc2lnbmFsc09yZGVyWzFdfWApXFxyXFxuICAgICAgICAgIHRoaXMuc2lnbmFsc09yZGVyLnB1c2godGhpcy5zaWduYWxzT3JkZXIuc2hpZnQoKSlcXHJcXG4gICAgICAgIH0sIHRoaXMudGltZXIpXFxyXFxuICAgICAgfSxcXHJcXG4gICAgICBzZXRTaWduYWxzT3JkZXJCeURlZmF1bHQoKSB7XFxyXFxuICAgICAgICBzd2l0Y2ggKHRoaXMuYWN0aXZlQ29sb3IpIHtcXHJcXG4gICAgICAgICAgY2FzZSAncmVkJzpcXHJcXG4gICAgICAgICAgICByZXR1cm4gWydyZWQnLCAneWVsbG93JywgJ2dyZWVuJ11cXHJcXG4gICAgICAgICAgY2FzZSAneWVsbG93JzpcXHJcXG4gICAgICAgICAgICByZXR1cm4gWyd5ZWxsb3cnLCAnZ3JlZW4nLCAncmVkJ11cXHJcXG4gICAgICAgICAgY2FzZSAnZ3JlZW4nOlxcclxcbiAgICAgICAgICAgIHJldHVybiBbJ2dyZWVuJywgJ3JlZCcsICd5ZWxsb3cnXVxcclxcbiAgICAgICAgfVxcclxcbiAgICAgIH1cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbjwvc2NyaXB0PlxcclxcblxcclxcblxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuICAudHJhZmZpYy1saWdodCB7XFxyXFxuICAgIGRpc3BsYXk6IGZsZXg7XFxyXFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxyXFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcclxcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcclxcbiAgICB3aWR0aDogMjAwcHg7XFxyXFxuICAgIGhlaWdodDogNTAwcHg7XFxyXFxuICAgIG1hcmdpbjogNTBweCBhdXRvO1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuODMpO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1MHB4O1xcclxcbiAgfVxcclxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLnNpZ25hbFtkYXRhLXYtN2VjN2ZjM2FdIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIHdpZHRoOiAxMDBweDtcXG4gIGhlaWdodDogMTAwcHg7XFxuICBib3JkZXI6IDEwcHggc29saWQgYmxhY2s7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBib3gtc2hhZG93OiAwIDAgMTBweCBibGFjayBpbnNldDtcXG59XFxuLnJlZC1zaWduYWxbZGF0YS12LTdlYzdmYzNhXSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZWQ7XFxufVxcbi55ZWxsb3ctc2lnbmFsW2RhdGEtdi03ZWM3ZmMzYV0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93O1xcbn1cXG4uZ3JlZW4tc2lnbmFsW2RhdGEtdi03ZWM3ZmMzYV0ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxufVxcbi5kaW0tc2lnbmFsW2RhdGEtdi03ZWM3ZmMzYV06YWZ0ZXIge1xcbiAgY29udGVudDogXFxcIlxcXCI7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IC0xcHg7XFxuICByaWdodDogLTFweDtcXG4gIGxlZnQ6IC0xcHg7XFxuICBib3R0b206IC0xcHg7XFxuICB6LWluZGV4OiAxMDA7XFxuICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwO1xcbiAgb3BhY2l0eTogMC44O1xcbn1cXG4uYmxpbmtbZGF0YS12LTdlYzdmYzNhXTphZnRlciB7XFxuICBhbmltYXRpb246IGJsaW5rLWRhdGEtdi03ZWM3ZmMzYSAwLjZzIGluZmluaXRlO1xcbn1cXG5Aa2V5ZnJhbWVzIGJsaW5rLWRhdGEtdi03ZWM3ZmMzYSB7XFxuMCUgeyBvcGFjaXR5OiAwLjhcXG59XFxuNTAlIHsgb3BhY2l0eTogMC4xXFxufVxcbjEwMCUgeyBvcGFjaXR5OiAwLjhcXG59XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL3RyYWZmaWMtbGlnaHQtY29tcG9uZW50cy9TaWduYWwudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFnQkE7RUFDQSxrQkFBQTtFQUNBLFlBQUE7RUFDQSxhQUFBO0VBQ0Esd0JBQUE7RUFDQSxrQkFBQTtFQUNBLGdDQUFBO0FBQ0E7QUFDQTtFQUNBLHFCQUFBO0FBQ0E7QUFDQTtFQUNBLHdCQUFBO0FBQ0E7QUFDQTtFQUNBLHVCQUFBO0FBQ0E7QUFDQTtFQUNBLFdBQUE7RUFDQSxrQkFBQTtFQUNBLFNBQUE7RUFDQSxXQUFBO0VBQ0EsVUFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0Esa0JBQUE7RUFDQSxzQkFBQTtFQUNBLFlBQUE7QUFDQTtBQUNBO0VBQ0EsOENBQUE7QUFDQTtBQUNBO0FBQ0EsS0FBQTtBQUFBO0FBQ0EsTUFBQTtBQUFBO0FBQ0EsT0FBQTtBQUFBO0FBQ0FcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcclxcbiAgPGRpdiA6Y2xhc3M9XFxcIlsnc2lnbmFsJywgY29sb3IrJy1zaWduYWwnLCB7J2RpbS1zaWduYWwnOiBpc0RpbX1dXFxcIj48L2Rpdj5cXHJcXG48L3RlbXBsYXRlPlxcclxcblxcclxcbjxzY3JpcHQ+XFxyXFxuICBleHBvcnQgZGVmYXVsdCB7XFxyXFxuICAgIG5hbWU6ICdTaWduYWwnLFxcclxcbiAgICBwcm9wczoge1xcclxcbiAgICAgIGNvbG9yOiBTdHJpbmcsXFxyXFxuICAgICAgaXNBY3RpdmU6IEJvb2xlYW4sXFxyXFxuICAgICAgaXNEaW06IEJvb2xlYW5cXHJcXG4gICAgfVxcclxcbiAgfVxcclxcbjwvc2NyaXB0PlxcclxcblxcclxcbjxzdHlsZSBzY29wZWQ+XFxyXFxuICAuc2lnbmFsIHtcXHJcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcclxcbiAgICB3aWR0aDogMTAwcHg7XFxyXFxuICAgIGhlaWdodDogMTAwcHg7XFxyXFxuICAgIGJvcmRlcjogMTBweCBzb2xpZCBibGFjaztcXHJcXG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xcclxcbiAgICBib3gtc2hhZG93OiAwIDAgMTBweCBibGFjayBpbnNldDtcXHJcXG4gIH1cXHJcXG4gIC5yZWQtc2lnbmFsIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xcclxcbiAgfVxcclxcbiAgLnllbGxvdy1zaWduYWwge1xcclxcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB5ZWxsb3c7XFxyXFxuICB9XFxyXFxuICAuZ3JlZW4tc2lnbmFsIHtcXHJcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogZ3JlZW47XFxyXFxuICB9XFxyXFxuICAuZGltLXNpZ25hbDphZnRlciB7XFxyXFxuICAgIGNvbnRlbnQ6IFxcXCJcXFwiO1xcclxcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxyXFxuICAgIHRvcDogLTFweDtcXHJcXG4gICAgcmlnaHQ6IC0xcHg7XFxyXFxuICAgIGxlZnQ6IC0xcHg7XFxyXFxuICAgIGJvdHRvbTogLTFweDtcXHJcXG4gICAgei1pbmRleDogMTAwO1xcclxcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxyXFxuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDA7XFxyXFxuICAgIG9wYWNpdHk6IDAuODtcXHJcXG4gIH1cXHJcXG4gIC5ibGluazphZnRlciB7XFxyXFxuICAgIGFuaW1hdGlvbjogYmxpbmsgMC42cyBpbmZpbml0ZTtcXHJcXG4gIH1cXHJcXG4gIEBrZXlmcmFtZXMgYmxpbmsge1xcclxcbiAgICAwJSB7IG9wYWNpdHk6IDAuOCB9XFxyXFxuICAgIDUwJSB7IG9wYWNpdHk6IDAuMSB9XFxyXFxuICAgIDEwMCUgeyBvcGFjaXR5OiAwLjggfVxcclxcbiAgfVxcclxcbjwvc3R5bGU+XCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzcyZcIjtcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSBhcGkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgZGVmYXVsdCBjb250ZW50LmxvY2FscyB8fCB7fTsiLCJpbXBvcnQgYXBpIGZyb20gXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICAgICAgICBpbXBvcnQgY29udGVudCBmcm9tIFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UcmFmZmljTGlnaHQudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9NmEwODM4Yzkmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307IiwiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vU2lnbmFsLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTdlYzdmYzNhJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTdiYTViZDkwJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJYOlxcXFzQoNCQ0JHQntCn0JjQmSDQodCi0J7Qm1xcXFxWdWUgSlNcXFxcdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3JcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnN2JhNWJkOTAnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnN2JhNWJkOTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnN2JhNWJkOTAnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2JhNWJkOTAmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignN2JhNWJkOTAnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9BcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9UcmFmZmljTGlnaHQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTZhMDgzOGM5JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL1RyYWZmaWNMaWdodC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1RyYWZmaWNMaWdodC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmltcG9ydCBzdHlsZTAgZnJvbSBcIi4vVHJhZmZpY0xpZ2h0LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTZhMDgzOGM5JnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI2YTA4MzhjOVwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIlg6XFxcXNCg0JDQkdCe0KfQmNCZINCh0KLQntCbXFxcXFZ1ZSBKU1xcXFx2dWUtdHJhZmZpYy1saWdodC1lbXVsYXRvclxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc2YTA4MzhjOScpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc2YTA4MzhjOScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc2YTA4MzhjOScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vVHJhZmZpY0xpZ2h0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02YTA4MzhjOSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc2YTA4MzhjOScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic3JjL2NvbXBvbmVudHMvVHJhZmZpY0xpZ2h0LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vU2lnbmFsLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03ZWM3ZmMzYSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9TaWduYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9TaWduYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL1NpZ25hbC52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03ZWM3ZmMzYSZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiN2VjN2ZjM2FcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJYOlxcXFzQoNCQ0JHQntCn0JjQmSDQodCi0J7Qm1xcXFxWdWUgSlNcXFxcdnVlLXRyYWZmaWMtbGlnaHQtZW11bGF0b3JcXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFhcGkuaXNSZWNvcmRlZCgnN2VjN2ZjM2EnKSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnN2VjN2ZjM2EnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnN2VjN2ZjM2EnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL1NpZ25hbC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9N2VjN2ZjM2Emc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignN2VjN2ZjM2EnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9jb21wb25lbnRzL3RyYWZmaWMtbGlnaHQtY29tcG9uZW50cy9TaWduYWwudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1RyYWZmaWNMaWdodC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9UcmFmZmljTGlnaHQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1NpZ25hbC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9TaWduYWwudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCB7IGF0dHJzOiB7IGlkOiBcImFwcFwiIH0gfSwgW19jKFwicm91dGVyLXZpZXdcIildLCAxKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJkaXZcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcInRyYWZmaWMtbGlnaHRcIiB9LFxuICAgIF92bS5fbChfdm0uc2lnbmFscywgZnVuY3Rpb24oc2lnbmFsKSB7XG4gICAgICByZXR1cm4gX2MoXCJTaWduYWxcIiwge1xuICAgICAgICBrZXk6IHNpZ25hbC5jb2xvcixcbiAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICBjb2xvcjogc2lnbmFsLmNvbG9yLFxuICAgICAgICAgIGlzQWN0aXZlOiBzaWduYWwuY29sb3IgPT09IF92bS5hY3RpdmVDb2xvcixcbiAgICAgICAgICBpc0RpbTogIShzaWduYWwuY29sb3IgPT09IF92bS5hY3RpdmVDb2xvcilcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHtcbiAgICBjbGFzczogW1wic2lnbmFsXCIsIF92bS5jb2xvciArIFwiLXNpZ25hbFwiLCB7IFwiZGltLXNpZ25hbFwiOiBfdm0uaXNEaW0gfV1cbiAgfSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCIvKiBnbG9iYWxzIF9fVlVFX1NTUl9DT05URVhUX18gKi9cblxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXG4vLyBUaGlzIG1vZHVsZSBpcyBhIHJ1bnRpbWUgdXRpbGl0eSBmb3IgY2xlYW5lciBjb21wb25lbnQgbW9kdWxlIG91dHB1dCBhbmQgd2lsbFxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudCAoXG4gIHNjcmlwdEV4cG9ydHMsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXG4gIGluamVjdFN0eWxlcyxcbiAgc2NvcGVJZCxcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cbikge1xuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcbiAgICA/IHNjcmlwdEV4cG9ydHMub3B0aW9uc1xuICAgIDogc2NyaXB0RXhwb3J0c1xuXG4gIC8vIHJlbmRlciBmdW5jdGlvbnNcbiAgaWYgKHJlbmRlcikge1xuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBzdGF0aWNSZW5kZXJGbnNcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcbiAgfVxuXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xuICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWVcbiAgfVxuXG4gIC8vIHNjb3BlZElkXG4gIGlmIChzY29wZUlkKSB7XG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcbiAgfVxuXG4gIHZhciBob29rXG4gIGlmIChtb2R1bGVJZGVudGlmaWVyKSB7IC8vIHNlcnZlciBidWlsZFxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgLy8gMi4zIGluamVjdGlvblxuICAgICAgY29udGV4dCA9XG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXG4gICAgICAgICh0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC4kdm5vZGUgJiYgdGhpcy5wYXJlbnQuJHZub2RlLnNzckNvbnRleHQpIC8vIGZ1bmN0aW9uYWxcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfX1xuICAgICAgfVxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcbiAgICAgIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcbiAgICAgIH1cbiAgICAgIC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJyZW5jZVxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXG4gICAgICB9XG4gICAgfVxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcbiAgICBob29rID0gc2hhZG93TW9kZVxuICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKFxuICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgKG9wdGlvbnMuZnVuY3Rpb25hbCA/IHRoaXMucGFyZW50IDogdGhpcykuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdFxuICAgICAgICApXG4gICAgICB9XG4gICAgICA6IGluamVjdFN0eWxlc1xuICB9XG5cbiAgaWYgKGhvb2spIHtcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XG4gICAgICAvLyBmb3IgdGVtcGxhdGUtb25seSBob3QtcmVsb2FkIGJlY2F1c2UgaW4gdGhhdCBjYXNlIHRoZSByZW5kZXIgZm4gZG9lc24ndFxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24gKGgsIGNvbnRleHQpIHtcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xuICAgICAgdmFyIGV4aXN0aW5nID0gb3B0aW9ucy5iZWZvcmVDcmVhdGVcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXG4gICAgICAgIDogW2hvb2tdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxuICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgfVxufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0aWQ6IG1vZHVsZUlkLFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiBtb2R1bGVbJ2RlZmF1bHQnXSA6XG5cdFx0KCkgPT4gbW9kdWxlO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsIi8vIHN0YXJ0dXBcbi8vIExvYWQgZW50cnkgbW9kdWxlXG5fX3dlYnBhY2tfcmVxdWlyZV9fKFwiLi9zcmMvbWFpbi5qc1wiKTtcbi8vIFRoaXMgZW50cnkgbW9kdWxlIHVzZWQgJ2V4cG9ydHMnIHNvIGl0IGNhbid0IGJlIGlubGluZWRcbiJdLCJzb3VyY2VSb290IjoiIn0=